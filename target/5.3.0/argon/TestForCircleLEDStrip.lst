
c:/Users/Akash/IoTCamp2023/TestForCircleLEDStrip/target/5.3.0/argon/TestForCircleLEDStrip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005580  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000b959c  000b959c  0000959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .note.gnu.build-id 00000024  000b95a4  000b95a4  000095a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000007c  2003e4d0  000b95c8  0000e4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002a4  2003e550  2003e550  0001e550  2**3
                  ALLOC
  7 .backup       00000004  2003f400  000b9644  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_product 00000006  000b9648  000b9648  00019648  2**0
                  ALLOC
  9 .module_info_suffix 00000024  000b964e  000b964e  0001964e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .module_info_crc 00000004  000b9672  000b9672  00019672  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_info   0016792c  00000000  00000000  00019676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00018c17  00000000  00000000  00180fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0004cb3e  00000000  00000000  00199bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000036f0  00000000  00000000  001e66f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000c228  00000000  00000000  001e9de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00045056  00000000  00000000  001f600f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000578ea  00000000  00000000  0023b065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00145e8b  00000000  00000000  0029294f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000a408  00000000  00000000  003d87dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_ldivmod>:
   b401c:	b97b      	cbnz	r3, b403e <__aeabi_ldivmod+0x22>
   b401e:	b972      	cbnz	r2, b403e <__aeabi_ldivmod+0x22>
   b4020:	2900      	cmp	r1, #0
   b4022:	bfbe      	ittt	lt
   b4024:	2000      	movlt	r0, #0
   b4026:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b402a:	e006      	blt.n	b403a <__aeabi_ldivmod+0x1e>
   b402c:	bf08      	it	eq
   b402e:	2800      	cmpeq	r0, #0
   b4030:	bf1c      	itt	ne
   b4032:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b4036:	f04f 30ff 	movne.w	r0, #4294967295
   b403a:	f000 b9bf 	b.w	b43bc <__aeabi_idiv0>
   b403e:	f1ad 0c08 	sub.w	ip, sp, #8
   b4042:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b4046:	2900      	cmp	r1, #0
   b4048:	db09      	blt.n	b405e <__aeabi_ldivmod+0x42>
   b404a:	2b00      	cmp	r3, #0
   b404c:	db1a      	blt.n	b4084 <__aeabi_ldivmod+0x68>
   b404e:	f000 f84d 	bl	b40ec <__udivmoddi4>
   b4052:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4056:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b405a:	b004      	add	sp, #16
   b405c:	4770      	bx	lr
   b405e:	4240      	negs	r0, r0
   b4060:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4064:	2b00      	cmp	r3, #0
   b4066:	db1b      	blt.n	b40a0 <__aeabi_ldivmod+0x84>
   b4068:	f000 f840 	bl	b40ec <__udivmoddi4>
   b406c:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4074:	b004      	add	sp, #16
   b4076:	4240      	negs	r0, r0
   b4078:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b407c:	4252      	negs	r2, r2
   b407e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4082:	4770      	bx	lr
   b4084:	4252      	negs	r2, r2
   b4086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b408a:	f000 f82f 	bl	b40ec <__udivmoddi4>
   b408e:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4092:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4096:	b004      	add	sp, #16
   b4098:	4240      	negs	r0, r0
   b409a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409e:	4770      	bx	lr
   b40a0:	4252      	negs	r2, r2
   b40a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40a6:	f000 f821 	bl	b40ec <__udivmoddi4>
   b40aa:	f8dd e004 	ldr.w	lr, [sp, #4]
   b40ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b40b2:	b004      	add	sp, #16
   b40b4:	4252      	negs	r2, r2
   b40b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ba:	4770      	bx	lr

000b40bc <__aeabi_uldivmod>:
   b40bc:	b953      	cbnz	r3, b40d4 <__aeabi_uldivmod+0x18>
   b40be:	b94a      	cbnz	r2, b40d4 <__aeabi_uldivmod+0x18>
   b40c0:	2900      	cmp	r1, #0
   b40c2:	bf08      	it	eq
   b40c4:	2800      	cmpeq	r0, #0
   b40c6:	bf1c      	itt	ne
   b40c8:	f04f 31ff 	movne.w	r1, #4294967295
   b40cc:	f04f 30ff 	movne.w	r0, #4294967295
   b40d0:	f000 b974 	b.w	b43bc <__aeabi_idiv0>
   b40d4:	f1ad 0c08 	sub.w	ip, sp, #8
   b40d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b40dc:	f000 f806 	bl	b40ec <__udivmoddi4>
   b40e0:	f8dd e004 	ldr.w	lr, [sp, #4]
   b40e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b40e8:	b004      	add	sp, #16
   b40ea:	4770      	bx	lr

000b40ec <__udivmoddi4>:
   b40ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b40f0:	9d08      	ldr	r5, [sp, #32]
   b40f2:	4604      	mov	r4, r0
   b40f4:	468e      	mov	lr, r1
   b40f6:	2b00      	cmp	r3, #0
   b40f8:	d14d      	bne.n	b4196 <__udivmoddi4+0xaa>
   b40fa:	428a      	cmp	r2, r1
   b40fc:	4694      	mov	ip, r2
   b40fe:	d969      	bls.n	b41d4 <__udivmoddi4+0xe8>
   b4100:	fab2 f282 	clz	r2, r2
   b4104:	b152      	cbz	r2, b411c <__udivmoddi4+0x30>
   b4106:	fa01 f302 	lsl.w	r3, r1, r2
   b410a:	f1c2 0120 	rsb	r1, r2, #32
   b410e:	fa20 f101 	lsr.w	r1, r0, r1
   b4112:	fa0c fc02 	lsl.w	ip, ip, r2
   b4116:	ea41 0e03 	orr.w	lr, r1, r3
   b411a:	4094      	lsls	r4, r2
   b411c:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b4120:	0c21      	lsrs	r1, r4, #16
   b4122:	fbbe f6f8 	udiv	r6, lr, r8
   b4126:	fa1f f78c 	uxth.w	r7, ip
   b412a:	fb08 e316 	mls	r3, r8, r6, lr
   b412e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b4132:	fb06 f107 	mul.w	r1, r6, r7
   b4136:	4299      	cmp	r1, r3
   b4138:	d90a      	bls.n	b4150 <__udivmoddi4+0x64>
   b413a:	eb1c 0303 	adds.w	r3, ip, r3
   b413e:	f106 30ff 	add.w	r0, r6, #4294967295
   b4142:	f080 811f 	bcs.w	b4384 <__udivmoddi4+0x298>
   b4146:	4299      	cmp	r1, r3
   b4148:	f240 811c 	bls.w	b4384 <__udivmoddi4+0x298>
   b414c:	3e02      	subs	r6, #2
   b414e:	4463      	add	r3, ip
   b4150:	1a5b      	subs	r3, r3, r1
   b4152:	b2a4      	uxth	r4, r4
   b4154:	fbb3 f0f8 	udiv	r0, r3, r8
   b4158:	fb08 3310 	mls	r3, r8, r0, r3
   b415c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b4160:	fb00 f707 	mul.w	r7, r0, r7
   b4164:	42a7      	cmp	r7, r4
   b4166:	d90a      	bls.n	b417e <__udivmoddi4+0x92>
   b4168:	eb1c 0404 	adds.w	r4, ip, r4
   b416c:	f100 33ff 	add.w	r3, r0, #4294967295
   b4170:	f080 810a 	bcs.w	b4388 <__udivmoddi4+0x29c>
   b4174:	42a7      	cmp	r7, r4
   b4176:	f240 8107 	bls.w	b4388 <__udivmoddi4+0x29c>
   b417a:	4464      	add	r4, ip
   b417c:	3802      	subs	r0, #2
   b417e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b4182:	1be4      	subs	r4, r4, r7
   b4184:	2600      	movs	r6, #0
   b4186:	b11d      	cbz	r5, b4190 <__udivmoddi4+0xa4>
   b4188:	40d4      	lsrs	r4, r2
   b418a:	2300      	movs	r3, #0
   b418c:	e9c5 4300 	strd	r4, r3, [r5]
   b4190:	4631      	mov	r1, r6
   b4192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4196:	428b      	cmp	r3, r1
   b4198:	d909      	bls.n	b41ae <__udivmoddi4+0xc2>
   b419a:	2d00      	cmp	r5, #0
   b419c:	f000 80ef 	beq.w	b437e <__udivmoddi4+0x292>
   b41a0:	2600      	movs	r6, #0
   b41a2:	e9c5 0100 	strd	r0, r1, [r5]
   b41a6:	4630      	mov	r0, r6
   b41a8:	4631      	mov	r1, r6
   b41aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b41ae:	fab3 f683 	clz	r6, r3
   b41b2:	2e00      	cmp	r6, #0
   b41b4:	d14a      	bne.n	b424c <__udivmoddi4+0x160>
   b41b6:	428b      	cmp	r3, r1
   b41b8:	d302      	bcc.n	b41c0 <__udivmoddi4+0xd4>
   b41ba:	4282      	cmp	r2, r0
   b41bc:	f200 80f9 	bhi.w	b43b2 <__udivmoddi4+0x2c6>
   b41c0:	1a84      	subs	r4, r0, r2
   b41c2:	eb61 0303 	sbc.w	r3, r1, r3
   b41c6:	2001      	movs	r0, #1
   b41c8:	469e      	mov	lr, r3
   b41ca:	2d00      	cmp	r5, #0
   b41cc:	d0e0      	beq.n	b4190 <__udivmoddi4+0xa4>
   b41ce:	e9c5 4e00 	strd	r4, lr, [r5]
   b41d2:	e7dd      	b.n	b4190 <__udivmoddi4+0xa4>
   b41d4:	b902      	cbnz	r2, b41d8 <__udivmoddi4+0xec>
   b41d6:	deff      	udf	#255	; 0xff
   b41d8:	fab2 f282 	clz	r2, r2
   b41dc:	2a00      	cmp	r2, #0
   b41de:	f040 8092 	bne.w	b4306 <__udivmoddi4+0x21a>
   b41e2:	eba1 010c 	sub.w	r1, r1, ip
   b41e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b41ea:	fa1f fe8c 	uxth.w	lr, ip
   b41ee:	2601      	movs	r6, #1
   b41f0:	0c20      	lsrs	r0, r4, #16
   b41f2:	fbb1 f3f7 	udiv	r3, r1, r7
   b41f6:	fb07 1113 	mls	r1, r7, r3, r1
   b41fa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b41fe:	fb0e f003 	mul.w	r0, lr, r3
   b4202:	4288      	cmp	r0, r1
   b4204:	d908      	bls.n	b4218 <__udivmoddi4+0x12c>
   b4206:	eb1c 0101 	adds.w	r1, ip, r1
   b420a:	f103 38ff 	add.w	r8, r3, #4294967295
   b420e:	d202      	bcs.n	b4216 <__udivmoddi4+0x12a>
   b4210:	4288      	cmp	r0, r1
   b4212:	f200 80cb 	bhi.w	b43ac <__udivmoddi4+0x2c0>
   b4216:	4643      	mov	r3, r8
   b4218:	1a09      	subs	r1, r1, r0
   b421a:	b2a4      	uxth	r4, r4
   b421c:	fbb1 f0f7 	udiv	r0, r1, r7
   b4220:	fb07 1110 	mls	r1, r7, r0, r1
   b4224:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b4228:	fb0e fe00 	mul.w	lr, lr, r0
   b422c:	45a6      	cmp	lr, r4
   b422e:	d908      	bls.n	b4242 <__udivmoddi4+0x156>
   b4230:	eb1c 0404 	adds.w	r4, ip, r4
   b4234:	f100 31ff 	add.w	r1, r0, #4294967295
   b4238:	d202      	bcs.n	b4240 <__udivmoddi4+0x154>
   b423a:	45a6      	cmp	lr, r4
   b423c:	f200 80bb 	bhi.w	b43b6 <__udivmoddi4+0x2ca>
   b4240:	4608      	mov	r0, r1
   b4242:	eba4 040e 	sub.w	r4, r4, lr
   b4246:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b424a:	e79c      	b.n	b4186 <__udivmoddi4+0x9a>
   b424c:	f1c6 0720 	rsb	r7, r6, #32
   b4250:	40b3      	lsls	r3, r6
   b4252:	fa22 fc07 	lsr.w	ip, r2, r7
   b4256:	ea4c 0c03 	orr.w	ip, ip, r3
   b425a:	fa20 f407 	lsr.w	r4, r0, r7
   b425e:	fa01 f306 	lsl.w	r3, r1, r6
   b4262:	431c      	orrs	r4, r3
   b4264:	40f9      	lsrs	r1, r7
   b4266:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b426a:	fa00 f306 	lsl.w	r3, r0, r6
   b426e:	fbb1 f8f9 	udiv	r8, r1, r9
   b4272:	0c20      	lsrs	r0, r4, #16
   b4274:	fa1f fe8c 	uxth.w	lr, ip
   b4278:	fb09 1118 	mls	r1, r9, r8, r1
   b427c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4280:	fb08 f00e 	mul.w	r0, r8, lr
   b4284:	4288      	cmp	r0, r1
   b4286:	fa02 f206 	lsl.w	r2, r2, r6
   b428a:	d90b      	bls.n	b42a4 <__udivmoddi4+0x1b8>
   b428c:	eb1c 0101 	adds.w	r1, ip, r1
   b4290:	f108 3aff 	add.w	sl, r8, #4294967295
   b4294:	f080 8088 	bcs.w	b43a8 <__udivmoddi4+0x2bc>
   b4298:	4288      	cmp	r0, r1
   b429a:	f240 8085 	bls.w	b43a8 <__udivmoddi4+0x2bc>
   b429e:	f1a8 0802 	sub.w	r8, r8, #2
   b42a2:	4461      	add	r1, ip
   b42a4:	1a09      	subs	r1, r1, r0
   b42a6:	b2a4      	uxth	r4, r4
   b42a8:	fbb1 f0f9 	udiv	r0, r1, r9
   b42ac:	fb09 1110 	mls	r1, r9, r0, r1
   b42b0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b42b4:	fb00 fe0e 	mul.w	lr, r0, lr
   b42b8:	458e      	cmp	lr, r1
   b42ba:	d908      	bls.n	b42ce <__udivmoddi4+0x1e2>
   b42bc:	eb1c 0101 	adds.w	r1, ip, r1
   b42c0:	f100 34ff 	add.w	r4, r0, #4294967295
   b42c4:	d26c      	bcs.n	b43a0 <__udivmoddi4+0x2b4>
   b42c6:	458e      	cmp	lr, r1
   b42c8:	d96a      	bls.n	b43a0 <__udivmoddi4+0x2b4>
   b42ca:	3802      	subs	r0, #2
   b42cc:	4461      	add	r1, ip
   b42ce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b42d2:	fba0 9402 	umull	r9, r4, r0, r2
   b42d6:	eba1 010e 	sub.w	r1, r1, lr
   b42da:	42a1      	cmp	r1, r4
   b42dc:	46c8      	mov	r8, r9
   b42de:	46a6      	mov	lr, r4
   b42e0:	d356      	bcc.n	b4390 <__udivmoddi4+0x2a4>
   b42e2:	d053      	beq.n	b438c <__udivmoddi4+0x2a0>
   b42e4:	b15d      	cbz	r5, b42fe <__udivmoddi4+0x212>
   b42e6:	ebb3 0208 	subs.w	r2, r3, r8
   b42ea:	eb61 010e 	sbc.w	r1, r1, lr
   b42ee:	fa01 f707 	lsl.w	r7, r1, r7
   b42f2:	fa22 f306 	lsr.w	r3, r2, r6
   b42f6:	40f1      	lsrs	r1, r6
   b42f8:	431f      	orrs	r7, r3
   b42fa:	e9c5 7100 	strd	r7, r1, [r5]
   b42fe:	2600      	movs	r6, #0
   b4300:	4631      	mov	r1, r6
   b4302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4306:	f1c2 0320 	rsb	r3, r2, #32
   b430a:	40d8      	lsrs	r0, r3
   b430c:	fa0c fc02 	lsl.w	ip, ip, r2
   b4310:	fa21 f303 	lsr.w	r3, r1, r3
   b4314:	4091      	lsls	r1, r2
   b4316:	4301      	orrs	r1, r0
   b4318:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b431c:	fa1f fe8c 	uxth.w	lr, ip
   b4320:	fbb3 f0f7 	udiv	r0, r3, r7
   b4324:	fb07 3610 	mls	r6, r7, r0, r3
   b4328:	0c0b      	lsrs	r3, r1, #16
   b432a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b432e:	fb00 f60e 	mul.w	r6, r0, lr
   b4332:	429e      	cmp	r6, r3
   b4334:	fa04 f402 	lsl.w	r4, r4, r2
   b4338:	d908      	bls.n	b434c <__udivmoddi4+0x260>
   b433a:	eb1c 0303 	adds.w	r3, ip, r3
   b433e:	f100 38ff 	add.w	r8, r0, #4294967295
   b4342:	d22f      	bcs.n	b43a4 <__udivmoddi4+0x2b8>
   b4344:	429e      	cmp	r6, r3
   b4346:	d92d      	bls.n	b43a4 <__udivmoddi4+0x2b8>
   b4348:	3802      	subs	r0, #2
   b434a:	4463      	add	r3, ip
   b434c:	1b9b      	subs	r3, r3, r6
   b434e:	b289      	uxth	r1, r1
   b4350:	fbb3 f6f7 	udiv	r6, r3, r7
   b4354:	fb07 3316 	mls	r3, r7, r6, r3
   b4358:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b435c:	fb06 f30e 	mul.w	r3, r6, lr
   b4360:	428b      	cmp	r3, r1
   b4362:	d908      	bls.n	b4376 <__udivmoddi4+0x28a>
   b4364:	eb1c 0101 	adds.w	r1, ip, r1
   b4368:	f106 38ff 	add.w	r8, r6, #4294967295
   b436c:	d216      	bcs.n	b439c <__udivmoddi4+0x2b0>
   b436e:	428b      	cmp	r3, r1
   b4370:	d914      	bls.n	b439c <__udivmoddi4+0x2b0>
   b4372:	3e02      	subs	r6, #2
   b4374:	4461      	add	r1, ip
   b4376:	1ac9      	subs	r1, r1, r3
   b4378:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b437c:	e738      	b.n	b41f0 <__udivmoddi4+0x104>
   b437e:	462e      	mov	r6, r5
   b4380:	4628      	mov	r0, r5
   b4382:	e705      	b.n	b4190 <__udivmoddi4+0xa4>
   b4384:	4606      	mov	r6, r0
   b4386:	e6e3      	b.n	b4150 <__udivmoddi4+0x64>
   b4388:	4618      	mov	r0, r3
   b438a:	e6f8      	b.n	b417e <__udivmoddi4+0x92>
   b438c:	454b      	cmp	r3, r9
   b438e:	d2a9      	bcs.n	b42e4 <__udivmoddi4+0x1f8>
   b4390:	ebb9 0802 	subs.w	r8, r9, r2
   b4394:	eb64 0e0c 	sbc.w	lr, r4, ip
   b4398:	3801      	subs	r0, #1
   b439a:	e7a3      	b.n	b42e4 <__udivmoddi4+0x1f8>
   b439c:	4646      	mov	r6, r8
   b439e:	e7ea      	b.n	b4376 <__udivmoddi4+0x28a>
   b43a0:	4620      	mov	r0, r4
   b43a2:	e794      	b.n	b42ce <__udivmoddi4+0x1e2>
   b43a4:	4640      	mov	r0, r8
   b43a6:	e7d1      	b.n	b434c <__udivmoddi4+0x260>
   b43a8:	46d0      	mov	r8, sl
   b43aa:	e77b      	b.n	b42a4 <__udivmoddi4+0x1b8>
   b43ac:	3b02      	subs	r3, #2
   b43ae:	4461      	add	r1, ip
   b43b0:	e732      	b.n	b4218 <__udivmoddi4+0x12c>
   b43b2:	4630      	mov	r0, r6
   b43b4:	e709      	b.n	b41ca <__udivmoddi4+0xde>
   b43b6:	4464      	add	r4, ip
   b43b8:	3802      	subs	r0, #2
   b43ba:	e742      	b.n	b4242 <__udivmoddi4+0x156>

000b43bc <__aeabi_idiv0>:
   b43bc:	4770      	bx	lr
   b43be:	bf00      	nop

000b43c0 <strcmp>:
   b43c0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b43c4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b43c8:	2a01      	cmp	r2, #1
   b43ca:	bf28      	it	cs
   b43cc:	429a      	cmpcs	r2, r3
   b43ce:	d0f7      	beq.n	b43c0 <strcmp>
   b43d0:	1ad0      	subs	r0, r2, r3
   b43d2:	4770      	bx	lr

000b43d4 <strlen>:
   b43d4:	4603      	mov	r3, r0
   b43d6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b43da:	2a00      	cmp	r2, #0
   b43dc:	d1fb      	bne.n	b43d6 <strlen+0x2>
   b43de:	1a18      	subs	r0, r3, r0
   b43e0:	3801      	subs	r0, #1
   b43e2:	4770      	bx	lr

000b43e4 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b43e4:	4809      	ldr	r0, [pc, #36]	; (b440c <module_user_pre_init+0x28>)
   b43e6:	490a      	ldr	r1, [pc, #40]	; (b4410 <module_user_pre_init+0x2c>)
   b43e8:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b43ea:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b43ec:	d005      	beq.n	b43fa <module_user_pre_init+0x16>
   b43ee:	4a09      	ldr	r2, [pc, #36]	; (b4414 <module_user_pre_init+0x30>)
   b43f0:	4282      	cmp	r2, r0
   b43f2:	d002      	beq.n	b43fa <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b43f4:	1a12      	subs	r2, r2, r0
   b43f6:	f003 ff5b 	bl	b82b0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b43fa:	4807      	ldr	r0, [pc, #28]	; (b4418 <module_user_pre_init+0x34>)
   b43fc:	4a07      	ldr	r2, [pc, #28]	; (b441c <module_user_pre_init+0x38>)
   b43fe:	2100      	movs	r1, #0
   b4400:	1a12      	subs	r2, r2, r0
   b4402:	f003 ff63 	bl	b82cc <memset>
    return &link_global_data_start;
}
   b4406:	4801      	ldr	r0, [pc, #4]	; (b440c <module_user_pre_init+0x28>)
   b4408:	bd08      	pop	{r3, pc}
   b440a:	bf00      	nop
   b440c:	2003e4d0 	.word	0x2003e4d0
   b4410:	000b95c8 	.word	0x000b95c8
   b4414:	2003e54c 	.word	0x2003e54c
   b4418:	2003e550 	.word	0x2003e550
   b441c:	2003e7f4 	.word	0x2003e7f4

000b4420 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4420:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4422:	4e07      	ldr	r6, [pc, #28]	; (b4440 <module_user_init+0x20>)
   b4424:	4c07      	ldr	r4, [pc, #28]	; (b4444 <module_user_init+0x24>)
    module_user_init_hook();
   b4426:	f002 ff73 	bl	b7310 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b442a:	1ba4      	subs	r4, r4, r6
   b442c:	08a4      	lsrs	r4, r4, #2
   b442e:	2500      	movs	r5, #0
   b4430:	42ac      	cmp	r4, r5
   b4432:	d100      	bne.n	b4436 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4434:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4436:	f856 3b04 	ldr.w	r3, [r6], #4
   b443a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b443c:	3501      	adds	r5, #1
   b443e:	e7f7      	b.n	b4430 <module_user_init+0x10>
   b4440:	000b9574 	.word	0x000b9574
   b4444:	000b959c 	.word	0x000b959c

000b4448 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4448:	f000 b85e 	b.w	b4508 <setup>

000b444c <module_user_loop>:
}

void module_user_loop() {
   b444c:	b508      	push	{r3, lr}
    loop();
   b444e:	f000 f947 	bl	b46e0 <loop>
    _post_loop();
}
   b4452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4456:	f002 bf13 	b.w	b7280 <_post_loop>

000b445a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b445a:	f002 bc3b 	b.w	b6cd4 <malloc>

000b445e <_Znaj>:
   b445e:	f002 bc39 	b.w	b6cd4 <malloc>

000b4462 <_ZdaPv>:
   b4462:	f002 bc3f 	b.w	b6ce4 <free>

000b4466 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4466:	f002 bc3d 	b.w	b6ce4 <free>
	...

000b446c <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b446c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b446e:	4a03      	ldr	r2, [pc, #12]	; (b447c <__cxa_pure_virtual+0x10>)
   b4470:	4903      	ldr	r1, [pc, #12]	; (b4480 <__cxa_pure_virtual+0x14>)
   b4472:	200c      	movs	r0, #12
   b4474:	f002 fb82 	bl	b6b7c <panic_>
  while (1);
   b4478:	e7fe      	b.n	b4478 <__cxa_pure_virtual+0xc>
   b447a:	bf00      	nop
   b447c:	000b683d 	.word	0x000b683d
   b4480:	000b8568 	.word	0x000b8568

000b4484 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4484:	7800      	ldrb	r0, [r0, #0]
   b4486:	fab0 f080 	clz	r0, r0
   b448a:	0940      	lsrs	r0, r0, #5
   b448c:	4770      	bx	lr

000b448e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b448e:	2301      	movs	r3, #1
   b4490:	7003      	strb	r3, [r0, #0]
   b4492:	4770      	bx	lr

000b4494 <_Z8callbackPcPhj>:
  spinNeopixelLedsColor(0, 0, 12, lengthOfFlashInMS, numberOfLEDs, redValue, greenValue, blueValue);
  display.display();
}

void callback(char *topic, byte *payload, unsigned int length)
{
   b4494:	b5f0      	push	{r4, r5, r6, r7, lr}
  char p[length + 1];
   b4496:	f102 0308 	add.w	r3, r2, #8
{
   b449a:	b083      	sub	sp, #12
  char p[length + 1];
   b449c:	f023 0307 	bic.w	r3, r3, #7
{
   b44a0:	af02      	add	r7, sp, #8
  char p[length + 1];
   b44a2:	ebad 0d03 	sub.w	sp, sp, r3
   b44a6:	ab02      	add	r3, sp, #8
  memcpy(p, payload, length);
   b44a8:	4618      	mov	r0, r3
{
   b44aa:	4614      	mov	r4, r2
  memcpy(p, payload, length);
   b44ac:	f003 ff00 	bl	b82b0 <memcpy>
  p[length] = NULL;
   b44b0:	2200      	movs	r2, #0
   b44b2:	5502      	strb	r2, [r0, r4]
  receivedInt = atoll(p);
   b44b4:	f003 fef8 	bl	b82a8 <atoll>
   b44b8:	4c11      	ldr	r4, [pc, #68]	; (b4500 <_Z8callbackPcPhj+0x6c>)
   b44ba:	e9c4 0100 	strd	r0, r1, [r4]
  Serial.print("MQTT: ");
   b44be:	f003 f849 	bl	b7554 <_Z16_fetch_usbserialv>
   b44c2:	4910      	ldr	r1, [pc, #64]	; (b4504 <_Z8callbackPcPhj+0x70>)
   b44c4:	f002 fdf6 	bl	b70b4 <_ZN5Print5printEPKc>
  Serial.println(receivedInt);
   b44c8:	f003 f844 	bl	b7554 <_Z16_fetch_usbserialv>
   b44cc:	e9d4 4500 	ldrd	r4, r5, [r4]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b44d0:	2d00      	cmp	r5, #0
   b44d2:	4606      	mov	r6, r0
   b44d4:	da10      	bge.n	b44f8 <_Z8callbackPcPhj+0x64>
            t = print('-');
   b44d6:	212d      	movs	r1, #45	; 0x2d
   b44d8:	f002 fdf0 	bl	b70bc <_ZN5Print5printEc>
            val = -n;
   b44dc:	4262      	negs	r2, r4
   b44de:	eb65 0345 	sbc.w	r3, r5, r5, lsl #1
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b44e2:	210a      	movs	r1, #10
   b44e4:	9100      	str	r1, [sp, #0]
   b44e6:	4630      	mov	r0, r6
   b44e8:	f002 fe15 	bl	b7116 <_ZN5Print11printNumberEyh>
        n += println();
   b44ec:	4630      	mov	r0, r6
   b44ee:	f002 fde8 	bl	b70c2 <_ZN5Print7printlnEv>
}
   b44f2:	3704      	adds	r7, #4
   b44f4:	46bd      	mov	sp, r7
   b44f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            val = n;
   b44f8:	4622      	mov	r2, r4
   b44fa:	462b      	mov	r3, r5
   b44fc:	e7f1      	b.n	b44e2 <_Z8callbackPcPhj+0x4e>
   b44fe:	bf00      	nop
   b4500:	2003e688 	.word	0x2003e688
   b4504:	000b857d 	.word	0x000b857d

000b4508 <setup>:
{
   b4508:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b450a:	f003 f823 	bl	b7554 <_Z16_fetch_usbserialv>
   b450e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4512:	f003 f80f 	bl	b7534 <_ZN9USBSerial5beginEl>
  while (!Serial.isConnected())
   b4516:	f003 f81d 	bl	b7554 <_Z16_fetch_usbserialv>
   b451a:	f003 f80f 	bl	b753c <_ZN9USBSerial11isConnectedEv>
   b451e:	2800      	cmp	r0, #0
   b4520:	d0f9      	beq.n	b4516 <setup+0xe>
  display.setup();
   b4522:	4808      	ldr	r0, [pc, #32]	; (b4544 <setup+0x3c>)
   b4524:	f001 f880 	bl	b5628 <_ZN16OledWingAdafruit5setupEv>
  strip.begin();
   b4528:	4807      	ldr	r0, [pc, #28]	; (b4548 <setup+0x40>)
   b452a:	f000 f994 	bl	b4856 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
   b452e:	4806      	ldr	r0, [pc, #24]	; (b4548 <setup+0x40>)
   b4530:	f000 f9ca 	bl	b48c8 <_ZN17Adafruit_NeoPixel4showEv>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4534:	4b05      	ldr	r3, [pc, #20]	; (b454c <setup+0x44>)
  client.subscribe(topicName);
   b4536:	4806      	ldr	r0, [pc, #24]	; (b4550 <setup+0x48>)
   b4538:	6819      	ldr	r1, [r3, #0]
}
   b453a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  client.subscribe(topicName);
   b453e:	f001 bcb7 	b.w	b5eb0 <_ZN4MQTT9subscribeEPKc>
   b4542:	bf00      	nop
   b4544:	2003e610 	.word	0x2003e610
   b4548:	2003e694 	.word	0x2003e694
   b454c:	2003e6a8 	.word	0x2003e6a8
   b4550:	2003e5b0 	.word	0x2003e5b0

000b4554 <_Z21spinNeopixelLedsColoriiiiihhh>:

void spinNeopixelLedsColor(int startIndex, int targetIndex, int numFlashes, int flashDuration, int NUM_LEDS, uint8_t red, uint8_t green, uint8_t blue)
{
   b4554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4558:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b455a:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
   b455e:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
  for (int i = 0; i < numFlashes; i++)
  {
    strip.setPixelColor(targetIndex, strip.Color(red, green, blue));
   b4562:	4f2c      	ldr	r7, [pc, #176]	; (b4614 <_Z21spinNeopixelLedsColoriiiiihhh+0xc0>)
{
   b4564:	9200      	str	r2, [sp, #0]
   b4566:	461e      	mov	r6, r3
   b4568:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   b456c:	460d      	mov	r5, r1
  for (int i = 0; i < numFlashes; i++)
   b456e:	f04f 0800 	mov.w	r8, #0
   b4572:	9a00      	ldr	r2, [sp, #0]
   b4574:	4590      	cmp	r8, r2
   b4576:	da2b      	bge.n	b45d0 <_Z21spinNeopixelLedsColoriiiiihhh+0x7c>
    strip.setPixelColor(targetIndex, strip.Color(red, green, blue));
   b4578:	461a      	mov	r2, r3
   b457a:	4659      	mov	r1, fp
   b457c:	4650      	mov	r0, sl
   b457e:	9301      	str	r3, [sp, #4]
   b4580:	f000 fb91 	bl	b4ca6 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4584:	fa1f f985 	uxth.w	r9, r5
   b4588:	4602      	mov	r2, r0
   b458a:	4649      	mov	r1, r9
   b458c:	4638      	mov	r0, r7
   b458e:	f000 fb47 	bl	b4c20 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.show();
   b4592:	4638      	mov	r0, r7
   b4594:	f000 f998 	bl	b48c8 <_ZN17Adafruit_NeoPixel4showEv>
    delay(flashDuration);
   b4598:	4630      	mov	r0, r6
   b459a:	f002 fe2f 	bl	b71fc <delay>

    strip.setPixelColor(targetIndex, strip.Color(0, 0, 0));
   b459e:	2200      	movs	r2, #0
   b45a0:	4611      	mov	r1, r2
   b45a2:	4610      	mov	r0, r2
   b45a4:	f000 fb7f 	bl	b4ca6 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b45a8:	4649      	mov	r1, r9
   b45aa:	4602      	mov	r2, r0
   b45ac:	4638      	mov	r0, r7
   b45ae:	f000 fb37 	bl	b4c20 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.show();
   b45b2:	4638      	mov	r0, r7
   b45b4:	f000 f988 	bl	b48c8 <_ZN17Adafruit_NeoPixel4showEv>
    delay(flashDuration);

    targetIndex = (targetIndex + 1) % NUM_LEDS;
   b45b8:	3501      	adds	r5, #1
    delay(flashDuration);
   b45ba:	4630      	mov	r0, r6
   b45bc:	f002 fe1e 	bl	b71fc <delay>
    targetIndex = (targetIndex + 1) % NUM_LEDS;
   b45c0:	fb95 f1f4 	sdiv	r1, r5, r4
  for (int i = 0; i < numFlashes; i++)
   b45c4:	9b01      	ldr	r3, [sp, #4]
    targetIndex = (targetIndex + 1) % NUM_LEDS;
   b45c6:	fb04 5511 	mls	r5, r4, r1, r5
  for (int i = 0; i < numFlashes; i++)
   b45ca:	f108 0801 	add.w	r8, r8, #1
   b45ce:	e7d0      	b.n	b4572 <_Z21spinNeopixelLedsColoriiiiihhh+0x1e>
  }

  for (int i = NUM_LEDS - 1; i > 0; i--)
  {
    strip.setPixelColor(i, strip.getPixelColor(i - 1));
   b45d0:	4d10      	ldr	r5, [pc, #64]	; (b4614 <_Z21spinNeopixelLedsColoriiiiihhh+0xc0>)
  for (int i = NUM_LEDS - 1; i > 0; i--)
   b45d2:	3c01      	subs	r4, #1
   b45d4:	2c00      	cmp	r4, #0
   b45d6:	dd0c      	ble.n	b45f2 <_Z21spinNeopixelLedsColoriiiiihhh+0x9e>
    strip.setPixelColor(i, strip.getPixelColor(i - 1));
   b45d8:	b2a6      	uxth	r6, r4
   b45da:	1e71      	subs	r1, r6, #1
   b45dc:	b289      	uxth	r1, r1
   b45de:	4628      	mov	r0, r5
   b45e0:	f000 fb66 	bl	b4cb0 <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
   b45e4:	4631      	mov	r1, r6
   b45e6:	4602      	mov	r2, r0
   b45e8:	4628      	mov	r0, r5
   b45ea:	f000 fb19 	bl	b4c20 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  for (int i = NUM_LEDS - 1; i > 0; i--)
   b45ee:	3c01      	subs	r4, #1
   b45f0:	e7f0      	b.n	b45d4 <_Z21spinNeopixelLedsColoriiiiihhh+0x80>
  }
  strip.setPixelColor(0, strip.Color(0, 0, 0));
   b45f2:	2200      	movs	r2, #0
   b45f4:	4611      	mov	r1, r2
   b45f6:	4610      	mov	r0, r2
   b45f8:	f000 fb55 	bl	b4ca6 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b45fc:	2100      	movs	r1, #0
   b45fe:	4602      	mov	r2, r0
   b4600:	4804      	ldr	r0, [pc, #16]	; (b4614 <_Z21spinNeopixelLedsColoriiiiihhh+0xc0>)
   b4602:	f000 fb0d 	bl	b4c20 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  strip.show();
   b4606:	4803      	ldr	r0, [pc, #12]	; (b4614 <_Z21spinNeopixelLedsColoriiiiihhh+0xc0>)
}
   b4608:	b003      	add	sp, #12
   b460a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  strip.show();
   b460e:	f000 b95b 	b.w	b48c8 <_ZN17Adafruit_NeoPixel4showEv>
   b4612:	bf00      	nop
   b4614:	2003e694 	.word	0x2003e694

000b4618 <_Z17updateColorValuesv>:

void updateColorValues()
{
   b4618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int64_t temp = receivedInt;
   b461c:	4b2a      	ldr	r3, [pc, #168]	; (b46c8 <_Z17updateColorValuesv+0xb0>)
  temp = temp / 10;
  brightness = temp % 1000;
  temp = temp / 1000;
  blueValue = temp % 1000;
  temp = temp / 1000;
  greenValue = temp % 1000;
   b461e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; b46dc <_Z17updateColorValuesv+0xc4>
  int64_t temp = receivedInt;
   b4622:	e9d3 6700 	ldrd	r6, r7, [r3]
  on = temp % 10;
   b4626:	220a      	movs	r2, #10
   b4628:	4630      	mov	r0, r6
   b462a:	4639      	mov	r1, r7
   b462c:	2300      	movs	r3, #0
   b462e:	f7ff fcf5 	bl	b401c <__aeabi_ldivmod>
   b4632:	4b26      	ldr	r3, [pc, #152]	; (b46cc <_Z17updateColorValuesv+0xb4>)
   b4634:	4614      	mov	r4, r2
   b4636:	601c      	str	r4, [r3, #0]
  temp = temp / 10;
   b4638:	220a      	movs	r2, #10
   b463a:	2300      	movs	r3, #0
   b463c:	4630      	mov	r0, r6
   b463e:	4639      	mov	r1, r7
   b4640:	f7ff fcec 	bl	b401c <__aeabi_ldivmod>
  brightness = temp % 1000;
   b4644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4648:	2300      	movs	r3, #0
  temp = temp / 10;
   b464a:	4606      	mov	r6, r0
   b464c:	460d      	mov	r5, r1
  brightness = temp % 1000;
   b464e:	f7ff fce5 	bl	b401c <__aeabi_ldivmod>
   b4652:	4b1f      	ldr	r3, [pc, #124]	; (b46d0 <_Z17updateColorValuesv+0xb8>)
  blueValue = temp % 1000;
   b4654:	4f1f      	ldr	r7, [pc, #124]	; (b46d4 <_Z17updateColorValuesv+0xbc>)
  brightness = temp % 1000;
   b4656:	601a      	str	r2, [r3, #0]
  temp = temp / 1000;
   b4658:	4630      	mov	r0, r6
   b465a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b465e:	2300      	movs	r3, #0
   b4660:	4629      	mov	r1, r5
   b4662:	f7ff fcdb 	bl	b401c <__aeabi_ldivmod>
  blueValue = temp % 1000;
   b4666:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b466a:	2300      	movs	r3, #0
  temp = temp / 1000;
   b466c:	4606      	mov	r6, r0
   b466e:	460d      	mov	r5, r1
  blueValue = temp % 1000;
   b4670:	f7ff fcd4 	bl	b401c <__aeabi_ldivmod>
  temp = temp / 1000;
   b4674:	2300      	movs	r3, #0
  blueValue = temp % 1000;
   b4676:	603a      	str	r2, [r7, #0]
  temp = temp / 1000;
   b4678:	4630      	mov	r0, r6
   b467a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b467e:	4629      	mov	r1, r5
   b4680:	f7ff fccc 	bl	b401c <__aeabi_ldivmod>
  greenValue = temp % 1000;
   b4684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4688:	2300      	movs	r3, #0
  temp = temp / 1000;
   b468a:	4606      	mov	r6, r0
   b468c:	460d      	mov	r5, r1
  greenValue = temp % 1000;
   b468e:	f7ff fcc5 	bl	b401c <__aeabi_ldivmod>
  temp = temp / 1000;
   b4692:	2300      	movs	r3, #0
  greenValue = temp % 1000;
   b4694:	f8c8 2000 	str.w	r2, [r8]
  temp = temp / 1000;
   b4698:	4630      	mov	r0, r6
   b469a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b469e:	4629      	mov	r1, r5
   b46a0:	f7ff fcbc 	bl	b401c <__aeabi_ldivmod>
  redValue = temp % 1000;
   b46a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b46a8:	2300      	movs	r3, #0
   b46aa:	f7ff fcb7 	bl	b401c <__aeabi_ldivmod>

  if (on == 1)
   b46ae:	2c01      	cmp	r4, #1
  redValue = temp % 1000;
   b46b0:	4909      	ldr	r1, [pc, #36]	; (b46d8 <_Z17updateColorValuesv+0xc0>)
  {
    redValue = 0;
   b46b2:	bf08      	it	eq
   b46b4:	2300      	moveq	r3, #0
  redValue = temp % 1000;
   b46b6:	600a      	str	r2, [r1, #0]
    redValue = 0;
   b46b8:	bf02      	ittt	eq
   b46ba:	600b      	streq	r3, [r1, #0]
    greenValue = 0;
   b46bc:	f8c8 3000 	streq.w	r3, [r8]
    blueValue = 0;
   b46c0:	603b      	streq	r3, [r7, #0]
  }
  // analogWrite(LED_PIN, brightness);
}
   b46c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b46c6:	bf00      	nop
   b46c8:	2003e688 	.word	0x2003e688
   b46cc:	2003e684 	.word	0x2003e684
   b46d0:	2003e5ac 	.word	0x2003e5ac
   b46d4:	2003e4d4 	.word	0x2003e4d4
   b46d8:	2003e690 	.word	0x2003e690
   b46dc:	2003e680 	.word	0x2003e680

000b46e0 <loop>:
{
   b46e0:	b500      	push	{lr}
  display.loop();
   b46e2:	4820      	ldr	r0, [pc, #128]	; (b4764 <loop+0x84>)
{
   b46e4:	b089      	sub	sp, #36	; 0x24
  display.loop();
   b46e6:	f000 ffc8 	bl	b567a <_ZN16OledWingAdafruit4loopEv>
  if (client.isConnected())
   b46ea:	481f      	ldr	r0, [pc, #124]	; (b4768 <loop+0x88>)
   b46ec:	f001 f950 	bl	b5990 <_ZN4MQTT11isConnectedEv>
   b46f0:	b338      	cbz	r0, b4742 <loop+0x62>
    client.loop();
   b46f2:	481d      	ldr	r0, [pc, #116]	; (b4768 <loop+0x88>)
   b46f4:	f001 fa94 	bl	b5c20 <_ZN4MQTT4loopEv>
  if (receivedInt > 1)
   b46f8:	4b1c      	ldr	r3, [pc, #112]	; (b476c <loop+0x8c>)
   b46fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b46fe:	2a02      	cmp	r2, #2
   b4700:	f173 0300 	sbcs.w	r3, r3, #0
   b4704:	db01      	blt.n	b470a <loop+0x2a>
    updateColorValues();
   b4706:	f7ff ff87 	bl	b4618 <_Z17updateColorValuesv>
  spinNeopixelLedsColor(0, 0, 12, lengthOfFlashInMS, numberOfLEDs, redValue, greenValue, blueValue);
   b470a:	4b19      	ldr	r3, [pc, #100]	; (b4770 <loop+0x90>)
   b470c:	4a19      	ldr	r2, [pc, #100]	; (b4774 <loop+0x94>)
   b470e:	491a      	ldr	r1, [pc, #104]	; (b4778 <loop+0x98>)
   b4710:	681b      	ldr	r3, [r3, #0]
   b4712:	6812      	ldr	r2, [r2, #0]
   b4714:	6809      	ldr	r1, [r1, #0]
   b4716:	b2db      	uxtb	r3, r3
   b4718:	9301      	str	r3, [sp, #4]
   b471a:	b2c9      	uxtb	r1, r1
   b471c:	b2d2      	uxtb	r2, r2
   b471e:	4b17      	ldr	r3, [pc, #92]	; (b477c <loop+0x9c>)
   b4720:	9103      	str	r1, [sp, #12]
   b4722:	9202      	str	r2, [sp, #8]
   b4724:	681b      	ldr	r3, [r3, #0]
   b4726:	9300      	str	r3, [sp, #0]
   b4728:	4b15      	ldr	r3, [pc, #84]	; (b4780 <loop+0xa0>)
   b472a:	2100      	movs	r1, #0
   b472c:	4608      	mov	r0, r1
   b472e:	681b      	ldr	r3, [r3, #0]
   b4730:	220c      	movs	r2, #12
   b4732:	f7ff ff0f 	bl	b4554 <_Z21spinNeopixelLedsColoriiiiihhh>
  display.display();
   b4736:	480b      	ldr	r0, [pc, #44]	; (b4764 <loop+0x84>)
}
   b4738:	b009      	add	sp, #36	; 0x24
   b473a:	f85d eb04 	ldr.w	lr, [sp], #4
  display.display();
   b473e:	f001 bf9b 	b.w	b6678 <_ZN16Adafruit_SSD13067displayEv>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4742:	a804      	add	r0, sp, #16
   b4744:	f002 fab6 	bl	b6cb4 <spark_deviceID>
    client.connect(System.deviceID());
   b4748:	9904      	ldr	r1, [sp, #16]
   b474a:	4807      	ldr	r0, [pc, #28]	; (b4768 <loop+0x88>)
   b474c:	f001 fa10 	bl	b5b70 <_ZN4MQTT7connectEPKc>
   b4750:	a804      	add	r0, sp, #16
   b4752:	f002 fbf9 	bl	b6f48 <_ZN6StringD1Ev>
   b4756:	4b0b      	ldr	r3, [pc, #44]	; (b4784 <loop+0xa4>)
    client.subscribe(topicName);
   b4758:	4803      	ldr	r0, [pc, #12]	; (b4768 <loop+0x88>)
   b475a:	6819      	ldr	r1, [r3, #0]
   b475c:	f001 fba8 	bl	b5eb0 <_ZN4MQTT9subscribeEPKc>
   b4760:	e7ca      	b.n	b46f8 <loop+0x18>
   b4762:	bf00      	nop
   b4764:	2003e610 	.word	0x2003e610
   b4768:	2003e5b0 	.word	0x2003e5b0
   b476c:	2003e688 	.word	0x2003e688
   b4770:	2003e690 	.word	0x2003e690
   b4774:	2003e680 	.word	0x2003e680
   b4778:	2003e4d4 	.word	0x2003e4d4
   b477c:	2003e4dc 	.word	0x2003e4dc
   b4780:	2003e4d8 	.word	0x2003e4d8
   b4784:	2003e6a8 	.word	0x2003e6a8

000b4788 <_GLOBAL__sub_I_Blynk>:
}
   b4788:	b537      	push	{r0, r1, r2, r4, r5, lr}

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   b478a:	4d19      	ldr	r5, [pc, #100]	; (b47f0 <_GLOBAL__sub_I_Blynk+0x68>)
   b478c:	4628      	mov	r0, r5
   b478e:	f003 fa73 	bl	b7c78 <_ZN9TCPClientC1Ev>
   b4792:	f105 001c 	add.w	r0, r5, #28
   b4796:	f002 fe27 	bl	b73e8 <_ZN9IPAddressC1Ev>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   b479a:	4b16      	ldr	r3, [pc, #88]	; (b47f4 <_GLOBAL__sub_I_Blynk+0x6c>)
String topicName = "gestureLamp"; // has to be changed to an agreed upon topic
   b479c:	4916      	ldr	r1, [pc, #88]	; (b47f8 <_GLOBAL__sub_I_Blynk+0x70>)
   b479e:	4817      	ldr	r0, [pc, #92]	; (b47fc <_GLOBAL__sub_I_Blynk+0x74>)
   b47a0:	2400      	movs	r4, #0
   b47a2:	e9c3 5400 	strd	r5, r4, [r3]
   b47a6:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b47aa:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b47ae:	619c      	str	r4, [r3, #24]
   b47b0:	839c      	strh	r4, [r3, #28]
   b47b2:	636c      	str	r4, [r5, #52]	; 0x34
   b47b4:	872c      	strh	r4, [r5, #56]	; 0x38
   b47b6:	f002 fc12 	bl	b6fde <_ZN6StringC1EPK19__FlashStringHelper>
Adafruit_NeoPixel strip = Adafruit_NeoPixel(numberOfLEDs, LED_PIN, WS2812);
   b47ba:	4a11      	ldr	r2, [pc, #68]	; (b4800 <_GLOBAL__sub_I_Blynk+0x78>)
   b47bc:	4911      	ldr	r1, [pc, #68]	; (b4804 <_GLOBAL__sub_I_Blynk+0x7c>)
   b47be:	7812      	ldrb	r2, [r2, #0]
   b47c0:	8809      	ldrh	r1, [r1, #0]
   b47c2:	4811      	ldr	r0, [pc, #68]	; (b4808 <_GLOBAL__sub_I_Blynk+0x80>)
   b47c4:	2302      	movs	r3, #2
   b47c6:	f000 f86d 	bl	b48a4 <_ZN17Adafruit_NeoPixelC1Ethh>
SYSTEM_THREAD(ENABLED);
   b47ca:	4621      	mov	r1, r4
   b47cc:	2001      	movs	r0, #1
   b47ce:	f002 f9f5 	bl	b6bbc <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b47d2:	4b0e      	ldr	r3, [pc, #56]	; (b480c <_GLOBAL__sub_I_Blynk+0x84>)
   b47d4:	490e      	ldr	r1, [pc, #56]	; (b4810 <_GLOBAL__sub_I_Blynk+0x88>)
   b47d6:	9400      	str	r4, [sp, #0]
   b47d8:	f240 725b 	movw	r2, #1883	; 0x75b
   b47dc:	480d      	ldr	r0, [pc, #52]	; (b4814 <_GLOBAL__sub_I_Blynk+0x8c>)
   b47de:	f000 fffb 	bl	b57d8 <_ZN4MQTTC1EPKctPFvPcPhjEb>
OledWingAdafruit display;
   b47e2:	480d      	ldr	r0, [pc, #52]	; (b4818 <_GLOBAL__sub_I_Blynk+0x90>)
   b47e4:	2107      	movs	r1, #7
}
   b47e6:	b003      	add	sp, #12
   b47e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
OledWingAdafruit display;
   b47ec:	f000 beee 	b.w	b55cc <_ZN16OledWingAdafruitC1Ei>
   b47f0:	2003e570 	.word	0x2003e570
   b47f4:	2003e550 	.word	0x2003e550
   b47f8:	000b8584 	.word	0x000b8584
   b47fc:	2003e6a8 	.word	0x2003e6a8
   b4800:	2003e4d0 	.word	0x2003e4d0
   b4804:	2003e4dc 	.word	0x2003e4dc
   b4808:	2003e694 	.word	0x2003e694
   b480c:	000b4495 	.word	0x000b4495
   b4810:	000b8590 	.word	0x000b8590
   b4814:	2003e5b0 	.word	0x2003e5b0
   b4818:	2003e610 	.word	0x2003e610

000b481c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b481c:	b538      	push	{r3, r4, r5, lr}
   b481e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b4820:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4822:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b4824:	b108      	cbz	r0, b482a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b4826:	f002 fa5d 	bl	b6ce4 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b482a:	79a3      	ldrb	r3, [r4, #6]
   b482c:	2b06      	cmp	r3, #6
   b482e:	bf0c      	ite	eq
   b4830:	2004      	moveq	r0, #4
   b4832:	2003      	movne	r0, #3
   b4834:	fb10 f005 	smulbb	r0, r0, r5
   b4838:	b280      	uxth	r0, r0
   b483a:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b483c:	f002 fa4a 	bl	b6cd4 <malloc>
   b4840:	60e0      	str	r0, [r4, #12]
   b4842:	b128      	cbz	r0, b4850 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b4844:	88a2      	ldrh	r2, [r4, #4]
   b4846:	2100      	movs	r1, #0
   b4848:	f003 fd40 	bl	b82cc <memset>
    numLEDs = n;
   b484c:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b484e:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b4850:	80a0      	strh	r0, [r4, #4]
   b4852:	8060      	strh	r0, [r4, #2]
}
   b4854:	e7fb      	b.n	b484e <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b4856 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b4856:	b510      	push	{r4, lr}
   b4858:	4604      	mov	r4, r0
    if (misoPinMode == OUTPUT) {
      digitalWrite(misoPin, misoValue);
    }
  }
#else
  pinMode(pin, OUTPUT);
   b485a:	2101      	movs	r1, #1
   b485c:	79c0      	ldrb	r0, [r0, #7]
   b485e:	f003 fb4d 	bl	b7efc <pinMode>
  digitalWrite(pin, LOW);
   b4862:	79e0      	ldrb	r0, [r4, #7]
   b4864:	2100      	movs	r1, #0
   b4866:	f003 fb5a 	bl	b7f1e <digitalWrite>
#endif // #if (PLATFORM_ID == 32)
  begun = true;
   b486a:	2301      	movs	r3, #1
   b486c:	7023      	strb	r3, [r4, #0]
}
   b486e:	bd10      	pop	{r4, pc}

000b4870 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4870:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b4872:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4874:	4605      	mov	r5, r0
   b4876:	460c      	mov	r4, r1
    if (begun) {
   b4878:	b11b      	cbz	r3, b4882 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b487a:	79c0      	ldrb	r0, [r0, #7]
   b487c:	2100      	movs	r1, #0
   b487e:	f003 fb3d 	bl	b7efc <pinMode>
    }
    pin = p;
    if (begun) {
   b4882:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b4884:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b4886:	b15b      	cbz	r3, b48a0 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4888:	b2a0      	uxth	r0, r4
   b488a:	2101      	movs	r1, #1
   b488c:	9001      	str	r0, [sp, #4]
   b488e:	f003 fb35 	bl	b7efc <pinMode>
        digitalWrite(p, LOW);
   b4892:	9801      	ldr	r0, [sp, #4]
   b4894:	2100      	movs	r1, #0
    }
}
   b4896:	b003      	add	sp, #12
   b4898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b489c:	f003 bb3f 	b.w	b7f1e <digitalWrite>
}
   b48a0:	b003      	add	sp, #12
   b48a2:	bd30      	pop	{r4, r5, pc}

000b48a4 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b48a4:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b48a6:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b48a8:	4604      	mov	r4, r0
   b48aa:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b48ac:	7183      	strb	r3, [r0, #6]
   b48ae:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b48b2:	7005      	strb	r5, [r0, #0]
   b48b4:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b48b6:	f7ff ffb1 	bl	b481c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b48ba:	4620      	mov	r0, r4
   b48bc:	4631      	mov	r1, r6
   b48be:	f7ff ffd7 	bl	b4870 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b48c2:	4620      	mov	r0, r4
   b48c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b48c8 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b48c8:	68c3      	ldr	r3, [r0, #12]
   b48ca:	2b00      	cmp	r3, #0
   b48cc:	f000 81a4 	beq.w	b4c18 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b48d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b48d4:	7983      	ldrb	r3, [r0, #6]
   b48d6:	3b02      	subs	r3, #2
   b48d8:	b2db      	uxtb	r3, r3
   b48da:	2b04      	cmp	r3, #4
   b48dc:	bf9c      	itt	ls
   b48de:	4abf      	ldrls	r2, [pc, #764]	; (b4bdc <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b48e0:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b48e4:	b085      	sub	sp, #20
   b48e6:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b48e8:	bf88      	it	hi
   b48ea:	2432      	movhi	r4, #50	; 0x32
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b48ec:	f001 ffae 	bl	b684c <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b48f0:	692b      	ldr	r3, [r5, #16]
   b48f2:	1ac0      	subs	r0, r0, r3
   b48f4:	42a0      	cmp	r0, r4
   b48f6:	d3f9      	bcc.n	b48ec <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b48f8:	4cb9      	ldr	r4, [pc, #740]	; (b4be0 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b48fa:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b48fc:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4900:	b91b      	cbnz	r3, b490a <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4902:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4906:	2b00      	cmp	r3, #0
   b4908:	db7e      	blt.n	b4a08 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b490a:	4cb6      	ldr	r4, [pc, #728]	; (b4be4 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b490c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4910:	b923      	cbnz	r3, b491c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4912:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4916:	2b00      	cmp	r3, #0
   b4918:	f2c0 816e 	blt.w	b4bf8 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b491c:	4cb2      	ldr	r4, [pc, #712]	; (b4be8 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b491e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4922:	2b00      	cmp	r3, #0
   b4924:	f000 8144 	beq.w	b4bb0 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4928:	79eb      	ldrb	r3, [r5, #7]
   b492a:	4ab0      	ldr	r2, [pc, #704]	; (b4bec <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b492c:	4cb0      	ldr	r4, [pc, #704]	; (b4bf0 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b492e:	6812      	ldr	r2, [r2, #0]
   b4930:	0119      	lsls	r1, r3, #4
   b4932:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b4936:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4938:	49ae      	ldr	r1, [pc, #696]	; (b4bf4 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b493a:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b493c:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b4940:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b4944:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4948:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b494a:	f003 031f 	and.w	r3, r3, #31
   b494e:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b4952:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4954:	433a      	orrs	r2, r7
   b4956:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b4958:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b495a:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b495e:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4962:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4964:	2900      	cmp	r1, #0
   b4966:	d044      	beq.n	b49f2 <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b4968:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b496c:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b496e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b4972:	f818 cb01 	ldrb.w	ip, [r8], #1
   b4976:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4978:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b497a:	6863      	ldr	r3, [r4, #4]
   b497c:	1a9b      	subs	r3, r3, r2
   b497e:	2b46      	cmp	r3, #70	; 0x46
   b4980:	d9fb      	bls.n	b497a <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b4982:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4984:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4988:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b498c:	ea43 0307 	orr.w	r3, r3, r7
   b4990:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4994:	d02f      	beq.n	b49f6 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b4996:	6863      	ldr	r3, [r4, #4]
   b4998:	1a9b      	subs	r3, r3, r2
   b499a:	2b28      	cmp	r3, #40	; 0x28
   b499c:	d9fb      	bls.n	b4996 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b499e:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b49a2:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b49a4:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b49a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b49ac:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b49b0:	d1e3      	bne.n	b497a <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b49b2:	88ab      	ldrh	r3, [r5, #4]
   b49b4:	f10e 0e01 	add.w	lr, lr, #1
   b49b8:	fa1f fe8e 	uxth.w	lr, lr
   b49bc:	4573      	cmp	r3, lr
   b49be:	d8d8      	bhi.n	b4972 <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b49c0:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b49c4:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b49c8:	6863      	ldr	r3, [r4, #4]
   b49ca:	1a9b      	subs	r3, r3, r2
   b49cc:	2b46      	cmp	r3, #70	; 0x46
   b49ce:	d9fb      	bls.n	b49c8 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b49d0:	6863      	ldr	r3, [r4, #4]
   b49d2:	eba3 0909 	sub.w	r9, r3, r9
   b49d6:	4589      	cmp	r9, r1
   b49d8:	f0c0 80e4 	bcc.w	b4ba4 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b49dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b49e0:	f001 ff2c 	bl	b683c <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b49e4:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b49e6:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b49ea:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b49ee:	2900      	cmp	r1, #0
   b49f0:	d1ba      	bne.n	b4968 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b49f2:	460a      	mov	r2, r1
   b49f4:	e7e8      	b.n	b49c8 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b49f6:	6863      	ldr	r3, [r4, #4]
   b49f8:	1a9b      	subs	r3, r3, r2
   b49fa:	2b11      	cmp	r3, #17
   b49fc:	d8cf      	bhi.n	b499e <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b49fe:	6863      	ldr	r3, [r4, #4]
   b4a00:	1a9b      	subs	r3, r3, r2
   b4a02:	2b11      	cmp	r3, #17
   b4a04:	d9f7      	bls.n	b49f6 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b4a06:	e7ca      	b.n	b499e <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a08:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a0c:	2b00      	cmp	r3, #0
   b4a0e:	f6bf af7c 	bge.w	b490a <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a12:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a16:	2b00      	cmp	r3, #0
   b4a18:	f6bf af77 	bge.w	b490a <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4a1c:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a20:	2b00      	cmp	r3, #0
   b4a22:	f6bf af72 	bge.w	b490a <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4a26:	0136      	lsls	r6, r6, #4
   b4a28:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4a2a:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4a2c:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4a2e:	f002 f951 	bl	b6cd4 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b4a32:	2800      	cmp	r0, #0
   b4a34:	f43f af78 	beq.w	b4928 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b4a38:	88ab      	ldrh	r3, [r5, #4]
   b4a3a:	2b00      	cmp	r3, #0
   b4a3c:	f000 80ed 	beq.w	b4c1a <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b4a40:	68ea      	ldr	r2, [r5, #12]
   b4a42:	3b01      	subs	r3, #1
   b4a44:	fa12 f783 	uxtah	r7, r2, r3
   b4a48:	f102 3eff 	add.w	lr, r2, #4294967295
    uint16_t pos = 0; // bit position
   b4a4c:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a4e:	f248 0206 	movw	r2, #32774	; 0x8006
   b4a52:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b4a56:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a5a:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b4a5e:	bf0c      	ite	eq
   b4a60:	4693      	moveq	fp, r2
   b4a62:	468b      	movne	fp, r1
   b4a64:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b4a68:	bf0c      	ite	eq
   b4a6a:	4616      	moveq	r6, r2
   b4a6c:	460e      	movne	r6, r1
   b4a6e:	f01c 0f20 	tst.w	ip, #32
   b4a72:	bf0c      	ite	eq
   b4a74:	4690      	moveq	r8, r2
   b4a76:	4688      	movne	r8, r1
        pos++;
   b4a78:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a7c:	f8cd 8008 	str.w	r8, [sp, #8]
   b4a80:	9601      	str	r6, [sp, #4]
        pos++;
   b4a82:	f103 0802 	add.w	r8, r3, #2
   b4a86:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a8a:	9e01      	ldr	r6, [sp, #4]
   b4a8c:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4a90:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a94:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4a98:	9e02      	ldr	r6, [sp, #8]
   b4a9a:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b4a9e:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4aa2:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4aa6:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4aaa:	bf0c      	ite	eq
   b4aac:	4693      	moveq	fp, r2
   b4aae:	468b      	movne	fp, r1
   b4ab0:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4ab4:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4ab8:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4abc:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4ac0:	bf0c      	ite	eq
   b4ac2:	4693      	moveq	fp, r2
   b4ac4:	468b      	movne	fp, r1
   b4ac6:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4aca:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4ace:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b4ad2:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4ad6:	bf0c      	ite	eq
   b4ad8:	4693      	moveq	fp, r2
   b4ada:	468b      	movne	fp, r1
   b4adc:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4ae0:	f103 0a08 	add.w	sl, r3, #8
   b4ae4:	f103 0806 	add.w	r8, r3, #6
   b4ae8:	3307      	adds	r3, #7
   b4aea:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4aec:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b4af0:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4af4:	bf0c      	ite	eq
   b4af6:	4693      	moveq	fp, r2
   b4af8:	468b      	movne	fp, r1
        pos++;
   b4afa:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4afe:	f01c 0f01 	tst.w	ip, #1
   b4b02:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b4b06:	bf15      	itete	ne
   b4b08:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b4b0c:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b4b10:	fa1f f38a 	uxthne.w	r3, sl
   b4b14:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b4b18:	4577      	cmp	r7, lr
   b4b1a:	d19c      	bne.n	b4a56 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4b1c:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4b1e:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4b20:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4b22:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4b24:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4b26:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4b28:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4b2c:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4b2e:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4b30:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4b32:	4b2e      	ldr	r3, [pc, #184]	; (b4bec <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4b34:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4b36:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4b38:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4b3a:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4b3c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4b40:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4b44:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b4b48:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4b4c:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4b50:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4b54:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4b58:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4b5c:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4b60:	79eb      	ldrb	r3, [r5, #7]
   b4b62:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4b66:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4b68:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4b6a:	5cfe      	ldrb	r6, [r7, r3]
   b4b6c:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4b70:	f003 031f 	and.w	r3, r3, #31
   b4b74:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4b78:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4b7c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4b80:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4b84:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4b86:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4b8a:	2b00      	cmp	r3, #0
   b4b8c:	d0fb      	beq.n	b4b86 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4b8e:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4b90:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   b4b94:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4b98:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4b9c:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4ba0:	f002 f8a0 	bl	b6ce4 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4ba4:	f001 fe52 	bl	b684c <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4ba8:	6128      	str	r0, [r5, #16]
}
   b4baa:	b005      	add	sp, #20
   b4bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4bb0:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4bb4:	2b00      	cmp	r3, #0
   b4bb6:	f6bf aeb7 	bge.w	b4928 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4bba:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4bbe:	2b00      	cmp	r3, #0
   b4bc0:	f6bf aeb2 	bge.w	b4928 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4bc4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4bc8:	2b00      	cmp	r3, #0
   b4bca:	f6bf aead 	bge.w	b4928 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4bce:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4bd2:	2b00      	cmp	r3, #0
   b4bd4:	f6bf aea8 	bge.w	b4928 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b4bd8:	e725      	b.n	b4a26 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4bda:	bf00      	nop
   b4bdc:	000b85a0 	.word	0x000b85a0
   b4be0:	4001c000 	.word	0x4001c000
   b4be4:	40021000 	.word	0x40021000
   b4be8:	40022000 	.word	0x40022000
   b4bec:	2003e6b8 	.word	0x2003e6b8
   b4bf0:	e0001000 	.word	0xe0001000
   b4bf4:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4bf8:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4bfc:	2b00      	cmp	r3, #0
   b4bfe:	f6bf ae8d 	bge.w	b491c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c02:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c06:	2b00      	cmp	r3, #0
   b4c08:	f6bf ae88 	bge.w	b491c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4c0c:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c10:	2b00      	cmp	r3, #0
   b4c12:	f6bf ae83 	bge.w	b491c <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b4c16:	e706      	b.n	b4a26 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4c18:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b4c1a:	2304      	movs	r3, #4
   b4c1c:	2102      	movs	r1, #2
   b4c1e:	e783      	b.n	b4b28 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b4c20 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b4c20:	8843      	ldrh	r3, [r0, #2]
   b4c22:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b4c24:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b4c26:	d92d      	bls.n	b4c84 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b4c28:	7a06      	ldrb	r6, [r0, #8]
   b4c2a:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b4c2e:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b4c32:	b2d5      	uxtb	r5, r2
   b4c34:	b13e      	cbz	r6, b4c46 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b4c36:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b4c38:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b4c3a:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b4c3c:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b4c40:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b4c44:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b4c46:	f890 c006 	ldrb.w	ip, [r0, #6]
   b4c4a:	68c7      	ldr	r7, [r0, #12]
   b4c4c:	f1bc 0f06 	cmp.w	ip, #6
   b4c50:	bf0c      	ite	eq
   b4c52:	2604      	moveq	r6, #4
   b4c54:	2603      	movne	r6, #3
   b4c56:	434e      	muls	r6, r1
   b4c58:	f1ac 0c02 	sub.w	ip, ip, #2
   b4c5c:	19b9      	adds	r1, r7, r6
    switch(type) {
   b4c5e:	f1bc 0f06 	cmp.w	ip, #6
   b4c62:	d81d      	bhi.n	b4ca0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b4c64:	e8df f00c 	tbb	[pc, ip]
   b4c68:	04081c04 	.word	0x04081c04
   b4c6c:	040f      	.short	0x040f
   b4c6e:	04          	.byte	0x04
   b4c6f:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4c70:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b4c72:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4c74:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b4c76:	e005      	b.n	b4c84 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b4c78:	2bfe      	cmp	r3, #254	; 0xfe
   b4c7a:	bf28      	it	cs
   b4c7c:	23fe      	movcs	r3, #254	; 0xfe
   b4c7e:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b4c80:	704d      	strb	r5, [r1, #1]
          *p = g;
   b4c82:	708c      	strb	r4, [r1, #2]
}
   b4c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b4c86:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4c88:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b4c8a:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4c8c:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b4c8e:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4c90:	b913      	cbnz	r3, b4c98 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b4c92:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4c94:	70ca      	strb	r2, [r1, #3]
        } break;
   b4c96:	e7f5      	b.n	b4c84 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4c98:	435a      	muls	r2, r3
   b4c9a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b4c9e:	e7f9      	b.n	b4c94 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b4ca0:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4ca2:	704c      	strb	r4, [r1, #1]
   b4ca4:	e7e6      	b.n	b4c74 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b4ca6 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   b4ca6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
}
   b4caa:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   b4cae:	4770      	bx	lr

000b4cb0 <_ZNK17Adafruit_NeoPixel13getPixelColorEt>:
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
   b4cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(n >= numLEDs) {
   b4cb2:	8843      	ldrh	r3, [r0, #2]
   b4cb4:	428b      	cmp	r3, r1
   b4cb6:	d946      	bls.n	b4d46 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x96>
    // Out of bounds, return no color.
    return 0;
  }

  uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b4cb8:	7984      	ldrb	r4, [r0, #6]
   b4cba:	68c6      	ldr	r6, [r0, #12]
   b4cbc:	2c06      	cmp	r4, #6
   b4cbe:	bf0c      	ite	eq
   b4cc0:	2504      	moveq	r5, #4
   b4cc2:	2503      	movne	r5, #3
   b4cc4:	434d      	muls	r5, r1
   b4cc6:	1972      	adds	r2, r6, r5
  uint32_t c;

  switch(type) {
   b4cc8:	1ea7      	subs	r7, r4, #2
    case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
    case WS2812B_FAST:
    case WS2812B2:
    case WS2812B2_FAST: {
        c = ((uint32_t)p[1] << 16) | ((uint32_t)p[0] <<  8) | (uint32_t)p[2];
   b4cca:	7853      	ldrb	r3, [r2, #1]
   b4ccc:	5d71      	ldrb	r1, [r6, r5]
   b4cce:	7892      	ldrb	r2, [r2, #2]
   b4cd0:	2f06      	cmp	r7, #6
   b4cd2:	d834      	bhi.n	b4d3e <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x8e>
   b4cd4:	e8df f007 	tbb	[pc, r7]
   b4cd8:	04093304 	.word	0x04093304
   b4cdc:	040d      	.short	0x040d
   b4cde:	04          	.byte	0x04
   b4cdf:	00          	.byte	0x00
   b4ce0:	0209      	lsls	r1, r1, #8
   b4ce2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
        c = ((uint32_t)p[0] << 24) | ((uint32_t)p[1] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[3];
      } break;
    case WS2811: // WS2811 is RGB order
    case TM1803: // TM1803 is RGB order
    default: {   // default is RGB order
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
   b4ce6:	4313      	orrs	r3, r2
   b4ce8:	e005      	b.n	b4cf6 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x46>
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[1];
   b4cea:	0212      	lsls	r2, r2, #8
   b4cec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   b4cf0:	e7f9      	b.n	b4ce6 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x36>
        c = ((uint32_t)p[0] << 24) | ((uint32_t)p[1] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[3];
   b4cf2:	5973      	ldr	r3, [r6, r5]
   b4cf4:	ba1b      	rev	r3, r3
      } break;
  }

  // Adjust this back up to the true color, as setting a pixel color will
  // scale it back down again.
  if(brightness) { // See notes in setBrightness()
   b4cf6:	7a02      	ldrb	r2, [r0, #8]
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
   b4cf8:	9301      	str	r3, [sp, #4]
  if(brightness) { // See notes in setBrightness()
   b4cfa:	b1ea      	cbz	r2, b4d38 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x88>
    //Cast the color to a byte array
    uint8_t * c_ptr =reinterpret_cast<uint8_t*>(&c);
    if (type == SK6812RGBW) {
   b4cfc:	2c06      	cmp	r4, #6
      c_ptr[3] = (c_ptr[3] << 8)/brightness;
   b4cfe:	bf01      	itttt	eq
   b4d00:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
   b4d04:	021b      	lsleq	r3, r3, #8
   b4d06:	fbb3 f3f2 	udiveq	r3, r3, r2
   b4d0a:	f88d 3007 	strbeq.w	r3, [sp, #7]
    }
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
   b4d0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4d12:	021b      	lsls	r3, r3, #8
   b4d14:	fbb3 f3f2 	udiv	r3, r3, r2
   b4d18:	f88d 3004 	strb.w	r3, [sp, #4]
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
   b4d1c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4d20:	021b      	lsls	r3, r3, #8
   b4d22:	fbb3 f3f2 	udiv	r3, r3, r2
   b4d26:	f88d 3005 	strb.w	r3, [sp, #5]
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
   b4d2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b4d2e:	021b      	lsls	r3, r3, #8
   b4d30:	fbb3 f3f2 	udiv	r3, r3, r2
   b4d34:	f88d 3006 	strb.w	r3, [sp, #6]
  }
  return c; // Pixel # is out of bounds
   b4d38:	9801      	ldr	r0, [sp, #4]
}
   b4d3a:	b003      	add	sp, #12
   b4d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
   b4d3e:	021b      	lsls	r3, r3, #8
   b4d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   b4d44:	e7cf      	b.n	b4ce6 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x36>
    return 0;
   b4d46:	2000      	movs	r0, #0
   b4d48:	e7f7      	b.n	b4d3a <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x8a>
	...

000b4d4c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b4d4c:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = hal_pin_map();
   b4d4e:	f001 fd3d 	bl	b67cc <hal_pin_map>
   b4d52:	4b01      	ldr	r3, [pc, #4]	; (b4d58 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b4d54:	6018      	str	r0, [r3, #0]
}
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	2003e6b8 	.word	0x2003e6b8

000b4d5c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4d5c:	4770      	bx	lr

000b4d5e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4d5e:	b510      	push	{r4, lr}
  }
   b4d60:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4d62:	4604      	mov	r4, r0
  }
   b4d64:	f7ff fb7f 	bl	b4466 <_ZdlPvj>
   b4d68:	4620      	mov	r0, r4
   b4d6a:	bd10      	pop	{r4, pc}

000b4d6c <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4d6c:	b40e      	push	{r1, r2, r3}
   b4d6e:	b503      	push	{r0, r1, lr}
   b4d70:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4d72:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4d74:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4d78:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4d7a:	f002 f9fb 	bl	b7174 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4d7e:	b002      	add	sp, #8
   b4d80:	f85d eb04 	ldr.w	lr, [sp], #4
   b4d84:	b003      	add	sp, #12
   b4d86:	4770      	bx	lr

000b4d88 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4d88:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4d8a:	4604      	mov	r4, r0
   b4d8c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4d8e:	7922      	ldrb	r2, [r4, #4]
   b4d90:	68a3      	ldr	r3, [r4, #8]
   b4d92:	b132      	cbz	r2, b4da2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4d94:	b9a3      	cbnz	r3, b4dc0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4d96:	490b      	ldr	r1, [pc, #44]	; (b4dc4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4d98:	b002      	add	sp, #8
   b4d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4d9e:	f002 b989 	b.w	b70b4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4da2:	4a09      	ldr	r2, [pc, #36]	; (b4dc8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4da4:	7b26      	ldrb	r6, [r4, #12]
   b4da6:	4d09      	ldr	r5, [pc, #36]	; (b4dcc <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4da8:	4909      	ldr	r1, [pc, #36]	; (b4dd0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4daa:	7b64      	ldrb	r4, [r4, #13]
   b4dac:	2e01      	cmp	r6, #1
   b4dae:	bf18      	it	ne
   b4db0:	4629      	movne	r1, r5
   b4db2:	e9cd 1400 	strd	r1, r4, [sp]
   b4db6:	4907      	ldr	r1, [pc, #28]	; (b4dd4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4db8:	f7ff ffd8 	bl	b4d6c <_ZN5Print6printfEPKcz>
  }
   b4dbc:	b002      	add	sp, #8
   b4dbe:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4dc0:	4a05      	ldr	r2, [pc, #20]	; (b4dd8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4dc2:	e7ef      	b.n	b4da4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4dc4:	000b85c5 	.word	0x000b85c5
   b4dc8:	000b8583 	.word	0x000b8583
   b4dcc:	000b85c1 	.word	0x000b85c1
   b4dd0:	000b85bd 	.word	0x000b85bd
   b4dd4:	000b85db 	.word	0x000b85db
   b4dd8:	000b85b4 	.word	0x000b85b4

000b4ddc <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4de0:	b085      	sub	sp, #20
   b4de2:	461f      	mov	r7, r3
   b4de4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4de8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4dec:	eba8 0902 	sub.w	r9, r8, r2
   b4df0:	eba7 0a01 	sub.w	sl, r7, r1
   b4df4:	f1b9 0f00 	cmp.w	r9, #0
   b4df8:	bfb8      	it	lt
   b4dfa:	f1c9 0900 	rsblt	r9, r9, #0
   b4dfe:	f1ba 0f00 	cmp.w	sl, #0
   b4e02:	bfb8      	it	lt
   b4e04:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4e08:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4e0a:	4683      	mov	fp, r0
   b4e0c:	460c      	mov	r4, r1
   b4e0e:	4615      	mov	r5, r2
    if (steep) {
   b4e10:	dd04      	ble.n	b4e1c <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b4e12:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4e14:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b4e16:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4e18:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4e1a:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4e1c:	42bc      	cmp	r4, r7
   b4e1e:	dd05      	ble.n	b4e2c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4e20:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b4e22:	4645      	mov	r5, r8
   b4e24:	4690      	mov	r8, r2
    if (x0 > x1) {
   b4e26:	4622      	mov	r2, r4
   b4e28:	463c      	mov	r4, r7
   b4e2a:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4e2c:	1b3e      	subs	r6, r7, r4
   b4e2e:	b2b2      	uxth	r2, r6
   b4e30:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4e32:	eba8 0205 	sub.w	r2, r8, r5
   b4e36:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4e3a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4e3e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4e42:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b4e46:	4545      	cmp	r5, r8
   b4e48:	bfb4      	ite	lt
   b4e4a:	2201      	movlt	r2, #1
   b4e4c:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b4e50:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4e52:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4e54:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4e56:	42bc      	cmp	r4, r7
   b4e58:	dc1c      	bgt.n	b4e94 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4e5a:	f8db 2000 	ldr.w	r2, [fp]
   b4e5e:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4e60:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4e62:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4e66:	bfc7      	ittee	gt
   b4e68:	4629      	movgt	r1, r5
   b4e6a:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4e6c:	462a      	movle	r2, r5
   b4e6e:	4621      	movle	r1, r4
   b4e70:	4658      	mov	r0, fp
   b4e72:	47c0      	blx	r8
        }
        err -= dy;
   b4e74:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4e76:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4e78:	1ab6      	subs	r6, r6, r2
   b4e7a:	b2b1      	uxth	r1, r6
   b4e7c:	b236      	sxth	r6, r6
        if (err < 0) {
   b4e7e:	2e00      	cmp	r6, #0
   b4e80:	da05      	bge.n	b4e8e <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4e82:	9a02      	ldr	r2, [sp, #8]
   b4e84:	4415      	add	r5, r2
            err += dx;
   b4e86:	9a00      	ldr	r2, [sp, #0]
   b4e88:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b4e8a:	b22d      	sxth	r5, r5
            err += dx;
   b4e8c:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4e8e:	3401      	adds	r4, #1
   b4e90:	b224      	sxth	r4, r4
   b4e92:	e7e0      	b.n	b4e56 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4e94:	b005      	add	sp, #20
   b4e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4e9a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b4e9a:	4770      	bx	lr

000b4e9c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4e9c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4e9e:	6804      	ldr	r4, [r0, #0]
   b4ea0:	6924      	ldr	r4, [r4, #16]
   b4ea2:	46a4      	mov	ip, r4
}
   b4ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4ea8:	4760      	bx	ip

000b4eaa <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4eaa:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4eac:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4eae:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4eb2:	9502      	str	r5, [sp, #8]
   b4eb4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4eb6:	46a4      	mov	ip, r4
}
   b4eb8:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b4eba:	4760      	bx	ip

000b4ebc <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4ebc:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4ebe:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4ec0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4ec4:	9502      	str	r5, [sp, #8]
   b4ec6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4ec8:	46a4      	mov	ip, r4
}
   b4eca:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4ecc:	4760      	bx	ip

000b4ece <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4ece:	b470      	push	{r4, r5, r6}
   b4ed0:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4ed4:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4ed8:	6804      	ldr	r4, [r0, #0]
   b4eda:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4ede:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4ee0:	46a4      	mov	ip, r4
}
   b4ee2:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4ee4:	4760      	bx	ip

000b4ee6 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4ee6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4eea:	461c      	mov	r4, r3
    startWrite();
   b4eec:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4eee:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4ef2:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4ef4:	4605      	mov	r5, r0
   b4ef6:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4ef8:	3c01      	subs	r4, #1
   b4efa:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4efc:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4efe:	b224      	sxth	r4, r4
    startWrite();
   b4f00:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4f02:	682b      	ldr	r3, [r5, #0]
   b4f04:	f8cd 8004 	str.w	r8, [sp, #4]
   b4f08:	9400      	str	r4, [sp, #0]
   b4f0a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4f0c:	4628      	mov	r0, r5
   b4f0e:	463b      	mov	r3, r7
   b4f10:	4632      	mov	r2, r6
   b4f12:	4639      	mov	r1, r7
   b4f14:	47a0      	blx	r4
    endWrite();
   b4f16:	682b      	ldr	r3, [r5, #0]
   b4f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f1a:	4628      	mov	r0, r5
}
   b4f1c:	b002      	add	sp, #8
   b4f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4f22:	4718      	bx	r3

000b4f24 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4f28:	461d      	mov	r5, r3
    startWrite();
   b4f2a:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4f2c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4f30:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4f32:	4604      	mov	r4, r0
   b4f34:	4617      	mov	r7, r2
   b4f36:	460e      	mov	r6, r1
    startWrite();
   b4f38:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4f3a:	e9cd 7800 	strd	r7, r8, [sp]
   b4f3e:	6822      	ldr	r2, [r4, #0]
   b4f40:	1e6b      	subs	r3, r5, #1
   b4f42:	4433      	add	r3, r6
   b4f44:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b4f46:	4620      	mov	r0, r4
   b4f48:	b21b      	sxth	r3, r3
   b4f4a:	463a      	mov	r2, r7
   b4f4c:	4631      	mov	r1, r6
   b4f4e:	47a8      	blx	r5
    endWrite();
   b4f50:	6823      	ldr	r3, [r4, #0]
   b4f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f54:	4620      	mov	r0, r4
}
   b4f56:	b002      	add	sp, #8
   b4f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4f5c:	4718      	bx	r3

000b4f5e <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4f5e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4f62:	461e      	mov	r6, r3
    startWrite();
   b4f64:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4f66:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b4f6a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4f6c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4f70:	460c      	mov	r4, r1
   b4f72:	4605      	mov	r5, r0
   b4f74:	4617      	mov	r7, r2
    startWrite();
   b4f76:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4f78:	4426      	add	r6, r4
   b4f7a:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4f7c:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4f7e:	da0b      	bge.n	b4f98 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4f80:	f8cd 8000 	str.w	r8, [sp]
   b4f84:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4f88:	4621      	mov	r1, r4
   b4f8a:	464b      	mov	r3, r9
   b4f8c:	463a      	mov	r2, r7
   b4f8e:	4628      	mov	r0, r5
   b4f90:	3401      	adds	r4, #1
   b4f92:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4f94:	b224      	sxth	r4, r4
   b4f96:	e7f0      	b.n	b4f7a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f9a:	4628      	mov	r0, r5
}
   b4f9c:	b002      	add	sp, #8
   b4f9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4fa2:	4718      	bx	r3

000b4fa4 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4fa4:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4fa6:	6802      	ldr	r2, [r0, #0]
   b4fa8:	9101      	str	r1, [sp, #4]
   b4faa:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4fae:	9100      	str	r1, [sp, #0]
   b4fb0:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4fb2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4fb6:	2200      	movs	r2, #0
   b4fb8:	4611      	mov	r1, r2
   b4fba:	47a0      	blx	r4
}
   b4fbc:	b002      	add	sp, #8
   b4fbe:	bd10      	pop	{r4, pc}

000b4fc0 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4fc4:	4299      	cmp	r1, r3
        uint16_t color) {
   b4fc6:	4616      	mov	r6, r2
   b4fc8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4fcc:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4fd0:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4fd2:	4680      	mov	r8, r0
   b4fd4:	460d      	mov	r5, r1
   b4fd6:	461c      	mov	r4, r3
    if(x0 == x1){
   b4fd8:	d113      	bne.n	b5002 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4fda:	42be      	cmp	r6, r7
   b4fdc:	bfc8      	it	gt
   b4fde:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4fe0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4fe4:	bfc4      	itt	gt
   b4fe6:	463e      	movgt	r6, r7
   b4fe8:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4fea:	1c7b      	adds	r3, r7, #1
   b4fec:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4fee:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4ff0:	b21b      	sxth	r3, r3
   b4ff2:	4632      	mov	r2, r6
   b4ff4:	4629      	mov	r1, r5
   b4ff6:	4640      	mov	r0, r8
   b4ff8:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4ffa:	b003      	add	sp, #12
   b4ffc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5000:	4760      	bx	ip
    } else if(y0 == y1){
   b5002:	42be      	cmp	r6, r7
   b5004:	d10a      	bne.n	b501c <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5006:	4299      	cmp	r1, r3
   b5008:	bfc2      	ittt	gt
   b500a:	460b      	movgt	r3, r1
   b500c:	4625      	movgt	r5, r4
   b500e:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5010:	1c63      	adds	r3, r4, #1
   b5012:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5016:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5018:	1b5b      	subs	r3, r3, r5
   b501a:	e7e9      	b.n	b4ff0 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b501c:	6953      	ldr	r3, [r2, #20]
   b501e:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5020:	e9cd 7900 	strd	r7, r9, [sp]
   b5024:	f8d8 3000 	ldr.w	r3, [r8]
   b5028:	4640      	mov	r0, r8
   b502a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b502c:	4632      	mov	r2, r6
   b502e:	4623      	mov	r3, r4
   b5030:	4629      	mov	r1, r5
   b5032:	47b8      	blx	r7
        endWrite();
   b5034:	f8d8 3000 	ldr.w	r3, [r8]
   b5038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b503a:	4640      	mov	r0, r8
}
   b503c:	b003      	add	sp, #12
   b503e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5042:	4718      	bx	r3

000b5044 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5044:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5048:	461d      	mov	r5, r3
    startWrite();
   b504a:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b504c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5050:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5052:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5056:	4604      	mov	r4, r0
   b5058:	460f      	mov	r7, r1
   b505a:	4616      	mov	r6, r2
    startWrite();
   b505c:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b505e:	6823      	ldr	r3, [r4, #0]
   b5060:	f8cd 8000 	str.w	r8, [sp]
   b5064:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5068:	4632      	mov	r2, r6
   b506a:	462b      	mov	r3, r5
   b506c:	4639      	mov	r1, r7
   b506e:	4620      	mov	r0, r4
   b5070:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5072:	6823      	ldr	r3, [r4, #0]
   b5074:	f8cd 8000 	str.w	r8, [sp]
   b5078:	f109 32ff 	add.w	r2, r9, #4294967295
   b507c:	4432      	add	r2, r6
   b507e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5082:	4639      	mov	r1, r7
   b5084:	462b      	mov	r3, r5
   b5086:	4620      	mov	r0, r4
   b5088:	b212      	sxth	r2, r2
   b508a:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b508c:	6823      	ldr	r3, [r4, #0]
   b508e:	f8cd 8000 	str.w	r8, [sp]
   b5092:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5096:	4632      	mov	r2, r6
   b5098:	464b      	mov	r3, r9
   b509a:	4639      	mov	r1, r7
   b509c:	4620      	mov	r0, r4
   b509e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b50a0:	1e6b      	subs	r3, r5, #1
   b50a2:	19d9      	adds	r1, r3, r7
   b50a4:	6823      	ldr	r3, [r4, #0]
   b50a6:	f8cd 8000 	str.w	r8, [sp]
   b50aa:	6a1d      	ldr	r5, [r3, #32]
   b50ac:	4620      	mov	r0, r4
   b50ae:	464b      	mov	r3, r9
   b50b0:	4632      	mov	r2, r6
   b50b2:	b209      	sxth	r1, r1
   b50b4:	47a8      	blx	r5
    endWrite();
   b50b6:	6823      	ldr	r3, [r4, #0]
   b50b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50ba:	4620      	mov	r0, r4
}
   b50bc:	b002      	add	sp, #8
   b50be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b50c2:	4718      	bx	r3

000b50c4 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b50c4:	4770      	bx	lr

000b50c6 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b50c6:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b50ca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b50ce:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b50d0:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b50d2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b50d6:	bf59      	ittee	pl
   b50d8:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b50da:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b50dc:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b50de:	81c3      	strhmi	r3, [r0, #14]
}
   b50e0:	4770      	bx	lr
	...

000b50e4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b50e4:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b50e6:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b50e8:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b50ea:	4a07      	ldr	r2, [pc, #28]	; (b5108 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b50ec:	4d07      	ldr	r5, [pc, #28]	; (b510c <_ZN12Adafruit_GFXC1Ess+0x28>)
   b50ee:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b50f0:	2400      	movs	r4, #0
    _width    = WIDTH;
   b50f2:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b50f4:	f04f 31ff 	mov.w	r1, #4294967295
   b50f8:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b50fc:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b50fe:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5100:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5102:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5104:	6204      	str	r4, [r0, #32]
}
   b5106:	bd30      	pop	{r4, r5, pc}
   b5108:	01000101 	.word	0x01000101
   b510c:	000b8b00 	.word	0x000b8b00

000b5110 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5114:	b089      	sub	sp, #36	; 0x24
   b5116:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b511a:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b511c:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5120:	9304      	str	r3, [sp, #16]
   b5122:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5126:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5128:	9305      	str	r3, [sp, #20]
   b512a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b512e:	4604      	mov	r4, r0
    startWrite();
   b5130:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5132:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5136:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b513a:	bf48      	it	mi
   b513c:	f108 020e 	addmi.w	r2, r8, #14
   b5140:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5144:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5146:	4635      	mov	r5, r6
   b5148:	9b03      	ldr	r3, [sp, #12]
   b514a:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b514c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5150:	189a      	adds	r2, r3, r2
   b5152:	9b05      	ldr	r3, [sp, #20]
   b5154:	428b      	cmp	r3, r1
   b5156:	b212      	sxth	r2, r2
   b5158:	dd27      	ble.n	b51aa <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b515a:	9b04      	ldr	r3, [sp, #16]
   b515c:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b515e:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5162:	9306      	str	r3, [sp, #24]
   b5164:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5168:	4580      	cmp	r8, r0
   b516a:	fa1f f189 	uxth.w	r1, r9
   b516e:	dd17      	ble.n	b51a0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5170:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5172:	bf05      	ittet	eq
   b5174:	9b06      	ldreq	r3, [sp, #24]
   b5176:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5178:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b517a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b517c:	bf18      	it	ne
   b517e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5180:	062b      	lsls	r3, r5, #24
   b5182:	d50a      	bpl.n	b519a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5184:	9b02      	ldr	r3, [sp, #8]
   b5186:	6820      	ldr	r0, [r4, #0]
   b5188:	9207      	str	r2, [sp, #28]
   b518a:	4419      	add	r1, r3
   b518c:	6983      	ldr	r3, [r0, #24]
   b518e:	b209      	sxth	r1, r1
   b5190:	461f      	mov	r7, r3
   b5192:	4620      	mov	r0, r4
   b5194:	4653      	mov	r3, sl
   b5196:	47b8      	blx	r7
   b5198:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b519a:	f109 0901 	add.w	r9, r9, #1
   b519e:	e7e1      	b.n	b5164 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b51a0:	9b01      	ldr	r3, [sp, #4]
   b51a2:	3301      	adds	r3, #1
   b51a4:	9301      	str	r3, [sp, #4]
   b51a6:	445e      	add	r6, fp
   b51a8:	e7ce      	b.n	b5148 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b51aa:	6823      	ldr	r3, [r4, #0]
   b51ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51ae:	4620      	mov	r0, r4
}
   b51b0:	b009      	add	sp, #36	; 0x24
   b51b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b51b6:	4718      	bx	r3

000b51b8 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b51b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51bc:	ed2d 8b02 	vpush	{d8}
   b51c0:	b091      	sub	sp, #68	; 0x44
   b51c2:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b51c4:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b51c6:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b51ca:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b51ce:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b51d2:	9103      	str	r1, [sp, #12]
   b51d4:	461f      	mov	r7, r3
   b51d6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b51da:	9304      	str	r3, [sp, #16]
   b51dc:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b51de:	2a00      	cmp	r2, #0
   b51e0:	f040 80c5 	bne.w	b536e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b51e4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b51e8:	428b      	cmp	r3, r1
   b51ea:	f340 814c 	ble.w	b5486 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b51ee:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b51f2:	42b3      	cmp	r3, r6
   b51f4:	f340 8147 	ble.w	b5486 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b51f8:	2306      	movs	r3, #6
   b51fa:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b51fe:	2b00      	cmp	r3, #0
   b5200:	f340 8141 	ble.w	b5486 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5204:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5208:	2b00      	cmp	r3, #0
   b520a:	f340 813c 	ble.w	b5486 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b520e:	7f03      	ldrb	r3, [r0, #28]
   b5210:	b91b      	cbnz	r3, b521a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5212:	2faf      	cmp	r7, #175	; 0xaf
   b5214:	bf84      	itt	hi
   b5216:	3701      	addhi	r7, #1
   b5218:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b521a:	f8db 3000 	ldr.w	r3, [fp]
   b521e:	4658      	mov	r0, fp
   b5220:	695b      	ldr	r3, [r3, #20]
   b5222:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5224:	2205      	movs	r2, #5
   b5226:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5228:	2200      	movs	r2, #0
   b522a:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b522c:	4a98      	ldr	r2, [pc, #608]	; (b5490 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b522e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b5232:	18d3      	adds	r3, r2, r3
   b5234:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5236:	b2b3      	uxth	r3, r6
   b5238:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b523a:	9a05      	ldr	r2, [sp, #20]
   b523c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b523e:	5c9b      	ldrb	r3, [r3, r2]
   b5240:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5242:	b2ab      	uxth	r3, r5
   b5244:	930b      	str	r3, [sp, #44]	; 0x2c
   b5246:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b524a:	9308      	str	r3, [sp, #32]
   b524c:	9b03      	ldr	r3, [sp, #12]
   b524e:	fb02 f905 	mul.w	r9, r2, r5
   b5252:	fa19 f983 	uxtah	r9, r9, r3
   b5256:	fa0f f389 	sxth.w	r3, r9
   b525a:	ee08 3a10 	vmov	s16, r3
   b525e:	2308      	movs	r3, #8
   b5260:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b5262:	9b03      	ldr	r3, [sp, #12]
   b5264:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5268:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b526c:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5270:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5272:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5276:	07d2      	lsls	r2, r2, #31
   b5278:	d552      	bpl.n	b5320 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b527a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b527c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5280:	d13e      	bne.n	b5300 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5282:	2c01      	cmp	r4, #1
   b5284:	d13c      	bne.n	b5300 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5286:	699b      	ldr	r3, [r3, #24]
   b5288:	9906      	ldr	r1, [sp, #24]
   b528a:	461f      	mov	r7, r3
   b528c:	9b04      	ldr	r3, [sp, #16]
   b528e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5290:	b212      	sxth	r2, r2
   b5292:	4651      	mov	r1, sl
   b5294:	4658      	mov	r0, fp
   b5296:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5298:	f109 0301 	add.w	r3, r9, #1
   b529c:	fa4f f983 	sxtb.w	r9, r3
   b52a0:	9b07      	ldr	r3, [sp, #28]
   b52a2:	085b      	lsrs	r3, r3, #1
   b52a4:	9307      	str	r3, [sp, #28]
   b52a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b52a8:	3b01      	subs	r3, #1
   b52aa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b52ae:	930a      	str	r3, [sp, #40]	; 0x28
   b52b0:	d1de      	bne.n	b5270 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b52b2:	9f05      	ldr	r7, [sp, #20]
   b52b4:	3701      	adds	r7, #1
   b52b6:	b27b      	sxtb	r3, r7
   b52b8:	9305      	str	r3, [sp, #20]
   b52ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b52bc:	3b01      	subs	r3, #1
   b52be:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b52c2:	9309      	str	r3, [sp, #36]	; 0x24
   b52c4:	d1b9      	bne.n	b523a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b52c6:	9b04      	ldr	r3, [sp, #16]
   b52c8:	4543      	cmp	r3, r8
   b52ca:	d00f      	beq.n	b52ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b52cc:	2d01      	cmp	r5, #1
   b52ce:	f8db 3000 	ldr.w	r3, [fp]
   b52d2:	d13b      	bne.n	b534c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b52d4:	2c01      	cmp	r4, #1
   b52d6:	d139      	bne.n	b534c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b52d8:	9908      	ldr	r1, [sp, #32]
   b52da:	f8cd 8000 	str.w	r8, [sp]
   b52de:	3105      	adds	r1, #5
   b52e0:	6a1c      	ldr	r4, [r3, #32]
   b52e2:	4632      	mov	r2, r6
   b52e4:	2308      	movs	r3, #8
   b52e6:	b209      	sxth	r1, r1
   b52e8:	4658      	mov	r0, fp
   b52ea:	47a0      	blx	r4
        endWrite();
   b52ec:	f8db 3000 	ldr.w	r3, [fp]
   b52f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52f2:	4658      	mov	r0, fp
}
   b52f4:	b011      	add	sp, #68	; 0x44
   b52f6:	ecbd 8b02 	vpop	{d8}
   b52fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b52fe:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5300:	9906      	ldr	r1, [sp, #24]
   b5302:	fb14 f202 	smulbb	r2, r4, r2
   b5306:	440a      	add	r2, r1
   b5308:	9904      	ldr	r1, [sp, #16]
   b530a:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b530c:	9400      	str	r4, [sp, #0]
   b530e:	69db      	ldr	r3, [r3, #28]
   b5310:	ee18 1a10 	vmov	r1, s16
   b5314:	461f      	mov	r7, r3
   b5316:	b212      	sxth	r2, r2
   b5318:	462b      	mov	r3, r5
   b531a:	4658      	mov	r0, fp
   b531c:	47b8      	blx	r7
   b531e:	e7bb      	b.n	b5298 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5320:	9a04      	ldr	r2, [sp, #16]
   b5322:	4542      	cmp	r2, r8
   b5324:	d0b8      	beq.n	b5298 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b5326:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5328:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b532c:	d107      	bne.n	b533e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b532e:	2c01      	cmp	r4, #1
   b5330:	d105      	bne.n	b533e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b5332:	699b      	ldr	r3, [r3, #24]
   b5334:	9906      	ldr	r1, [sp, #24]
   b5336:	461f      	mov	r7, r3
   b5338:	440a      	add	r2, r1
   b533a:	4643      	mov	r3, r8
   b533c:	e7a8      	b.n	b5290 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b533e:	9906      	ldr	r1, [sp, #24]
   b5340:	f8cd 8004 	str.w	r8, [sp, #4]
   b5344:	fb14 f202 	smulbb	r2, r4, r2
   b5348:	440a      	add	r2, r1
   b534a:	e7df      	b.n	b530c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b534c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b534e:	f8cd 8004 	str.w	r8, [sp, #4]
   b5352:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b5356:	9a08      	ldr	r2, [sp, #32]
   b5358:	00e4      	lsls	r4, r4, #3
   b535a:	440a      	add	r2, r1
   b535c:	4611      	mov	r1, r2
   b535e:	9400      	str	r4, [sp, #0]
   b5360:	69dc      	ldr	r4, [r3, #28]
   b5362:	4632      	mov	r2, r6
   b5364:	462b      	mov	r3, r5
   b5366:	b209      	sxth	r1, r1
   b5368:	4658      	mov	r0, fp
   b536a:	47a0      	blx	r4
        endWrite();
   b536c:	e7be      	b.n	b52ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b536e:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5370:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b5372:	6812      	ldr	r2, [r2, #0]
   b5374:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5376:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5378:	b2ff      	uxtb	r7, r7
   b537a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b537e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5382:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5384:	789a      	ldrb	r2, [r3, #2]
   b5386:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5388:	78da      	ldrb	r2, [r3, #3]
   b538a:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b538c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b538e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5392:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5396:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5398:	d801      	bhi.n	b539e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b539a:	2c01      	cmp	r4, #1
   b539c:	d957      	bls.n	b544e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b539e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b53a2:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b53a4:	fa0f f38a 	sxth.w	r3, sl
   b53a8:	9307      	str	r3, [sp, #28]
        startWrite();
   b53aa:	f8db 3000 	ldr.w	r3, [fp]
   b53ae:	4658      	mov	r0, fp
   b53b0:	695b      	ldr	r3, [r3, #20]
   b53b2:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b53b4:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b53b6:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b53ba:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b53bc:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b53c0:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b53c2:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b53c4:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b53c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b53c8:	429f      	cmp	r7, r3
   b53ca:	d28f      	bcs.n	b52ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b53cc:	9b07      	ldr	r3, [sp, #28]
   b53ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b53d0:	443b      	add	r3, r7
   b53d2:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b53d6:	2200      	movs	r2, #0
   b53d8:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b53da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b53dc:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b53de:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b53e2:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b53e6:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b53ea:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b53ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b53ee:	9905      	ldr	r1, [sp, #20]
   b53f0:	4291      	cmp	r1, r2
   b53f2:	d241      	bcs.n	b5478 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b53f4:	1c5a      	adds	r2, r3, #1
   b53f6:	b2d2      	uxtb	r2, r2
   b53f8:	075b      	lsls	r3, r3, #29
   b53fa:	920d      	str	r2, [sp, #52]	; 0x34
   b53fc:	d107      	bne.n	b540e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b53fe:	9b06      	ldr	r3, [sp, #24]
   b5400:	9906      	ldr	r1, [sp, #24]
   b5402:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5404:	3301      	adds	r3, #1
   b5406:	b29b      	uxth	r3, r3
   b5408:	f812 9001 	ldrb.w	r9, [r2, r1]
   b540c:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b540e:	f019 0f80 	tst.w	r9, #128	; 0x80
   b5412:	d012      	beq.n	b543a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b5414:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5416:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b541a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b541e:	d11a      	bne.n	b5456 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5420:	2c01      	cmp	r4, #1
   b5422:	d118      	bne.n	b5456 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5426:	699b      	ldr	r3, [r3, #24]
   b5428:	4411      	add	r1, r2
   b542a:	9a05      	ldr	r2, [sp, #20]
   b542c:	4411      	add	r1, r2
   b542e:	461e      	mov	r6, r3
   b5430:	4652      	mov	r2, sl
   b5432:	9b04      	ldr	r3, [sp, #16]
   b5434:	b209      	sxth	r1, r1
   b5436:	4658      	mov	r0, fp
   b5438:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b543a:	9e05      	ldr	r6, [sp, #20]
   b543c:	3601      	adds	r6, #1
   b543e:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5440:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b5444:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b5446:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b544a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b544c:	e7ce      	b.n	b53ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b544e:	2300      	movs	r3, #0
   b5450:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b5454:	e7a9      	b.n	b53aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5456:	9805      	ldr	r0, [sp, #20]
   b5458:	9a08      	ldr	r2, [sp, #32]
   b545a:	4402      	add	r2, r0
   b545c:	fb02 1105 	mla	r1, r2, r5, r1
   b5460:	9a04      	ldr	r2, [sp, #16]
   b5462:	e9cd 4200 	strd	r4, r2, [sp]
   b5466:	69db      	ldr	r3, [r3, #28]
   b5468:	ee18 2a10 	vmov	r2, s16
   b546c:	461e      	mov	r6, r3
   b546e:	b209      	sxth	r1, r1
   b5470:	462b      	mov	r3, r5
   b5472:	4658      	mov	r0, fp
   b5474:	47b0      	blx	r6
   b5476:	e7e0      	b.n	b543a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5478:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b547a:	3701      	adds	r7, #1
   b547c:	4498      	add	r8, r3
   b547e:	fa5f f888 	uxtb.w	r8, r8
   b5482:	b2ff      	uxtb	r7, r7
   b5484:	e79f      	b.n	b53c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b5486:	b011      	add	sp, #68	; 0x44
   b5488:	ecbd 8b02 	vpop	{d8}
   b548c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5490:	000b85f8 	.word	0x000b85f8

000b5494 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5494:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b5496:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5498:	b085      	sub	sp, #20
   b549a:	4604      	mov	r4, r0
   b549c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b549e:	2a00      	cmp	r2, #0
   b54a0:	d134      	bne.n	b550c <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b54a2:	290a      	cmp	r1, #10
   b54a4:	d108      	bne.n	b54b8 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b54a6:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b54a8:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b54aa:	7e42      	ldrb	r2, [r0, #25]
   b54ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b54b0:	8263      	strh	r3, [r4, #18]
}
   b54b2:	2001      	movs	r0, #1
   b54b4:	b005      	add	sp, #20
   b54b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b54b8:	290d      	cmp	r1, #13
   b54ba:	d0fa      	beq.n	b54b2 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b54bc:	7ee1      	ldrb	r1, [r4, #27]
   b54be:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b54c0:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b54c2:	b171      	cbz	r1, b54e2 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b54c4:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b54c8:	2106      	movs	r1, #6
   b54ca:	fb11 6100 	smlabb	r1, r1, r0, r6
   b54ce:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b54d2:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b54d4:	bfc1      	itttt	gt
   b54d6:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b54da:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b54dc:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b54e0:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b54e2:	8ae2      	ldrh	r2, [r4, #22]
   b54e4:	9201      	str	r2, [sp, #4]
   b54e6:	8aa2      	ldrh	r2, [r4, #20]
   b54e8:	9200      	str	r2, [sp, #0]
   b54ea:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b54ee:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b54f2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b54f6:	4620      	mov	r0, r4
   b54f8:	f7ff fe5e 	bl	b51b8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b54fc:	7e23      	ldrb	r3, [r4, #24]
   b54fe:	8a22      	ldrh	r2, [r4, #16]
   b5500:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5504:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5508:	8223      	strh	r3, [r4, #16]
   b550a:	e7d2      	b.n	b54b2 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b550c:	290a      	cmp	r1, #10
   b550e:	d107      	bne.n	b5520 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b5510:	2300      	movs	r3, #0
   b5512:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b5514:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5516:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b5518:	8a43      	ldrh	r3, [r0, #18]
   b551a:	fb01 3302 	mla	r3, r1, r2, r3
   b551e:	e7c7      	b.n	b54b0 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b5520:	290d      	cmp	r1, #13
   b5522:	d0c6      	beq.n	b54b2 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b5524:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b5526:	42a9      	cmp	r1, r5
   b5528:	d3c3      	bcc.n	b54b2 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b552a:	7a51      	ldrb	r1, [r2, #9]
   b552c:	4299      	cmp	r1, r3
   b552e:	d3c0      	bcc.n	b54b2 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b5530:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b5532:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b5534:	b2ed      	uxtb	r5, r5
   b5536:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b553a:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b553c:	b328      	cbz	r0, b558a <_ZN12Adafruit_GFX5writeEh+0xf6>
   b553e:	78e9      	ldrb	r1, [r5, #3]
   b5540:	b319      	cbz	r1, b558a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5542:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5544:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5546:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5548:	b191      	cbz	r1, b5570 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b554a:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b554e:	4408      	add	r0, r1
   b5550:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5554:	fb06 1100 	mla	r1, r6, r0, r1
   b5558:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b555c:	4281      	cmp	r1, r0
   b555e:	dd07      	ble.n	b5570 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5560:	2000      	movs	r0, #0
   b5562:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5564:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5568:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b556a:	fb02 1207 	mla	r2, r2, r7, r1
   b556e:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5570:	8ae2      	ldrh	r2, [r4, #22]
   b5572:	9201      	str	r2, [sp, #4]
   b5574:	8aa2      	ldrh	r2, [r4, #20]
   b5576:	9200      	str	r2, [sp, #0]
   b5578:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b557c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5580:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5584:	4620      	mov	r0, r4
   b5586:	f7ff fe17 	bl	b51b8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b558a:	7929      	ldrb	r1, [r5, #4]
   b558c:	7e22      	ldrb	r2, [r4, #24]
   b558e:	8a23      	ldrh	r3, [r4, #16]
   b5590:	fb01 3302 	mla	r3, r1, r2, r3
   b5594:	e7b8      	b.n	b5508 <_ZN12Adafruit_GFX5writeEh+0x74>
	...

000b5598 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b5598:	b510      	push	{r4, lr}
   b559a:	4b06      	ldr	r3, [pc, #24]	; (b55b4 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b559c:	6003      	str	r3, [r0, #0]
   b559e:	4604      	mov	r4, r0
	if (mutex) {
   b55a0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b55a2:	b108      	cbz	r0, b55a8 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b55a4:	f001 f96a 	bl	b687c <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b55a8:	4620      	mov	r0, r4
   b55aa:	f000 fc85 	bl	b5eb8 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b55ae:	4620      	mov	r0, r4
   b55b0:	bd10      	pop	{r4, pc}
   b55b2:	bf00      	nop
   b55b4:	000b8b58 	.word	0x000b8b58

000b55b8 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b55b8:	b510      	push	{r4, lr}
   b55ba:	4604      	mov	r4, r0
}
   b55bc:	f7ff ffec 	bl	b5598 <_ZN16OledWingAdafruitD1Ev>
   b55c0:	4620      	mov	r0, r4
   b55c2:	2170      	movs	r1, #112	; 0x70
   b55c4:	f7fe ff4f 	bl	b4466 <_ZdlPvj>
   b55c8:	4620      	mov	r0, r4
   b55ca:	bd10      	pop	{r4, pc}

000b55cc <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b55cc:	b530      	push	{r4, r5, lr}
   b55ce:	b085      	sub	sp, #20
   b55d0:	4604      	mov	r4, r0
   b55d2:	460d      	mov	r5, r1
   b55d4:	f002 fd2a 	bl	b802c <_Z19__fetch_global_Wirev>
   b55d8:	4a10      	ldr	r2, [pc, #64]	; (b561c <_ZN16OledWingAdafruitC1Ei+0x50>)
   b55da:	4911      	ldr	r1, [pc, #68]	; (b5620 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b55dc:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b55e0:	f04f 32ff 	mov.w	r2, #4294967295
   b55e4:	2180      	movs	r1, #128	; 0x80
   b55e6:	4603      	mov	r3, r0
   b55e8:	9200      	str	r2, [sp, #0]
   b55ea:	4620      	mov	r0, r4
   b55ec:	2220      	movs	r2, #32
   b55ee:	f000 fcdb 	bl	b5fa8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b55f2:	4b0c      	ldr	r3, [pc, #48]	; (b5624 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b55f4:	6023      	str	r3, [r4, #0]
   b55f6:	2300      	movs	r3, #0
   b55f8:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b55fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5600:	f000 f854 	bl	b56ac <_ZN8DebounceC1Ev>
   b5604:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5608:	f000 f850 	bl	b56ac <_ZN8DebounceC1Ev>
   b560c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5610:	f000 f84c 	bl	b56ac <_ZN8DebounceC1Ev>
}
   b5614:	4620      	mov	r0, r4
   b5616:	b005      	add	sp, #20
   b5618:	bd30      	pop	{r4, r5, pc}
   b561a:	bf00      	nop
   b561c:	00061a80 	.word	0x00061a80
   b5620:	000186a0 	.word	0x000186a0
   b5624:	000b8b58 	.word	0x000b8b58

000b5628 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b5628:	b513      	push	{r0, r1, r4, lr}
   b562a:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b562c:	3050      	adds	r0, #80	; 0x50
   b562e:	f001 f91d 	bl	b686c <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b5632:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5634:	07d9      	lsls	r1, r3, #31
   b5636:	d505      	bpl.n	b5644 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b5638:	2202      	movs	r2, #2
   b563a:	2104      	movs	r1, #4
   b563c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5640:	f000 f848 	bl	b56d4 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b5644:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5646:	079a      	lsls	r2, r3, #30
   b5648:	d505      	bpl.n	b5656 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b564a:	2200      	movs	r2, #0
   b564c:	2103      	movs	r1, #3
   b564e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5652:	f000 f83f 	bl	b56d4 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b5656:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5658:	075b      	lsls	r3, r3, #29
   b565a:	d505      	bpl.n	b5668 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b565c:	2202      	movs	r2, #2
   b565e:	4611      	mov	r1, r2
   b5660:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5664:	f000 f836 	bl	b56d4 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5668:	2301      	movs	r3, #1
   b566a:	9300      	str	r3, [sp, #0]
   b566c:	223c      	movs	r2, #60	; 0x3c
   b566e:	2102      	movs	r1, #2
   b5670:	4620      	mov	r0, r4
   b5672:	f000 fda1 	bl	b61b8 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b5676:	b002      	add	sp, #8
   b5678:	bd10      	pop	{r4, pc}

000b567a <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b567a:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b567c:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b567e:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b5680:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b5682:	d502      	bpl.n	b568a <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5684:	3058      	adds	r0, #88	; 0x58
   b5686:	f000 f832 	bl	b56ee <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b568a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b568c:	079a      	lsls	r2, r3, #30
   b568e:	d503      	bpl.n	b5698 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b5690:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5694:	f000 f82b 	bl	b56ee <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b5698:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b569a:	075b      	lsls	r3, r3, #29
   b569c:	d505      	bpl.n	b56aa <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b569e:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b56a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b56a6:	f000 b822 	b.w	b56ee <_ZN8Debounce6updateEv>
}
   b56aa:	bd10      	pop	{r4, pc}

000b56ac <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b56ac:	2100      	movs	r1, #0
   b56ae:	220a      	movs	r2, #10
   b56b0:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b56b4:	4770      	bx	lr

000b56b6 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b56b6:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b56b8:	b510      	push	{r4, lr}
   b56ba:	4604      	mov	r4, r0
    this->pin = pin;
   b56bc:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b56be:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b56c0:	b288      	uxth	r0, r1
   b56c2:	f002 fc45 	bl	b7f50 <digitalRead>
   b56c6:	b108      	cbz	r0, b56cc <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b56c8:	2303      	movs	r3, #3
   b56ca:	71a3      	strb	r3, [r4, #6]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b56cc:	f001 f8c6 	bl	b685c <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b56d0:	6020      	str	r0, [r4, #0]
#endif
}
   b56d2:	bd10      	pop	{r4, pc}

000b56d4 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b56d4:	b538      	push	{r3, r4, r5, lr}
   b56d6:	460c      	mov	r4, r1
   b56d8:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b56da:	4611      	mov	r1, r2
   b56dc:	b2a0      	uxth	r0, r4
   b56de:	f002 fc0d 	bl	b7efc <pinMode>
  
  this->attach(pin);
   b56e2:	4621      	mov	r1, r4
   b56e4:	4628      	mov	r0, r5
}
   b56e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b56ea:	f7ff bfe4 	b.w	b56b6 <_ZN8Debounce6attachEi>

000b56ee <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b56ee:	b538      	push	{r3, r4, r5, lr}
   b56f0:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b56f2:	79c0      	ldrb	r0, [r0, #7]
   b56f4:	f002 fc2c 	bl	b7f50 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b56f8:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b56fa:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b56fc:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5700:	bf18      	it	ne
   b5702:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5704:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b5708:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b570a:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b570c:	d00a      	beq.n	b5724 <_ZN8Debounce6updateEv+0x36>
   b570e:	f001 f8a5 	bl	b685c <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b5712:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5714:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b5716:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b571a:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b571c:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b571e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b5722:	bd38      	pop	{r3, r4, r5, pc}
   b5724:	f001 f89a 	bl	b685c <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5728:	6823      	ldr	r3, [r4, #0]
   b572a:	1ac0      	subs	r0, r0, r3
   b572c:	88a3      	ldrh	r3, [r4, #4]
   b572e:	4298      	cmp	r0, r3
   b5730:	d3f4      	bcc.n	b571c <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b5732:	79a3      	ldrb	r3, [r4, #6]
   b5734:	f003 0301 	and.w	r3, r3, #1
   b5738:	42ab      	cmp	r3, r5
   b573a:	d0ef      	beq.n	b571c <_ZN8Debounce6updateEv+0x2e>
   b573c:	f001 f88e 	bl	b685c <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b5740:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b5742:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5744:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5748:	f043 0308 	orr.w	r3, r3, #8
   b574c:	e7e5      	b.n	b571a <_ZN8Debounce6updateEv+0x2c>

000b574e <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b574e:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b5752:	b510      	push	{r4, lr}
   b5754:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b5756:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b5758:	b113      	cbz	r3, b5760 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b575a:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b575c:	f001 f896 	bl	b688c <os_mutex_lock>
#endif
#endif
#endif
        }
   b5760:	4620      	mov	r0, r4
   b5762:	bd10      	pop	{r4, pc}

000b5764 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b5764:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b5766:	6803      	ldr	r3, [r0, #0]
   b5768:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b576c:	4604      	mov	r4, r0
            if (mqtt->thread)
   b576e:	b112      	cbz	r2, b5776 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b5770:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b5772:	f001 f893 	bl	b689c <os_mutex_unlock>
#endif
#endif
#endif
        }
   b5776:	4620      	mov	r0, r4
   b5778:	bd10      	pop	{r4, pc}

000b577a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b577a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b577c:	461f      	mov	r7, r3
   b577e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5782:	4604      	mov	r4, r0
   b5784:	460d      	mov	r5, r1
   b5786:	4616      	mov	r6, r2
    if (thread) {
   b5788:	b12b      	cbz	r3, b5796 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b578a:	2301      	movs	r3, #1
   b578c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b5790:	3058      	adds	r0, #88	; 0x58
   b5792:	f001 f86b 	bl	b686c <os_mutex_create>
    }
    this->callback = callback;
   b5796:	9b08      	ldr	r3, [sp, #32]
   b5798:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b579a:	2300      	movs	r3, #0
   b579c:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b579e:	b106      	cbz	r6, b57a2 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b57a0:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b57a2:	b125      	cbz	r5, b57ae <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b57a4:	4629      	mov	r1, r5
   b57a6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b57aa:	f001 fc2c 	bl	b7006 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b57ae:	9b06      	ldr	r3, [sp, #24]
   b57b0:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b57b2:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b57b4:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b57b6:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b57ba:	2bff      	cmp	r3, #255	; 0xff
   b57bc:	bfb8      	it	lt
   b57be:	23ff      	movlt	r3, #255	; 0xff
   b57c0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b57c4:	b108      	cbz	r0, b57ca <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b57c6:	f7fe fe4c 	bl	b4462 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b57ca:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b57ce:	f7fe fe46 	bl	b445e <_Znaj>
   b57d2:	61e0      	str	r0, [r4, #28]
}
   b57d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b57d8 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b57d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b57dc:	4604      	mov	r4, r0
            bool thread) {
   b57de:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b57e0:	4617      	mov	r7, r2
   b57e2:	4698      	mov	r8, r3
   b57e4:	460e      	mov	r6, r1
            bool thread) {
   b57e6:	f002 fa47 	bl	b7c78 <_ZN9TCPClientC1Ev>
   b57ea:	490d      	ldr	r1, [pc, #52]	; (b5820 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b57ec:	61e5      	str	r5, [r4, #28]
   b57ee:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b57f2:	f001 fbf4 	bl	b6fde <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b57f6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b57fa:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b57fc:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b5800:	22ff      	movs	r2, #255	; 0xff
   b5802:	230f      	movs	r3, #15
   b5804:	e9cd 3200 	strd	r3, r2, [sp]
   b5808:	4620      	mov	r0, r4
            bool thread) {
   b580a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b580e:	463b      	mov	r3, r7
   b5810:	462a      	mov	r2, r5
   b5812:	4631      	mov	r1, r6
   b5814:	f7ff ffb1 	bl	b577a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5818:	4620      	mov	r0, r4
   b581a:	b004      	add	sp, #16
   b581c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5820:	000b8583 	.word	0x000b8583

000b5824 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b5824:	b510      	push	{r4, lr}
   b5826:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5828:	4620      	mov	r0, r4
   b582a:	f002 f981 	bl	b7b30 <_ZN9TCPClient9availableEv>
   b582e:	2800      	cmp	r0, #0
   b5830:	d0fa      	beq.n	b5828 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b5832:	4620      	mov	r0, r4
   b5834:	f001 ff8a 	bl	b774c <_ZN9TCPClient4readEv>
}
   b5838:	b2c0      	uxtb	r0, r0
   b583a:	bd10      	pop	{r4, pc}

000b583c <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b583c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5840:	4605      	mov	r5, r0
   b5842:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b5844:	f7ff ffee 	bl	b5824 <_ZN4MQTT8readByteEv>
   b5848:	69eb      	ldr	r3, [r5, #28]
   b584a:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b584c:	69eb      	ldr	r3, [r5, #28]
   b584e:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b5852:	f04f 0901 	mov.w	r9, #1
   b5856:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b585a:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b585c:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b585e:	4628      	mov	r0, r5
   b5860:	f7ff ffe0 	bl	b5824 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b5864:	4626      	mov	r6, r4
   b5866:	69eb      	ldr	r3, [r5, #28]
   b5868:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b586a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b586e:	fb13 f309 	smulbb	r3, r3, r9
   b5872:	441f      	add	r7, r3
        buffer[len++] = digit;
   b5874:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b5876:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b5878:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b587a:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b587c:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b5880:	d4ed      	bmi.n	b585e <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b5882:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b5884:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b5888:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b588c:	d11e      	bne.n	b58cc <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b588e:	4628      	mov	r0, r5
   b5890:	f7ff ffc8 	bl	b5824 <_ZN4MQTT8readByteEv>
   b5894:	69eb      	ldr	r3, [r5, #28]
   b5896:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b5898:	4628      	mov	r0, r5
   b589a:	f7ff ffc3 	bl	b5824 <_ZN4MQTT8readByteEv>
   b589e:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b58a0:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b58a2:	b2b6      	uxth	r6, r6
   b58a4:	69eb      	ldr	r3, [r5, #28]
   b58a6:	b2a4      	uxth	r4, r4
   b58a8:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b58aa:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b58ac:	b2b6      	uxth	r6, r6
   b58ae:	42be      	cmp	r6, r7
   b58b0:	d20e      	bcs.n	b58d0 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b58b2:	4628      	mov	r0, r5
   b58b4:	f7ff ffb6 	bl	b5824 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b58b8:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b58bc:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b58be:	bf84      	itt	hi
   b58c0:	69eb      	ldrhi	r3, [r5, #28]
   b58c2:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b58c4:	3401      	adds	r4, #1
   b58c6:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b58c8:	3601      	adds	r6, #1
   b58ca:	e7ef      	b.n	b58ac <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b58cc:	2600      	movs	r6, #0
   b58ce:	e7ed      	b.n	b58ac <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b58d0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b58d4:	42a3      	cmp	r3, r4
   b58d6:	bf2c      	ite	cs
   b58d8:	4620      	movcs	r0, r4
   b58da:	2000      	movcc	r0, #0
   b58dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b58e0 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b58e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b58e4:	4615      	mov	r5, r2
   b58e6:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b58e8:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b58ea:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b58ec:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b58ee:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b58f0:	a802      	add	r0, sp, #8
        digit = len % 128;
   b58f2:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b58f6:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b58fa:	f103 0401 	add.w	r4, r3, #1
   b58fe:	4403      	add	r3, r0
            digit |= 0x80;
   b5900:	bf88      	it	hi
   b5902:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b5906:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b590a:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b590e:	b2e4      	uxtb	r4, r4
   b5910:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b5914:	d81e      	bhi.n	b5954 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b5916:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b591a:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b591e:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b5920:	4622      	mov	r2, r4
   b5922:	a901      	add	r1, sp, #4
   b5924:	4428      	add	r0, r5
    buf[4-llen] = header;
   b5926:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b592a:	f002 fcc1 	bl	b82b0 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b592e:	1c72      	adds	r2, r6, #1
   b5930:	4422      	add	r2, r4
   b5932:	4641      	mov	r1, r8
   b5934:	4638      	mov	r0, r7
   b5936:	f001 fef4 	bl	b7722 <_ZN9TCPClient5writeEPKhj>
   b593a:	4605      	mov	r5, r0
   b593c:	f000 ff8e 	bl	b685c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b5940:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b5942:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b5944:	4432      	add	r2, r6
   b5946:	b2a8      	uxth	r0, r5
}
   b5948:	1a13      	subs	r3, r2, r0
   b594a:	4258      	negs	r0, r3
   b594c:	4158      	adcs	r0, r3
   b594e:	b002      	add	sp, #8
   b5950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b5954:	4623      	mov	r3, r4
   b5956:	e7ca      	b.n	b58ee <_ZN4MQTT5writeEhPht+0xe>

000b5958 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b5958:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b595a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b595c:	4605      	mov	r5, r0
    pos += 2;
   b595e:	b298      	uxth	r0, r3
   b5960:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b5962:	5cce      	ldrb	r6, [r1, r3]
   b5964:	b29c      	uxth	r4, r3
   b5966:	b156      	cbz	r6, b597e <_ZN4MQTT11writeStringEPKcPht+0x26>
   b5968:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b596c:	4584      	cmp	ip, r0
   b596e:	f103 0701 	add.w	r7, r3, #1
   b5972:	d904      	bls.n	b597e <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b5974:	1c44      	adds	r4, r0, #1
   b5976:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b5978:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b597a:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b597c:	e7f1      	b.n	b5962 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b597e:	b299      	uxth	r1, r3
   b5980:	1a41      	subs	r1, r0, r1
   b5982:	440a      	add	r2, r1
   b5984:	0a21      	lsrs	r1, r4, #8
   b5986:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b598a:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b598e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5990 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b5990:	b538      	push	{r3, r4, r5, lr}
   b5992:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b5994:	f001 ffee 	bl	b7974 <_ZN9TCPClient9connectedEv>
   b5998:	2800      	cmp	r0, #0
   b599a:	bf14      	ite	ne
   b599c:	2501      	movne	r5, #1
   b599e:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b59a0:	d102      	bne.n	b59a8 <_ZN4MQTT11isConnectedEv+0x18>
   b59a2:	4620      	mov	r0, r4
   b59a4:	f002 f91e 	bl	b7be4 <_ZN9TCPClient4stopEv>
    return rc;
}
   b59a8:	4628      	mov	r0, r5
   b59aa:	bd38      	pop	{r3, r4, r5, pc}

000b59ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b59ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b59b0:	b088      	sub	sp, #32
   b59b2:	4604      	mov	r4, r0
   b59b4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b59b8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b59bc:	4689      	mov	r9, r1
   b59be:	4617      	mov	r7, r2
   b59c0:	461e      	mov	r6, r3
    if (!isConnected()) {
   b59c2:	f7ff ffe5 	bl	b5990 <_ZN4MQTT11isConnectedEv>
   b59c6:	4605      	mov	r5, r0
   b59c8:	2800      	cmp	r0, #0
   b59ca:	f040 80cd 	bne.w	b5b68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b59ce:	4621      	mov	r1, r4
   b59d0:	a801      	add	r0, sp, #4
   b59d2:	f7ff febc 	bl	b574e <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b59d6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b59d8:	2900      	cmp	r1, #0
   b59da:	f040 8088 	bne.w	b5aee <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b59de:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b59e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b59e4:	462b      	mov	r3, r5
   b59e6:	4620      	mov	r0, r4
   b59e8:	f001 ff46 	bl	b7878 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b59ec:	2800      	cmp	r0, #0
   b59ee:	d07a      	beq.n	b5ae6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b59f0:	2301      	movs	r3, #1
   b59f2:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b59f4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b59f8:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b59fa:	2b04      	cmp	r3, #4
   b59fc:	4b5b      	ldr	r3, [pc, #364]	; (b5b6c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b59fe:	f040 8081 	bne.w	b5b04 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b5a02:	6818      	ldr	r0, [r3, #0]
   b5a04:	8899      	ldrh	r1, [r3, #4]
   b5a06:	799b      	ldrb	r3, [r3, #6]
   b5a08:	f8ad 100c 	strh.w	r1, [sp, #12]
   b5a0c:	f88d 300e 	strb.w	r3, [sp, #14]
   b5a10:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5a12:	f8c2 0005 	str.w	r0, [r2, #5]
   b5a16:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b5a1a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b5a1e:	f8a2 1009 	strh.w	r1, [r2, #9]
   b5a22:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b5a24:	230c      	movs	r3, #12
            if (willTopic) {
   b5a26:	f1b8 0f00 	cmp.w	r8, #0
   b5a2a:	f000 8081 	beq.w	b5b30 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b5a2e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b5a32:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b5a36:	0140      	lsls	r0, r0, #5
   b5a38:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b5a3c:	f040 0006 	orr.w	r0, r0, #6
   b5a40:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b5a42:	f1ba 0f00 	cmp.w	sl, #0
   b5a46:	d101      	bne.n	b5a4c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b5a48:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b5a4c:	b11f      	cbz	r7, b5a56 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b5a4e:	2e00      	cmp	r6, #0
   b5a50:	d170      	bne.n	b5b34 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b5a52:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b5a56:	69e2      	ldr	r2, [r4, #28]
   b5a58:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b5a5a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b5a5c:	69e1      	ldr	r1, [r4, #28]
   b5a5e:	1c58      	adds	r0, r3, #1
   b5a60:	1212      	asrs	r2, r2, #8
   b5a62:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b5a64:	1c9a      	adds	r2, r3, #2
   b5a66:	69e1      	ldr	r1, [r4, #28]
   b5a68:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b5a6a:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b5a6c:	3303      	adds	r3, #3
   b5a6e:	69e2      	ldr	r2, [r4, #28]
   b5a70:	4649      	mov	r1, r9
   b5a72:	4620      	mov	r0, r4
   b5a74:	f7ff ff70 	bl	b5958 <_ZN4MQTT11writeStringEPKcPht>
   b5a78:	4603      	mov	r3, r0
            if (willTopic) {
   b5a7a:	f1b8 0f00 	cmp.w	r8, #0
   b5a7e:	d00b      	beq.n	b5a98 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b5a80:	69e2      	ldr	r2, [r4, #28]
   b5a82:	4641      	mov	r1, r8
   b5a84:	4620      	mov	r0, r4
   b5a86:	f7ff ff67 	bl	b5958 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b5a8a:	69e2      	ldr	r2, [r4, #28]
   b5a8c:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b5a8e:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b5a90:	4620      	mov	r0, r4
   b5a92:	f7ff ff61 	bl	b5958 <_ZN4MQTT11writeStringEPKcPht>
   b5a96:	4603      	mov	r3, r0
            if(user != NULL) {
   b5a98:	b167      	cbz	r7, b5ab4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b5a9a:	69e2      	ldr	r2, [r4, #28]
   b5a9c:	4639      	mov	r1, r7
   b5a9e:	4620      	mov	r0, r4
   b5aa0:	f7ff ff5a 	bl	b5958 <_ZN4MQTT11writeStringEPKcPht>
   b5aa4:	4603      	mov	r3, r0
                if(pass != NULL) {
   b5aa6:	b12e      	cbz	r6, b5ab4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b5aa8:	69e2      	ldr	r2, [r4, #28]
   b5aaa:	4631      	mov	r1, r6
   b5aac:	4620      	mov	r0, r4
   b5aae:	f7ff ff53 	bl	b5958 <_ZN4MQTT11writeStringEPKcPht>
   b5ab2:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b5ab4:	3b05      	subs	r3, #5
   b5ab6:	69e2      	ldr	r2, [r4, #28]
   b5ab8:	b29b      	uxth	r3, r3
   b5aba:	2110      	movs	r1, #16
   b5abc:	4620      	mov	r0, r4
   b5abe:	f7ff ff0f 	bl	b58e0 <_ZN4MQTT5writeEhPht>
   b5ac2:	f000 fecb 	bl	b685c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b5ac6:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5aca:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b5ace:	4620      	mov	r0, r4
   b5ad0:	f002 f82e 	bl	b7b30 <_ZN9TCPClient9availableEv>
   b5ad4:	bb88      	cbnz	r0, b5b3a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b5ad6:	f000 fec1 	bl	b685c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5ada:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5adc:	1ac0      	subs	r0, r0, r3
   b5ade:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5ae0:	4373      	muls	r3, r6
   b5ae2:	4298      	cmp	r0, r3
   b5ae4:	d9f3      	bls.n	b5ace <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b5ae6:	4620      	mov	r0, r4
   b5ae8:	f002 f87c 	bl	b7be4 <_ZN9TCPClient4stopEv>
   b5aec:	e035      	b.n	b5b5a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b5aee:	a802      	add	r0, sp, #8
   b5af0:	f001 fcbe 	bl	b7470 <_ZN9IPAddressC1EPKh>
   b5af4:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5af8:	462b      	mov	r3, r5
   b5afa:	a902      	add	r1, sp, #8
   b5afc:	4620      	mov	r0, r4
   b5afe:	f001 ff9b 	bl	b7a38 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5b02:	e773      	b.n	b59ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b5b04:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b5b08:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b5b0c:	7bdb      	ldrb	r3, [r3, #15]
   b5b0e:	f10d 0c08 	add.w	ip, sp, #8
   b5b12:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b5b16:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b5b1a:	ab02      	add	r3, sp, #8
   b5b1c:	cb03      	ldmia	r3!, {r0, r1}
   b5b1e:	f8c2 0005 	str.w	r0, [r2, #5]
   b5b22:	f8c2 1009 	str.w	r1, [r2, #9]
   b5b26:	f89c 3000 	ldrb.w	r3, [ip]
   b5b2a:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b5b2c:	230e      	movs	r3, #14
   b5b2e:	e77a      	b.n	b5a26 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b5b30:	2002      	movs	r0, #2
   b5b32:	e786      	b.n	b5a42 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b5b34:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b5b38:	e78d      	b.n	b5a56 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b5b3a:	a902      	add	r1, sp, #8
   b5b3c:	4620      	mov	r0, r4
   b5b3e:	f7ff fe7d 	bl	b583c <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b5b42:	2804      	cmp	r0, #4
   b5b44:	d1cf      	bne.n	b5ae6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b5b46:	69e3      	ldr	r3, [r4, #28]
   b5b48:	78de      	ldrb	r6, [r3, #3]
   b5b4a:	2e00      	cmp	r6, #0
   b5b4c:	d1cb      	bne.n	b5ae6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b5b4e:	f000 fe85 	bl	b685c <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b5b52:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b5b54:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b5b56:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b5b5a:	a801      	add	r0, sp, #4
   b5b5c:	f7ff fe02 	bl	b5764 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5b60:	4628      	mov	r0, r5
   b5b62:	b008      	add	sp, #32
   b5b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b5b68:	2500      	movs	r5, #0
   b5b6a:	e7f9      	b.n	b5b60 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b5b6c:	000b8544 	.word	0x000b8544

000b5b70 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b5b70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b5b72:	2301      	movs	r3, #1
   b5b74:	2204      	movs	r2, #4
   b5b76:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b5b7a:	2300      	movs	r3, #0
   b5b7c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b5b80:	e9cd 3300 	strd	r3, r3, [sp]
   b5b84:	461a      	mov	r2, r3
   b5b86:	f7ff ff11 	bl	b59ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b5b8a:	b007      	add	sp, #28
   b5b8c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5b90 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b5b90:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5b92:	4604      	mov	r4, r0
   b5b94:	460e      	mov	r6, r1
    if (isConnected()) {
   b5b96:	f7ff fefb 	bl	b5990 <_ZN4MQTT11isConnectedEv>
   b5b9a:	4605      	mov	r5, r0
   b5b9c:	b1c8      	cbz	r0, b5bd2 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b5b9e:	4621      	mov	r1, r4
   b5ba0:	a801      	add	r0, sp, #4
   b5ba2:	f7ff fdd4 	bl	b574e <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b5ba6:	69e3      	ldr	r3, [r4, #28]
   b5ba8:	2262      	movs	r2, #98	; 0x62
   b5baa:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5bac:	69e3      	ldr	r3, [r4, #28]
   b5bae:	2202      	movs	r2, #2
   b5bb0:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5bb2:	69e3      	ldr	r3, [r4, #28]
   b5bb4:	0a32      	lsrs	r2, r6, #8
   b5bb6:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5bb8:	69e3      	ldr	r3, [r4, #28]
   b5bba:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5bbc:	69e1      	ldr	r1, [r4, #28]
   b5bbe:	2204      	movs	r2, #4
   b5bc0:	4620      	mov	r0, r4
   b5bc2:	f001 fdae 	bl	b7722 <_ZN9TCPClient5writeEPKhj>
   b5bc6:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5bc8:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5bca:	bf18      	it	ne
   b5bcc:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5bce:	f7ff fdc9 	bl	b5764 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5bd2:	4628      	mov	r0, r5
   b5bd4:	b002      	add	sp, #8
   b5bd6:	bd70      	pop	{r4, r5, r6, pc}

000b5bd8 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b5bd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5bda:	4604      	mov	r4, r0
   b5bdc:	460e      	mov	r6, r1
    if (isConnected()) {
   b5bde:	f7ff fed7 	bl	b5990 <_ZN4MQTT11isConnectedEv>
   b5be2:	4605      	mov	r5, r0
   b5be4:	b1c8      	cbz	r0, b5c1a <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b5be6:	4621      	mov	r1, r4
   b5be8:	a801      	add	r0, sp, #4
   b5bea:	f7ff fdb0 	bl	b574e <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b5bee:	69e3      	ldr	r3, [r4, #28]
   b5bf0:	2272      	movs	r2, #114	; 0x72
   b5bf2:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5bf4:	69e3      	ldr	r3, [r4, #28]
   b5bf6:	2202      	movs	r2, #2
   b5bf8:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5bfa:	69e3      	ldr	r3, [r4, #28]
   b5bfc:	0a32      	lsrs	r2, r6, #8
   b5bfe:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5c00:	69e3      	ldr	r3, [r4, #28]
   b5c02:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5c04:	69e1      	ldr	r1, [r4, #28]
   b5c06:	2204      	movs	r2, #4
   b5c08:	4620      	mov	r0, r4
   b5c0a:	f001 fd8a 	bl	b7722 <_ZN9TCPClient5writeEPKhj>
   b5c0e:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5c10:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5c12:	bf18      	it	ne
   b5c14:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5c16:	f7ff fda5 	bl	b5764 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5c1a:	4628      	mov	r0, r5
   b5c1c:	b002      	add	sp, #8
   b5c1e:	bd70      	pop	{r4, r5, r6, pc}

000b5c20 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b5c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c24:	ed2d 8b02 	vpush	{d8}
   b5c28:	b087      	sub	sp, #28
   b5c2a:	af00      	add	r7, sp, #0
   b5c2c:	4604      	mov	r4, r0
    if (isConnected()) {
   b5c2e:	f7ff feaf 	bl	b5990 <_ZN4MQTT11isConnectedEv>
   b5c32:	4681      	mov	r9, r0
   b5c34:	b1f8      	cbz	r0, b5c76 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b5c36:	4621      	mov	r1, r4
   b5c38:	f107 0014 	add.w	r0, r7, #20
   b5c3c:	f7ff fd87 	bl	b574e <_ZN4MQTT11MutexLockerC1EPS_>
   b5c40:	f000 fe0c 	bl	b685c <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b5c44:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5c4a:	4353      	muls	r3, r2
   b5c4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b5c4e:	1a82      	subs	r2, r0, r2
   b5c50:	429a      	cmp	r2, r3
   b5c52:	4606      	mov	r6, r0
   b5c54:	d803      	bhi.n	b5c5e <_ZN4MQTT4loopEv+0x3e>
   b5c56:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5c58:	1a82      	subs	r2, r0, r2
   b5c5a:	4293      	cmp	r3, r2
   b5c5c:	d221      	bcs.n	b5ca2 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5c5e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5c62:	b17b      	cbz	r3, b5c84 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b5c64:	4620      	mov	r0, r4
   b5c66:	f001 ffbd 	bl	b7be4 <_ZN9TCPClient4stopEv>
                return false;
   b5c6a:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b5c6e:	f107 0014 	add.w	r0, r7, #20
   b5c72:	f7ff fd77 	bl	b5764 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5c76:	4648      	mov	r0, r9
   b5c78:	371c      	adds	r7, #28
   b5c7a:	46bd      	mov	sp, r7
   b5c7c:	ecbd 8b02 	vpop	{d8}
   b5c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b5c84:	69e2      	ldr	r2, [r4, #28]
   b5c86:	21c0      	movs	r1, #192	; 0xc0
   b5c88:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b5c8a:	69e2      	ldr	r2, [r4, #28]
   b5c8c:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5c8e:	69e1      	ldr	r1, [r4, #28]
   b5c90:	2202      	movs	r2, #2
   b5c92:	4620      	mov	r0, r4
   b5c94:	f001 fd45 	bl	b7722 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b5c98:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b5c9c:	2301      	movs	r3, #1
   b5c9e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b5ca2:	4620      	mov	r0, r4
   b5ca4:	f001 ff44 	bl	b7b30 <_ZN9TCPClient9availableEv>
   b5ca8:	2800      	cmp	r0, #0
   b5caa:	d0e0      	beq.n	b5c6e <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b5cac:	f107 0113 	add.w	r1, r7, #19
   b5cb0:	4620      	mov	r0, r4
   b5cb2:	f7ff fdc3 	bl	b583c <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5cb6:	4683      	mov	fp, r0
   b5cb8:	2800      	cmp	r0, #0
   b5cba:	d0d8      	beq.n	b5c6e <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b5cbc:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5cbe:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b5cc0:	7819      	ldrb	r1, [r3, #0]
   b5cc2:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5cc6:	2a30      	cmp	r2, #48	; 0x30
   b5cc8:	d17f      	bne.n	b5dca <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5cca:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5cce:	f1ba 0f00 	cmp.w	sl, #0
   b5cd2:	d0cc      	beq.n	b5c6e <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5cd4:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b5cd8:	466a      	mov	r2, sp
   b5cda:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5cde:	eb03 020c 	add.w	r2, r3, ip
   b5ce2:	7851      	ldrb	r1, [r2, #1]
   b5ce4:	7895      	ldrb	r5, [r2, #2]
   b5ce6:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5cea:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5cec:	f105 0208 	add.w	r2, r5, #8
   b5cf0:	4669      	mov	r1, sp
   b5cf2:	08d2      	lsrs	r2, r2, #3
   b5cf4:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b5cf8:	4695      	mov	sp, r2
   b5cfa:	f10c 0203 	add.w	r2, ip, #3
   b5cfe:	60fa      	str	r2, [r7, #12]
   b5d00:	eb03 0e02 	add.w	lr, r3, r2
   b5d04:	eb0d 0205 	add.w	r2, sp, r5
   b5d08:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5d0a:	f8c7 d008 	str.w	sp, [r7, #8]
   b5d0e:	607a      	str	r2, [r7, #4]
   b5d10:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b5d14:	428a      	cmp	r2, r1
   b5d16:	d006      	beq.n	b5d26 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b5d18:	460a      	mov	r2, r1
   b5d1a:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b5d1e:	f802 8b01 	strb.w	r8, [r2], #1
   b5d22:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b5d24:	e7f4      	b.n	b5d10 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b5d26:	2200      	movs	r2, #0
   b5d28:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5d2a:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5d2e:	68f9      	ldr	r1, [r7, #12]
   b5d30:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b5d34:	ebab 020c 	sub.w	r2, fp, ip
   b5d38:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5d3a:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b5d3e:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5d42:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5d44:	d125      	bne.n	b5d92 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5d46:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5d4a:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b5d4c:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5d4e:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b5d52:	f10c 0105 	add.w	r1, ip, #5
   b5d56:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b5d58:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5d5a:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5d5e:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b5d60:	69e3      	ldr	r3, [r4, #28]
   b5d62:	2240      	movs	r2, #64	; 0x40
   b5d64:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b5d66:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5d68:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b5d6c:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b5d70:	69e3      	ldr	r3, [r4, #28]
   b5d72:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b5d76:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b5d78:	69e3      	ldr	r3, [r4, #28]
   b5d7a:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5d7e:	69e1      	ldr	r1, [r4, #28]
   b5d80:	2204      	movs	r2, #4
   b5d82:	4620      	mov	r0, r4
   b5d84:	f001 fccd 	bl	b7722 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b5d88:	6266      	str	r6, [r4, #36]	; 0x24
   b5d8a:	ee18 3a10 	vmov	r3, s16
   b5d8e:	469d      	mov	sp, r3
   b5d90:	e76d      	b.n	b5c6e <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b5d92:	f1b8 0f04 	cmp.w	r8, #4
   b5d96:	d115      	bne.n	b5dc4 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5d98:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5d9c:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5d9e:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5da0:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b5da4:	f10c 0105 	add.w	r1, ip, #5
   b5da8:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5daa:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5dac:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5db0:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b5db2:	69e3      	ldr	r3, [r4, #28]
   b5db4:	2250      	movs	r2, #80	; 0x50
   b5db6:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b5db8:	69e3      	ldr	r3, [r4, #28]
   b5dba:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5dbc:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b5dc0:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b5dc2:	e7d5      	b.n	b5d70 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b5dc4:	4419      	add	r1, r3
   b5dc6:	47d0      	blx	sl
   b5dc8:	e7df      	b.n	b5d8a <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5dca:	2a50      	cmp	r2, #80	; 0x50
   b5dcc:	d108      	bne.n	b5de0 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5dce:	789a      	ldrb	r2, [r3, #2]
   b5dd0:	78d9      	ldrb	r1, [r3, #3]
   b5dd2:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5dd6:	b289      	uxth	r1, r1
   b5dd8:	4620      	mov	r0, r4
   b5dda:	f7ff fed9 	bl	b5b90 <_ZN4MQTT14publishReleaseEt>
   b5dde:	e746      	b.n	b5c6e <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5de0:	2a40      	cmp	r2, #64	; 0x40
   b5de2:	d112      	bne.n	b5e0a <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b5de4:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5de6:	2a00      	cmp	r2, #0
   b5de8:	f43f af41 	beq.w	b5c6e <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5dec:	f1bb 0f04 	cmp.w	fp, #4
   b5df0:	f47f af3d 	bne.w	b5c6e <_ZN4MQTT4loopEv+0x4e>
   b5df4:	f011 0f06 	tst.w	r1, #6
   b5df8:	f47f af39 	bne.w	b5c6e <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5dfc:	7899      	ldrb	r1, [r3, #2]
   b5dfe:	78d8      	ldrb	r0, [r3, #3]
   b5e00:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b5e04:	b280      	uxth	r0, r0
   b5e06:	4790      	blx	r2
   b5e08:	e731      	b.n	b5c6e <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5e0a:	2a60      	cmp	r2, #96	; 0x60
   b5e0c:	d108      	bne.n	b5e20 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5e0e:	789a      	ldrb	r2, [r3, #2]
   b5e10:	78d9      	ldrb	r1, [r3, #3]
   b5e12:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5e16:	b289      	uxth	r1, r1
   b5e18:	4620      	mov	r0, r4
   b5e1a:	f7ff fedd 	bl	b5bd8 <_ZN4MQTT15publishCompleteEt>
   b5e1e:	e726      	b.n	b5c6e <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5e20:	2a70      	cmp	r2, #112	; 0x70
   b5e22:	d0df      	beq.n	b5de4 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b5e24:	2a90      	cmp	r2, #144	; 0x90
   b5e26:	f43f af22 	beq.w	b5c6e <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5e2a:	2ac0      	cmp	r2, #192	; 0xc0
   b5e2c:	d10a      	bne.n	b5e44 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5e2e:	22d0      	movs	r2, #208	; 0xd0
   b5e30:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5e32:	69e3      	ldr	r3, [r4, #28]
   b5e34:	2200      	movs	r2, #0
   b5e36:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b5e38:	69e1      	ldr	r1, [r4, #28]
   b5e3a:	2202      	movs	r2, #2
   b5e3c:	4620      	mov	r0, r4
   b5e3e:	f001 fc70 	bl	b7722 <_ZN9TCPClient5writeEPKhj>
   b5e42:	e714      	b.n	b5c6e <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b5e44:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b5e46:	bf04      	itt	eq
   b5e48:	2300      	moveq	r3, #0
   b5e4a:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5e4e:	e70e      	b.n	b5c6e <_ZN4MQTT4loopEv+0x4e>

000b5e50 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b5e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5e52:	4604      	mov	r4, r0
   b5e54:	460f      	mov	r7, r1
   b5e56:	4616      	mov	r6, r2
    if (isConnected()) {
   b5e58:	f7ff fd9a 	bl	b5990 <_ZN4MQTT11isConnectedEv>
   b5e5c:	4605      	mov	r5, r0
   b5e5e:	b310      	cbz	r0, b5ea6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5e60:	4621      	mov	r1, r4
   b5e62:	a801      	add	r0, sp, #4
   b5e64:	f7ff fc73 	bl	b574e <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b5e68:	8c23      	ldrh	r3, [r4, #32]
   b5e6a:	3301      	adds	r3, #1
   b5e6c:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5e6e:	b1eb      	cbz	r3, b5eac <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5e70:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5e72:	8c23      	ldrh	r3, [r4, #32]
   b5e74:	69e2      	ldr	r2, [r4, #28]
   b5e76:	0a1b      	lsrs	r3, r3, #8
   b5e78:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5e7a:	69e3      	ldr	r3, [r4, #28]
   b5e7c:	8c22      	ldrh	r2, [r4, #32]
   b5e7e:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5e80:	69e2      	ldr	r2, [r4, #28]
   b5e82:	2307      	movs	r3, #7
   b5e84:	4639      	mov	r1, r7
   b5e86:	4620      	mov	r0, r4
   b5e88:	f7ff fd66 	bl	b5958 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b5e8c:	69e3      	ldr	r3, [r4, #28]
   b5e8e:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5e90:	3804      	subs	r0, #4
   b5e92:	b283      	uxth	r3, r0
   b5e94:	69e2      	ldr	r2, [r4, #28]
   b5e96:	2182      	movs	r1, #130	; 0x82
   b5e98:	4620      	mov	r0, r4
   b5e9a:	f7ff fd21 	bl	b58e0 <_ZN4MQTT5writeEhPht>
   b5e9e:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5ea0:	a801      	add	r0, sp, #4
   b5ea2:	f7ff fc5f 	bl	b5764 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5ea6:	4628      	mov	r0, r5
   b5ea8:	b003      	add	sp, #12
   b5eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b5eac:	2301      	movs	r3, #1
   b5eae:	e7df      	b.n	b5e70 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5eb0 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5eb0:	2200      	movs	r2, #0
   b5eb2:	f7ff bfcd 	b.w	b5e50 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
	...

000b5eb8 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5eb8:	b510      	push	{r4, lr}
   b5eba:	4b04      	ldr	r3, [pc, #16]	; (b5ecc <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b5ebc:	6003      	str	r3, [r0, #0]
   b5ebe:	4604      	mov	r4, r0
  if(buffer) {
   b5ec0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5ec2:	b108      	cbz	r0, b5ec8 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b5ec4:	f000 ff0e 	bl	b6ce4 <free>
    buffer = NULL;
  }
}
   b5ec8:	4620      	mov	r0, r4
   b5eca:	bd10      	pop	{r4, pc}
   b5ecc:	000b9064 	.word	0x000b9064

000b5ed0 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5ed0:	b510      	push	{r4, lr}
   b5ed2:	4604      	mov	r4, r0
}
   b5ed4:	f7ff fff0 	bl	b5eb8 <_ZN16Adafruit_SSD1306D1Ev>
   b5ed8:	4620      	mov	r0, r4
   b5eda:	2150      	movs	r1, #80	; 0x50
   b5edc:	f7fe fac3 	bl	b4466 <_ZdlPvj>
   b5ee0:	4620      	mov	r0, r4
   b5ee2:	bd10      	pop	{r4, pc}

000b5ee4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5ee4:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5ee6:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5ee8:	db4b      	blt.n	b5f82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5eea:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5eee:	428c      	cmp	r4, r1
   b5ef0:	dd47      	ble.n	b5f82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5ef2:	2a00      	cmp	r2, #0
   b5ef4:	db45      	blt.n	b5f82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5ef6:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5efa:	4294      	cmp	r4, r2
   b5efc:	dd41      	ble.n	b5f82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b5efe:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b5f00:	2c02      	cmp	r4, #2
   b5f02:	d01f      	beq.n	b5f44 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b5f04:	2c03      	cmp	r4, #3
   b5f06:	d026      	beq.n	b5f56 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5f08:	2c01      	cmp	r4, #1
   b5f0a:	d104      	bne.n	b5f16 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5f0c:	8904      	ldrh	r4, [r0, #8]
   b5f0e:	43d2      	mvns	r2, r2
   b5f10:	4414      	add	r4, r2
      break;
   b5f12:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b5f14:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b5f16:	2b01      	cmp	r3, #1
   b5f18:	d023      	beq.n	b5f62 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b5f1a:	2b02      	cmp	r3, #2
   b5f1c:	d032      	beq.n	b5f84 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5f1e:	bb83      	cbnz	r3, b5f82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b5f20:	2a00      	cmp	r2, #0
   b5f22:	4613      	mov	r3, r2
   b5f24:	8904      	ldrh	r4, [r0, #8]
   b5f26:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5f28:	bfb8      	it	lt
   b5f2a:	1dd3      	addlt	r3, r2, #7
   b5f2c:	10db      	asrs	r3, r3, #3
   b5f2e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5f32:	f002 0207 	and.w	r2, r2, #7
   b5f36:	2301      	movs	r3, #1
   b5f38:	4093      	lsls	r3, r2
   b5f3a:	5c42      	ldrb	r2, [r0, r1]
   b5f3c:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5f40:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b5f42:	e01e      	b.n	b5f82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b5f44:	8904      	ldrh	r4, [r0, #8]
   b5f46:	3c01      	subs	r4, #1
   b5f48:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b5f4a:	8944      	ldrh	r4, [r0, #10]
   b5f4c:	43d2      	mvns	r2, r2
   b5f4e:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b5f50:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b5f52:	b212      	sxth	r2, r2
      break;
   b5f54:	e7df      	b.n	b5f16 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b5f56:	8944      	ldrh	r4, [r0, #10]
   b5f58:	3c01      	subs	r4, #1
   b5f5a:	1a64      	subs	r4, r4, r1
      break;
   b5f5c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b5f5e:	b222      	sxth	r2, r4
      break;
   b5f60:	e7d9      	b.n	b5f16 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b5f62:	2a00      	cmp	r2, #0
   b5f64:	8904      	ldrh	r4, [r0, #8]
   b5f66:	4613      	mov	r3, r2
   b5f68:	bfb8      	it	lt
   b5f6a:	1dd3      	addlt	r3, r2, #7
   b5f6c:	10db      	asrs	r3, r3, #3
   b5f6e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5f72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5f74:	f002 0007 	and.w	r0, r2, #7
   b5f78:	2201      	movs	r2, #1
   b5f7a:	4082      	lsls	r2, r0
   b5f7c:	5c58      	ldrb	r0, [r3, r1]
   b5f7e:	4302      	orrs	r2, r0
   b5f80:	545a      	strb	r2, [r3, r1]
}
   b5f82:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5f84:	2a00      	cmp	r2, #0
   b5f86:	4613      	mov	r3, r2
   b5f88:	8904      	ldrh	r4, [r0, #8]
   b5f8a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5f8c:	bfb8      	it	lt
   b5f8e:	1dd3      	addlt	r3, r2, #7
   b5f90:	10db      	asrs	r3, r3, #3
   b5f92:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5f96:	f002 0207 	and.w	r2, r2, #7
   b5f9a:	2301      	movs	r3, #1
   b5f9c:	fa03 f202 	lsl.w	r2, r3, r2
   b5fa0:	5c43      	ldrb	r3, [r0, r1]
   b5fa2:	405a      	eors	r2, r3
   b5fa4:	e7cc      	b.n	b5f40 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b5fa8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b5fa8:	b570      	push	{r4, r5, r6, lr}
   b5faa:	4604      	mov	r4, r0
   b5fac:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5fae:	2600      	movs	r6, #0
   b5fb0:	f7ff f898 	bl	b50e4 <_ZN12Adafruit_GFXC1Ess>
   b5fb4:	4b11      	ldr	r3, [pc, #68]	; (b5ffc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b5fb6:	6023      	str	r3, [r4, #0]
   b5fb8:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b5fba:	b915      	cbnz	r5, b5fc2 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b5fbc:	f002 f836 	bl	b802c <_Z19__fetch_global_Wirev>
   b5fc0:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5fc2:	23ff      	movs	r3, #255	; 0xff
   b5fc4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b5fc8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b5fcc:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5fd0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b5fd4:	4b0a      	ldr	r3, [pc, #40]	; (b6000 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b5fd6:	63a3      	str	r3, [r4, #56]	; 0x38
   b5fd8:	2301      	movs	r3, #1
   b5fda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5fde:	9b05      	ldr	r3, [sp, #20]
   b5fe0:	64a3      	str	r3, [r4, #72]	; 0x48
   b5fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5fe6:	9b06      	ldr	r3, [sp, #24]
   b5fe8:	86a2      	strh	r2, [r4, #52]	; 0x34
   b5fea:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b5fee:	6426      	str	r6, [r4, #64]	; 0x40
   b5ff0:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b5ff4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b5ff6:	4620      	mov	r0, r4
   b5ff8:	bd70      	pop	{r4, r5, r6, pc}
   b5ffa:	bf00      	nop
   b5ffc:	000b9064 	.word	0x000b9064
   b6000:	000b8bb0 	.word	0x000b8bb0

000b6004 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6006:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6008:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b600a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b600c:	b190      	cbz	r0, b6034 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b600e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6012:	f001 fb6f 	bl	b76f4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6016:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6018:	6803      	ldr	r3, [r0, #0]
   b601a:	2100      	movs	r1, #0
   b601c:	689b      	ldr	r3, [r3, #8]
   b601e:	4798      	blx	r3
    WIRE_WRITE(c);
   b6020:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6022:	6803      	ldr	r3, [r0, #0]
   b6024:	4629      	mov	r1, r5
   b6026:	689b      	ldr	r3, [r3, #8]
   b6028:	4798      	blx	r3
    wire->endTransmission();
   b602a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b602c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b6030:	f001 bb67 	b.w	b7702 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6034:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6038:	4601      	mov	r1, r0
   b603a:	b298      	uxth	r0, r3
   b603c:	f001 ff6f 	bl	b7f1e <digitalWrite>
  if(spi) {
   b6040:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6042:	b120      	cbz	r0, b604e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b6044:	4629      	mov	r1, r5
}
   b6046:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b604a:	f000 bf65 	b.w	b6f18 <_ZN8SPIClass8transferEh>
   b604e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6050:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6052:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6056:	ea05 0107 	and.w	r1, r5, r7
   b605a:	b280      	uxth	r0, r0
   b605c:	f001 ff5f 	bl	b7f1e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6060:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6064:	2101      	movs	r1, #1
   b6066:	b280      	uxth	r0, r0
   b6068:	f001 ff59 	bl	b7f1e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b606c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6070:	2100      	movs	r1, #0
   b6072:	b280      	uxth	r0, r0
   b6074:	f001 ff53 	bl	b7f1e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6078:	3e01      	subs	r6, #1
   b607a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b607e:	d1e8      	bne.n	b6052 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b6080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6082 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6082:	b538      	push	{r3, r4, r5, lr}
   b6084:	4604      	mov	r4, r0
  TRANSACTION_START
   b6086:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6088:	460d      	mov	r5, r1
  TRANSACTION_START
   b608a:	b180      	cbz	r0, b60ae <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b608c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b608e:	f001 fb23 	bl	b76d8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b6092:	2d00      	cmp	r5, #0
   b6094:	4620      	mov	r0, r4
   b6096:	bf14      	ite	ne
   b6098:	21a7      	movne	r1, #167	; 0xa7
   b609a:	21a6      	moveq	r1, #166	; 0xa6
   b609c:	f7ff ffb2 	bl	b6004 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b60a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b60a2:	b188      	cbz	r0, b60c8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b60a4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b60a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b60aa:	f001 bb15 	b.w	b76d8 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b60ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b60b0:	b118      	cbz	r0, b60ba <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b60b2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b60b6:	f000 fec1 	bl	b6e3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b60ba:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b60be:	2100      	movs	r1, #0
   b60c0:	b280      	uxth	r0, r0
   b60c2:	f001 ff2c 	bl	b7f1e <digitalWrite>
   b60c6:	e7e4      	b.n	b6092 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b60c8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b60cc:	2101      	movs	r1, #1
   b60ce:	b280      	uxth	r0, r0
   b60d0:	f001 ff25 	bl	b7f1e <digitalWrite>
   b60d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b60d6:	b118      	cbz	r0, b60e0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b60d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b60dc:	f000 be94 	b.w	b6e08 <_ZN8SPIClass14endTransactionEv>
}
   b60e0:	bd38      	pop	{r3, r4, r5, pc}

000b60e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b60e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b60e6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b60e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b60ea:	460d      	mov	r5, r1
  if(wire) { // I2C
   b60ec:	188f      	adds	r7, r1, r2
   b60ee:	b340      	cbz	r0, b6142 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b60f0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b60f4:	f001 fafe 	bl	b76f4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b60f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b60fa:	6803      	ldr	r3, [r0, #0]
   b60fc:	2100      	movs	r1, #0
   b60fe:	689b      	ldr	r3, [r3, #8]
   b6100:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6102:	2601      	movs	r6, #1
    while(n--) {
   b6104:	42af      	cmp	r7, r5
        wire->endTransmission();
   b6106:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6108:	d017      	beq.n	b613a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b610a:	2e1f      	cmp	r6, #31
   b610c:	d90c      	bls.n	b6128 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b610e:	f001 faf8 	bl	b7702 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6112:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6116:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6118:	f001 faec 	bl	b76f4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b611c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b611e:	6803      	ldr	r3, [r0, #0]
   b6120:	2100      	movs	r1, #0
   b6122:	689b      	ldr	r3, [r3, #8]
   b6124:	4798      	blx	r3
        bytesOut = 1;
   b6126:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6128:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b612a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b612e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6130:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6132:	689b      	ldr	r3, [r3, #8]
   b6134:	4798      	blx	r3
      bytesOut++;
   b6136:	b2f6      	uxtb	r6, r6
    while(n--) {
   b6138:	e7e4      	b.n	b6104 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b613a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b613e:	f001 bae0 	b.w	b7702 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6142:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6146:	4601      	mov	r1, r0
   b6148:	b298      	uxth	r0, r3
   b614a:	f001 fee8 	bl	b7f1e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b614e:	42bd      	cmp	r5, r7
   b6150:	d022      	beq.n	b6198 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b6152:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6154:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6158:	b118      	cbz	r0, b6162 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b615a:	4649      	mov	r1, r9
   b615c:	f000 fedc 	bl	b6f18 <_ZN8SPIClass8transferEh>
   b6160:	e7f5      	b.n	b614e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b6162:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6164:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6168:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b616c:	ea09 0108 	and.w	r1, r9, r8
   b6170:	b280      	uxth	r0, r0
   b6172:	f001 fed4 	bl	b7f1e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6176:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b617a:	2101      	movs	r1, #1
   b617c:	b280      	uxth	r0, r0
   b617e:	f001 fece 	bl	b7f1e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6182:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6186:	2100      	movs	r1, #0
   b6188:	b280      	uxth	r0, r0
   b618a:	f001 fec8 	bl	b7f1e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b618e:	3e01      	subs	r6, #1
   b6190:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6194:	d1e8      	bne.n	b6168 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b6196:	e7da      	b.n	b614e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b6198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b619c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b619c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b61a0:	1dda      	adds	r2, r3, #7
   b61a2:	bf48      	it	mi
   b61a4:	f103 020e 	addmi.w	r2, r3, #14
   b61a8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b61ac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b61ae:	10d2      	asrs	r2, r2, #3
   b61b0:	435a      	muls	r2, r3
   b61b2:	2100      	movs	r1, #0
   b61b4:	f002 b88a 	b.w	b82cc <memset>

000b61b8 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b61b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b61bc:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b61be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b61c0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b61c4:	4604      	mov	r4, r0
   b61c6:	460f      	mov	r7, r1
   b61c8:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b61ca:	b1c3      	cbz	r3, b61fe <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b61cc:	4620      	mov	r0, r4
   b61ce:	f7ff ffe5 	bl	b619c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b61d2:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b61d6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b61da:	2820      	cmp	r0, #32
   b61dc:	dc21      	bgt.n	b6222 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b61de:	2320      	movs	r3, #32
   b61e0:	2201      	movs	r2, #1
   b61e2:	3820      	subs	r0, #32
   b61e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b61e8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b61ec:	2373      	movs	r3, #115	; 0x73
   b61ee:	3973      	subs	r1, #115	; 0x73
   b61f0:	9300      	str	r3, [sp, #0]
   b61f2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b61f6:	4b89      	ldr	r3, [pc, #548]	; (b641c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b61f8:	f340 024f 	sbfx	r2, r0, #1, #16
   b61fc:	e021      	b.n	b6242 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b61fe:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6202:	1dd8      	adds	r0, r3, #7
   b6204:	bf48      	it	mi
   b6206:	f103 000e 	addmi.w	r0, r3, #14
   b620a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b620e:	10c0      	asrs	r0, r0, #3
   b6210:	4358      	muls	r0, r3
   b6212:	f000 fd5f 	bl	b6cd4 <malloc>
   b6216:	62e0      	str	r0, [r4, #44]	; 0x2c
   b6218:	2800      	cmp	r0, #0
   b621a:	d1d7      	bne.n	b61cc <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b621c:	b004      	add	sp, #16
   b621e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b6222:	3840      	subs	r0, #64	; 0x40
   b6224:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b6228:	fa02 f280 	sxtah	r2, r2, r0
   b622c:	2340      	movs	r3, #64	; 0x40
   b622e:	2001      	movs	r0, #1
   b6230:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b6234:	2352      	movs	r3, #82	; 0x52
   b6236:	3952      	subs	r1, #82	; 0x52
   b6238:	9300      	str	r3, [sp, #0]
   b623a:	4b79      	ldr	r3, [pc, #484]	; (b6420 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b623c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6240:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b6242:	4620      	mov	r0, r4
   b6244:	f341 014f 	sbfx	r1, r1, #1, #16
   b6248:	f7fe ff62 	bl	b5110 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b624c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b624e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b6252:	2800      	cmp	r0, #0
   b6254:	d078      	beq.n	b6348 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6256:	2d00      	cmp	r5, #0
   b6258:	d174      	bne.n	b6344 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b625a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b625e:	2b20      	cmp	r3, #32
   b6260:	bf0c      	ite	eq
   b6262:	253c      	moveq	r5, #60	; 0x3c
   b6264:	253d      	movne	r5, #61	; 0x3d
   b6266:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b626a:	f1b8 0f00 	cmp.w	r8, #0
   b626e:	d001      	beq.n	b6274 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b6270:	f001 fa36 	bl	b76e0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b6274:	b1fe      	cbz	r6, b62b6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b6276:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b627a:	2800      	cmp	r0, #0
   b627c:	db1b      	blt.n	b62b6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b627e:	2101      	movs	r1, #1
   b6280:	b280      	uxth	r0, r0
   b6282:	f001 fe3b 	bl	b7efc <pinMode>
    digitalWrite(rstPin, HIGH);
   b6286:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b628a:	2101      	movs	r1, #1
   b628c:	b280      	uxth	r0, r0
   b628e:	f001 fe46 	bl	b7f1e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b6292:	2001      	movs	r0, #1
   b6294:	f000 ffb2 	bl	b71fc <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b6298:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b629c:	2100      	movs	r1, #0
   b629e:	b280      	uxth	r0, r0
   b62a0:	f001 fe3d 	bl	b7f1e <digitalWrite>
    delay(10);                  // Wait 10 ms
   b62a4:	200a      	movs	r0, #10
   b62a6:	f000 ffa9 	bl	b71fc <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b62aa:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b62ae:	2101      	movs	r1, #1
   b62b0:	b280      	uxth	r0, r0
   b62b2:	f001 fe34 	bl	b7f1e <digitalWrite>
  TRANSACTION_START
   b62b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b62b8:	2800      	cmp	r0, #0
   b62ba:	d074      	beq.n	b63a6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b62bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b62be:	f001 fa0b 	bl	b76d8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b62c2:	2204      	movs	r2, #4
   b62c4:	4957      	ldr	r1, [pc, #348]	; (b6424 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b62c6:	4620      	mov	r0, r4
   b62c8:	f7ff ff0b 	bl	b60e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b62cc:	8961      	ldrh	r1, [r4, #10]
   b62ce:	3901      	subs	r1, #1
   b62d0:	b2c9      	uxtb	r1, r1
   b62d2:	4620      	mov	r0, r4
   b62d4:	f7ff fe96 	bl	b6004 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b62d8:	4953      	ldr	r1, [pc, #332]	; (b6428 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b62da:	2204      	movs	r2, #4
   b62dc:	4620      	mov	r0, r4
   b62de:	f7ff ff00 	bl	b60e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b62e2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b62e6:	2b01      	cmp	r3, #1
   b62e8:	bf0c      	ite	eq
   b62ea:	2110      	moveq	r1, #16
   b62ec:	2114      	movne	r1, #20
   b62ee:	4620      	mov	r0, r4
   b62f0:	f7ff fe88 	bl	b6004 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b62f4:	2204      	movs	r2, #4
   b62f6:	494d      	ldr	r1, [pc, #308]	; (b642c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b62f8:	4620      	mov	r0, r4
   b62fa:	f7ff fef2 	bl	b60e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b62fe:	68a3      	ldr	r3, [r4, #8]
   b6300:	4a4b      	ldr	r2, [pc, #300]	; (b6430 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b6302:	4293      	cmp	r3, r2
   b6304:	d15c      	bne.n	b63c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b6306:	494b      	ldr	r1, [pc, #300]	; (b6434 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b6308:	2204      	movs	r2, #4
   b630a:	4620      	mov	r0, r4
   b630c:	f7ff fee9 	bl	b60e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b6310:	21d9      	movs	r1, #217	; 0xd9
   b6312:	4620      	mov	r0, r4
   b6314:	f7ff fe76 	bl	b6004 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b6318:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b631c:	2b01      	cmp	r3, #1
   b631e:	bf0c      	ite	eq
   b6320:	2122      	moveq	r1, #34	; 0x22
   b6322:	21f1      	movne	r1, #241	; 0xf1
   b6324:	4620      	mov	r0, r4
   b6326:	f7ff fe6d 	bl	b6004 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b632a:	4620      	mov	r0, r4
   b632c:	4942      	ldr	r1, [pc, #264]	; (b6438 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b632e:	2206      	movs	r2, #6
   b6330:	f7ff fed7 	bl	b60e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b6334:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6336:	2800      	cmp	r0, #0
   b6338:	d063      	beq.n	b6402 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b633a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b633c:	f001 f9cc 	bl	b76d8 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b6340:	2001      	movs	r0, #1
   b6342:	e76b      	b.n	b621c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6344:	b26d      	sxtb	r5, r5
   b6346:	e78e      	b.n	b6266 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b6348:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b634c:	2101      	movs	r1, #1
   b634e:	b280      	uxth	r0, r0
   b6350:	f001 fdd4 	bl	b7efc <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b6354:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6358:	2101      	movs	r1, #1
   b635a:	b280      	uxth	r0, r0
   b635c:	f001 fdce 	bl	b7efc <pinMode>
    SSD1306_DESELECT
   b6360:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6364:	2101      	movs	r1, #1
   b6366:	b280      	uxth	r0, r0
   b6368:	f001 fdd9 	bl	b7f1e <digitalWrite>
    if(spi) { // Hardware SPI
   b636c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b636e:	b13d      	cbz	r5, b6380 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b6370:	f1b8 0f00 	cmp.w	r8, #0
   b6374:	f43f af7e 	beq.w	b6274 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b6378:	4628      	mov	r0, r5
   b637a:	f000 fd31 	bl	b6de0 <_ZN8SPIClass5beginEv>
   b637e:	e779      	b.n	b6274 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b6380:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6384:	2101      	movs	r1, #1
   b6386:	b280      	uxth	r0, r0
   b6388:	f001 fdb8 	bl	b7efc <pinMode>
      pinMode(clkPin , OUTPUT);
   b638c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6390:	2101      	movs	r1, #1
   b6392:	b280      	uxth	r0, r0
   b6394:	f001 fdb2 	bl	b7efc <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b6398:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b639c:	4629      	mov	r1, r5
   b639e:	b280      	uxth	r0, r0
   b63a0:	f001 fdbd 	bl	b7f1e <digitalWrite>
   b63a4:	e766      	b.n	b6274 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b63a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b63a8:	b118      	cbz	r0, b63b2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b63aa:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b63ae:	f000 fd45 	bl	b6e3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b63b2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b63b6:	2100      	movs	r1, #0
   b63b8:	b280      	uxth	r0, r0
   b63ba:	f001 fdb0 	bl	b7f1e <digitalWrite>
   b63be:	e780      	b.n	b62c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b63c0:	4a1e      	ldr	r2, [pc, #120]	; (b643c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b63c2:	4293      	cmp	r3, r2
   b63c4:	d10e      	bne.n	b63e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b63c6:	491e      	ldr	r1, [pc, #120]	; (b6440 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b63c8:	2203      	movs	r2, #3
   b63ca:	4620      	mov	r0, r4
   b63cc:	f7ff fe89 	bl	b60e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b63d0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b63d4:	2b01      	cmp	r3, #1
   b63d6:	bf0c      	ite	eq
   b63d8:	219f      	moveq	r1, #159	; 0x9f
   b63da:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b63dc:	4620      	mov	r0, r4
   b63de:	f7ff fe11 	bl	b6004 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b63e2:	e795      	b.n	b6310 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b63e4:	4a17      	ldr	r2, [pc, #92]	; (b6444 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b63e6:	4293      	cmp	r3, r2
   b63e8:	d192      	bne.n	b6310 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b63ea:	4917      	ldr	r1, [pc, #92]	; (b6448 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b63ec:	2203      	movs	r2, #3
   b63ee:	4620      	mov	r0, r4
   b63f0:	f7ff fe77 	bl	b60e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b63f4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b63f8:	2b01      	cmp	r3, #1
   b63fa:	bf0c      	ite	eq
   b63fc:	2110      	moveq	r1, #16
   b63fe:	21af      	movne	r1, #175	; 0xaf
   b6400:	e7ec      	b.n	b63dc <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b6402:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6406:	2101      	movs	r1, #1
   b6408:	b280      	uxth	r0, r0
   b640a:	f001 fd88 	bl	b7f1e <digitalWrite>
   b640e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6410:	2800      	cmp	r0, #0
   b6412:	d095      	beq.n	b6340 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b6414:	f000 fcf8 	bl	b6e08 <_ZN8SPIClass14endTransactionEv>
   b6418:	e792      	b.n	b6340 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b641a:	bf00      	nop
   b641c:	000b8e7c 	.word	0x000b8e7c
   b6420:	000b8bbc 	.word	0x000b8bbc
   b6424:	000b90c4 	.word	0x000b90c4
   b6428:	000b90c8 	.word	0x000b90c8
   b642c:	000b90cc 	.word	0x000b90cc
   b6430:	00200080 	.word	0x00200080
   b6434:	000b90d6 	.word	0x000b90d6
   b6438:	000b90d0 	.word	0x000b90d0
   b643c:	00400080 	.word	0x00400080
   b6440:	000b90da 	.word	0x000b90da
   b6444:	00100060 	.word	0x00100060
   b6448:	000b90dd 	.word	0x000b90dd

000b644c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b644c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b644e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6450:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b6454:	db3d      	blt.n	b64d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6456:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b645a:	4294      	cmp	r4, r2
   b645c:	dd39      	ble.n	b64d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b645e:	2900      	cmp	r1, #0
      w += x;
   b6460:	bfbe      	ittt	lt
   b6462:	185b      	addlt	r3, r3, r1
   b6464:	b21b      	sxthlt	r3, r3
      x  = 0;
   b6466:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b6468:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b646c:	18ce      	adds	r6, r1, r3
   b646e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b6470:	bfc4      	itt	gt
   b6472:	1a63      	subgt	r3, r4, r1
   b6474:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b6476:	2b00      	cmp	r3, #0
   b6478:	dd2b      	ble.n	b64d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b647a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b647c:	10d6      	asrs	r6, r2, #3
   b647e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b6482:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b6484:	f002 0007 	and.w	r0, r2, #7
   b6488:	2201      	movs	r2, #1
   b648a:	4082      	lsls	r2, r0
      switch(color) {
   b648c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b648e:	b2d2      	uxtb	r2, r2
      switch(color) {
   b6490:	d016      	beq.n	b64c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b6492:	2d02      	cmp	r5, #2
   b6494:	d00b      	beq.n	b64ae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b6496:	b9e5      	cbnz	r5, b64d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b6498:	43d2      	mvns	r2, r2
   b649a:	b2d2      	uxtb	r2, r2
   b649c:	440b      	add	r3, r1
   b649e:	4299      	cmp	r1, r3
   b64a0:	d017      	beq.n	b64d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b64a2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b64a6:	4010      	ands	r0, r2
   b64a8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b64ac:	e7f7      	b.n	b649e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b64ae:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b64b0:	4299      	cmp	r1, r3
   b64b2:	d00e      	beq.n	b64d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b64b4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b64b8:	4050      	eors	r0, r2
   b64ba:	f801 0c01 	strb.w	r0, [r1, #-1]
   b64be:	e7f7      	b.n	b64b0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b64c0:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b64c2:	4299      	cmp	r1, r3
   b64c4:	d005      	beq.n	b64d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b64c6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b64ca:	4310      	orrs	r0, r2
   b64cc:	f801 0c01 	strb.w	r0, [r1, #-1]
   b64d0:	e7f7      	b.n	b64c2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b64d2:	bd70      	pop	{r4, r5, r6, pc}

000b64d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b64d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b64d6:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b64d8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b64dc:	db76      	blt.n	b65cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b64de:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b64e2:	42b1      	cmp	r1, r6
   b64e4:	da72      	bge.n	b65cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b64e6:	2a00      	cmp	r2, #0
      __h += __y;
   b64e8:	bfbe      	ittt	lt
   b64ea:	189b      	addlt	r3, r3, r2
   b64ec:	b21b      	sxthlt	r3, r3
      __y = 0;
   b64ee:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b64f0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b64f4:	18d7      	adds	r7, r2, r3
   b64f6:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b64f8:	bfc4      	itt	gt
   b64fa:	1aa3      	subgt	r3, r4, r2
   b64fc:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b64fe:	2b00      	cmp	r3, #0
   b6500:	dd64      	ble.n	b65cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6502:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b6506:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b6508:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b650c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b6510:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6512:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b6516:	d023      	beq.n	b6560 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b6518:	f1c2 0208 	rsb	r2, r2, #8
   b651c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b651e:	492d      	ldr	r1, [pc, #180]	; (b65d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b6520:	4293      	cmp	r3, r2
   b6522:	bf3c      	itt	cc
   b6524:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b6528:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b652c:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b652e:	bf3c      	itt	cc
   b6530:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b6534:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b6538:	2d01      	cmp	r5, #1
   b653a:	d007      	beq.n	b654c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b653c:	2d02      	cmp	r5, #2
   b653e:	d02e      	beq.n	b659e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b6540:	b94d      	cbnz	r5, b6556 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b6542:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6546:	ea2c 0101 	bic.w	r1, ip, r1
   b654a:	e003      	b.n	b6554 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b654c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6550:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b6554:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b6556:	4293      	cmp	r3, r2
   b6558:	d338      	bcc.n	b65cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b655a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b655e:	440c      	add	r4, r1
        h -= mod;
   b6560:	1a9a      	subs	r2, r3, r2
   b6562:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b6564:	2a07      	cmp	r2, #7
   b6566:	d90e      	bls.n	b6586 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b6568:	2d02      	cmp	r5, #2
   b656a:	d11d      	bne.n	b65a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b656c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b656e:	7821      	ldrb	r1, [r4, #0]
   b6570:	43c9      	mvns	r1, r1
   b6572:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b6574:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b6576:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b657a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b657c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b657e:	440c      	add	r4, r1
            } while(h >= 8);
   b6580:	d8f5      	bhi.n	b656e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b6582:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b6586:	b30a      	cbz	r2, b65cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6588:	4b13      	ldr	r3, [pc, #76]	; (b65d8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b658a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b658c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b658e:	d01a      	beq.n	b65c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b6590:	2d02      	cmp	r5, #2
   b6592:	d01c      	beq.n	b65ce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b6594:	b9d5      	cbnz	r5, b65cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b6596:	7822      	ldrb	r2, [r4, #0]
   b6598:	ea22 0303 	bic.w	r3, r2, r3
   b659c:	e015      	b.n	b65ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b659e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b65a2:	ea81 010c 	eor.w	r1, r1, ip
   b65a6:	e7d5      	b.n	b6554 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b65a8:	1e29      	subs	r1, r5, #0
   b65aa:	bf18      	it	ne
   b65ac:	2101      	movne	r1, #1
   b65ae:	4249      	negs	r1, r1
   b65b0:	b2c9      	uxtb	r1, r1
   b65b2:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b65b4:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b65b6:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b65b8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b65bc:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b65be:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b65c0:	4434      	add	r4, r6
            } while(h >= 8);
   b65c2:	d8f7      	bhi.n	b65b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b65c4:	e7dd      	b.n	b6582 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b65c6:	7822      	ldrb	r2, [r4, #0]
   b65c8:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b65ca:	7023      	strb	r3, [r4, #0]
}
   b65cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b65ce:	7822      	ldrb	r2, [r4, #0]
   b65d0:	4053      	eors	r3, r2
   b65d2:	e7fa      	b.n	b65ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b65d4:	000b90b4 	.word	0x000b90b4
   b65d8:	000b90bc 	.word	0x000b90bc

000b65dc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b65dc:	b470      	push	{r4, r5, r6}
   b65de:	4614      	mov	r4, r2
  switch(rotation) {
   b65e0:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b65e2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b65e6:	2a02      	cmp	r2, #2
   b65e8:	d00d      	beq.n	b6606 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b65ea:	2a03      	cmp	r2, #3
   b65ec:	d018      	beq.n	b6620 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b65ee:	2a01      	cmp	r2, #1
   b65f0:	d111      	bne.n	b6616 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b65f2:	8902      	ldrh	r2, [r0, #8]
   b65f4:	43e4      	mvns	r4, r4
   b65f6:	4414      	add	r4, r2
   b65f8:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b65fa:	9603      	str	r6, [sp, #12]
   b65fc:	460a      	mov	r2, r1
   b65fe:	4621      	mov	r1, r4
}
   b6600:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6602:	f7ff bf67 	b.w	b64d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b6606:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b6608:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b660a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b660c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b660e:	4414      	add	r4, r2
    x -= (w-1);
   b6610:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b6612:	b224      	sxth	r4, r4
    x -= (w-1);
   b6614:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b6616:	9603      	str	r6, [sp, #12]
   b6618:	4622      	mov	r2, r4
}
   b661a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b661c:	f7ff bf16 	b.w	b644c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b6620:	8945      	ldrh	r5, [r0, #10]
   b6622:	4419      	add	r1, r3
   b6624:	1a69      	subs	r1, r5, r1
   b6626:	b209      	sxth	r1, r1
    break;
   b6628:	e7e7      	b.n	b65fa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b662a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b662a:	b430      	push	{r4, r5}
   b662c:	4614      	mov	r4, r2
  switch(rotation) {
   b662e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6630:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b6634:	2a02      	cmp	r2, #2
   b6636:	d00d      	beq.n	b6654 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b6638:	2a03      	cmp	r2, #3
   b663a:	d018      	beq.n	b666e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b663c:	2a01      	cmp	r2, #1
   b663e:	d111      	bne.n	b6664 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b6640:	18e2      	adds	r2, r4, r3
   b6642:	8904      	ldrh	r4, [r0, #8]
   b6644:	1aa4      	subs	r4, r4, r2
   b6646:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6648:	9502      	str	r5, [sp, #8]
   b664a:	460a      	mov	r2, r1
   b664c:	4621      	mov	r1, r4
}
   b664e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6650:	f7ff befc 	b.w	b644c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b6654:	8902      	ldrh	r2, [r0, #8]
   b6656:	43c9      	mvns	r1, r1
   b6658:	4411      	add	r1, r2
    y -= (h-1);
   b665a:	18e2      	adds	r2, r4, r3
   b665c:	8944      	ldrh	r4, [r0, #10]
   b665e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b6660:	b209      	sxth	r1, r1
    y -= (h-1);
   b6662:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b6664:	9502      	str	r5, [sp, #8]
   b6666:	4622      	mov	r2, r4
}
   b6668:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b666a:	f7ff bf33 	b.w	b64d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b666e:	8942      	ldrh	r2, [r0, #10]
   b6670:	43c9      	mvns	r1, r1
   b6672:	4411      	add	r1, r2
   b6674:	b209      	sxth	r1, r1
    break;
   b6676:	e7e7      	b.n	b6648 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b6678 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b6678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b667c:	4604      	mov	r4, r0
  TRANSACTION_START
   b667e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b6680:	2800      	cmp	r0, #0
   b6682:	d042      	beq.n	b670a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b6684:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6686:	f001 f827 	bl	b76d8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b668a:	4947      	ldr	r1, [pc, #284]	; (b67a8 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b668c:	2205      	movs	r2, #5
   b668e:	4620      	mov	r0, r4
   b6690:	f7ff fd27 	bl	b60e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6694:	8921      	ldrh	r1, [r4, #8]
   b6696:	3901      	subs	r1, #1
   b6698:	4620      	mov	r0, r4
   b669a:	b2c9      	uxtb	r1, r1
   b669c:	f7ff fcb2 	bl	b6004 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b66a0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b66a4:	1dde      	adds	r6, r3, #7
   b66a6:	bf48      	it	mi
   b66a8:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b66ac:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b66b0:	8923      	ldrh	r3, [r4, #8]
   b66b2:	10f6      	asrs	r6, r6, #3
   b66b4:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b66b8:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b66bc:	2800      	cmp	r0, #0
   b66be:	d03a      	beq.n	b6736 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b66c0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b66c4:	f001 f816 	bl	b76f4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b66c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b66ca:	6803      	ldr	r3, [r0, #0]
   b66cc:	2140      	movs	r1, #64	; 0x40
   b66ce:	689b      	ldr	r3, [r3, #8]
   b66d0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b66d2:	2701      	movs	r7, #1
    while(count--) {
   b66d4:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b66d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b66d8:	d024      	beq.n	b6724 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b66da:	2f1f      	cmp	r7, #31
   b66dc:	d90c      	bls.n	b66f8 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b66de:	f001 f810 	bl	b7702 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b66e2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b66e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b66e8:	f001 f804 	bl	b76f4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b66ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b66ee:	6803      	ldr	r3, [r0, #0]
   b66f0:	2140      	movs	r1, #64	; 0x40
   b66f2:	689b      	ldr	r3, [r3, #8]
   b66f4:	4798      	blx	r3
        bytesOut = 1;
   b66f6:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b66f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b66fa:	f815 1b01 	ldrb.w	r1, [r5], #1
   b66fe:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6700:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b6702:	689b      	ldr	r3, [r3, #8]
   b6704:	4798      	blx	r3
      bytesOut++;
   b6706:	b2ff      	uxtb	r7, r7
    while(count--) {
   b6708:	e7e4      	b.n	b66d4 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b670a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b670c:	b118      	cbz	r0, b6716 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b670e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6712:	f000 fb93 	bl	b6e3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6716:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b671a:	2100      	movs	r1, #0
   b671c:	b280      	uxth	r0, r0
   b671e:	f001 fbfe 	bl	b7f1e <digitalWrite>
   b6722:	e7b2      	b.n	b668a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b6724:	f000 ffed 	bl	b7702 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b6728:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b672a:	b378      	cbz	r0, b678c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b672c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b672e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6732:	f000 bfd1 	b.w	b76d8 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b6736:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b673a:	2101      	movs	r1, #1
   b673c:	b280      	uxth	r0, r0
   b673e:	f001 fbee 	bl	b7f1e <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b6742:	42ae      	cmp	r6, r5
   b6744:	d0f0      	beq.n	b6728 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b6746:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b6748:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b674c:	b118      	cbz	r0, b6756 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b674e:	4649      	mov	r1, r9
   b6750:	f000 fbe2 	bl	b6f18 <_ZN8SPIClass8transferEh>
   b6754:	e7f5      	b.n	b6742 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b6756:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6758:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b675c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6760:	ea09 0108 	and.w	r1, r9, r8
   b6764:	b280      	uxth	r0, r0
   b6766:	f001 fbda 	bl	b7f1e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b676a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b676e:	2101      	movs	r1, #1
   b6770:	b280      	uxth	r0, r0
   b6772:	f001 fbd4 	bl	b7f1e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6776:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b677a:	2100      	movs	r1, #0
   b677c:	b280      	uxth	r0, r0
   b677e:	f001 fbce 	bl	b7f1e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6782:	3f01      	subs	r7, #1
   b6784:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6788:	d1e8      	bne.n	b675c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b678a:	e7da      	b.n	b6742 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b678c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6790:	2101      	movs	r1, #1
   b6792:	b280      	uxth	r0, r0
   b6794:	f001 fbc3 	bl	b7f1e <digitalWrite>
   b6798:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b679a:	b118      	cbz	r0, b67a4 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b679c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b67a0:	f000 bb32 	b.w	b6e08 <_ZN8SPIClass14endTransactionEv>
}
   b67a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b67a8:	000b90e0 	.word	0x000b90e0

000b67ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b67ac:	b508      	push	{r3, lr}
   b67ae:	4b02      	ldr	r3, [pc, #8]	; (b67b8 <netdb_freeaddrinfo+0xc>)
   b67b0:	681b      	ldr	r3, [r3, #0]
   b67b2:	689b      	ldr	r3, [r3, #8]
   b67b4:	9301      	str	r3, [sp, #4]
   b67b6:	bd08      	pop	{r3, pc}
   b67b8:	00030268 	.word	0x00030268

000b67bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b67bc:	b508      	push	{r3, lr}
   b67be:	4b02      	ldr	r3, [pc, #8]	; (b67c8 <netdb_getaddrinfo+0xc>)
   b67c0:	681b      	ldr	r3, [r3, #0]
   b67c2:	68db      	ldr	r3, [r3, #12]
   b67c4:	9301      	str	r3, [sp, #4]
   b67c6:	bd08      	pop	{r3, pc}
   b67c8:	00030268 	.word	0x00030268

000b67cc <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
   b67cc:	b508      	push	{r3, lr}
   b67ce:	4b02      	ldr	r3, [pc, #8]	; (b67d8 <hal_pin_map+0xc>)
   b67d0:	681b      	ldr	r3, [r3, #0]
   b67d2:	681b      	ldr	r3, [r3, #0]
   b67d4:	9301      	str	r3, [sp, #4]
   b67d6:	bd08      	pop	{r3, pc}
   b67d8:	0003022c 	.word	0x0003022c

000b67dc <hal_gpio_mode>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b67dc:	b508      	push	{r3, lr}
   b67de:	4b02      	ldr	r3, [pc, #8]	; (b67e8 <hal_gpio_mode+0xc>)
   b67e0:	681b      	ldr	r3, [r3, #0]
   b67e2:	689b      	ldr	r3, [r3, #8]
   b67e4:	9301      	str	r3, [sp, #4]
   b67e6:	bd08      	pop	{r3, pc}
   b67e8:	0003022c 	.word	0x0003022c

000b67ec <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b67ec:	b508      	push	{r3, lr}
   b67ee:	4b02      	ldr	r3, [pc, #8]	; (b67f8 <hal_gpio_get_mode+0xc>)
   b67f0:	681b      	ldr	r3, [r3, #0]
   b67f2:	68db      	ldr	r3, [r3, #12]
   b67f4:	9301      	str	r3, [sp, #4]
   b67f6:	bd08      	pop	{r3, pc}
   b67f8:	0003022c 	.word	0x0003022c

000b67fc <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b67fc:	b508      	push	{r3, lr}
   b67fe:	4b02      	ldr	r3, [pc, #8]	; (b6808 <hal_gpio_write+0xc>)
   b6800:	681b      	ldr	r3, [r3, #0]
   b6802:	691b      	ldr	r3, [r3, #16]
   b6804:	9301      	str	r3, [sp, #4]
   b6806:	bd08      	pop	{r3, pc}
   b6808:	0003022c 	.word	0x0003022c

000b680c <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b680c:	b508      	push	{r3, lr}
   b680e:	4b02      	ldr	r3, [pc, #8]	; (b6818 <hal_gpio_read+0xc>)
   b6810:	681b      	ldr	r3, [r3, #0]
   b6812:	695b      	ldr	r3, [r3, #20]
   b6814:	9301      	str	r3, [sp, #4]
   b6816:	bd08      	pop	{r3, pc}
   b6818:	0003022c 	.word	0x0003022c

000b681c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b681c:	b508      	push	{r3, lr}
   b681e:	4b02      	ldr	r3, [pc, #8]	; (b6828 <if_index_to_name+0xc>)
   b6820:	681b      	ldr	r3, [r3, #0]
   b6822:	695b      	ldr	r3, [r3, #20]
   b6824:	9301      	str	r3, [sp, #4]
   b6826:	bd08      	pop	{r3, pc}
   b6828:	0003026c 	.word	0x0003026c

000b682c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b682c:	b508      	push	{r3, lr}
   b682e:	4b02      	ldr	r3, [pc, #8]	; (b6838 <HAL_RNG_GetRandomNumber+0xc>)
   b6830:	681b      	ldr	r3, [r3, #0]
   b6832:	685b      	ldr	r3, [r3, #4]
   b6834:	9301      	str	r3, [sp, #4]
   b6836:	bd08      	pop	{r3, pc}
   b6838:	00030218 	.word	0x00030218

000b683c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b683c:	b508      	push	{r3, lr}
   b683e:	4b02      	ldr	r3, [pc, #8]	; (b6848 <HAL_Delay_Microseconds+0xc>)
   b6840:	681b      	ldr	r3, [r3, #0]
   b6842:	68db      	ldr	r3, [r3, #12]
   b6844:	9301      	str	r3, [sp, #4]
   b6846:	bd08      	pop	{r3, pc}
   b6848:	00030218 	.word	0x00030218

000b684c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b684c:	b508      	push	{r3, lr}
   b684e:	4b02      	ldr	r3, [pc, #8]	; (b6858 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b6850:	681b      	ldr	r3, [r3, #0]
   b6852:	691b      	ldr	r3, [r3, #16]
   b6854:	9301      	str	r3, [sp, #4]
   b6856:	bd08      	pop	{r3, pc}
   b6858:	00030218 	.word	0x00030218

000b685c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b685c:	b508      	push	{r3, lr}
   b685e:	4b02      	ldr	r3, [pc, #8]	; (b6868 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6860:	681b      	ldr	r3, [r3, #0]
   b6862:	695b      	ldr	r3, [r3, #20]
   b6864:	9301      	str	r3, [sp, #4]
   b6866:	bd08      	pop	{r3, pc}
   b6868:	00030218 	.word	0x00030218

000b686c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b686c:	b508      	push	{r3, lr}
   b686e:	4b02      	ldr	r3, [pc, #8]	; (b6878 <os_mutex_create+0xc>)
   b6870:	681b      	ldr	r3, [r3, #0]
   b6872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6874:	9301      	str	r3, [sp, #4]
   b6876:	bd08      	pop	{r3, pc}
   b6878:	00030248 	.word	0x00030248

000b687c <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b687c:	b508      	push	{r3, lr}
   b687e:	4b02      	ldr	r3, [pc, #8]	; (b6888 <os_mutex_destroy+0xc>)
   b6880:	681b      	ldr	r3, [r3, #0]
   b6882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6884:	9301      	str	r3, [sp, #4]
   b6886:	bd08      	pop	{r3, pc}
   b6888:	00030248 	.word	0x00030248

000b688c <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b688c:	b508      	push	{r3, lr}
   b688e:	4b02      	ldr	r3, [pc, #8]	; (b6898 <os_mutex_lock+0xc>)
   b6890:	681b      	ldr	r3, [r3, #0]
   b6892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6894:	9301      	str	r3, [sp, #4]
   b6896:	bd08      	pop	{r3, pc}
   b6898:	00030248 	.word	0x00030248

000b689c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b689c:	b508      	push	{r3, lr}
   b689e:	4b02      	ldr	r3, [pc, #8]	; (b68a8 <os_mutex_unlock+0xc>)
   b68a0:	681b      	ldr	r3, [r3, #0]
   b68a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b68a4:	9301      	str	r3, [sp, #4]
   b68a6:	bd08      	pop	{r3, pc}
   b68a8:	00030248 	.word	0x00030248

000b68ac <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b68ac:	b508      	push	{r3, lr}
   b68ae:	4b02      	ldr	r3, [pc, #8]	; (b68b8 <os_mutex_recursive_create+0xc>)
   b68b0:	681b      	ldr	r3, [r3, #0]
   b68b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b68b4:	9301      	str	r3, [sp, #4]
   b68b6:	bd08      	pop	{r3, pc}
   b68b8:	00030248 	.word	0x00030248

000b68bc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b68bc:	b508      	push	{r3, lr}
   b68be:	4b02      	ldr	r3, [pc, #8]	; (b68c8 <inet_inet_ntop+0xc>)
   b68c0:	681b      	ldr	r3, [r3, #0]
   b68c2:	695b      	ldr	r3, [r3, #20]
   b68c4:	9301      	str	r3, [sp, #4]
   b68c6:	bd08      	pop	{r3, pc}
   b68c8:	00030264 	.word	0x00030264

000b68cc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b68cc:	b508      	push	{r3, lr}
   b68ce:	4b02      	ldr	r3, [pc, #8]	; (b68d8 <inet_htonl+0xc>)
   b68d0:	681b      	ldr	r3, [r3, #0]
   b68d2:	6a1b      	ldr	r3, [r3, #32]
   b68d4:	9301      	str	r3, [sp, #4]
   b68d6:	bd08      	pop	{r3, pc}
   b68d8:	00030264 	.word	0x00030264

000b68dc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b68dc:	b508      	push	{r3, lr}
   b68de:	4b02      	ldr	r3, [pc, #8]	; (b68e8 <inet_htons+0xc>)
   b68e0:	681b      	ldr	r3, [r3, #0]
   b68e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b68e4:	9301      	str	r3, [sp, #4]
   b68e6:	bd08      	pop	{r3, pc}
   b68e8:	00030264 	.word	0x00030264

000b68ec <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b68ec:	b508      	push	{r3, lr}
   b68ee:	4b02      	ldr	r3, [pc, #8]	; (b68f8 <hal_usart_write+0xc>)
   b68f0:	681b      	ldr	r3, [r3, #0]
   b68f2:	68db      	ldr	r3, [r3, #12]
   b68f4:	9301      	str	r3, [sp, #4]
   b68f6:	bd08      	pop	{r3, pc}
   b68f8:	0003023c 	.word	0x0003023c

000b68fc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b68fc:	b508      	push	{r3, lr}
   b68fe:	4b02      	ldr	r3, [pc, #8]	; (b6908 <hal_usart_available+0xc>)
   b6900:	681b      	ldr	r3, [r3, #0]
   b6902:	691b      	ldr	r3, [r3, #16]
   b6904:	9301      	str	r3, [sp, #4]
   b6906:	bd08      	pop	{r3, pc}
   b6908:	0003023c 	.word	0x0003023c

000b690c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b690c:	b508      	push	{r3, lr}
   b690e:	4b02      	ldr	r3, [pc, #8]	; (b6918 <hal_usart_read+0xc>)
   b6910:	681b      	ldr	r3, [r3, #0]
   b6912:	695b      	ldr	r3, [r3, #20]
   b6914:	9301      	str	r3, [sp, #4]
   b6916:	bd08      	pop	{r3, pc}
   b6918:	0003023c 	.word	0x0003023c

000b691c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b691c:	b508      	push	{r3, lr}
   b691e:	4b02      	ldr	r3, [pc, #8]	; (b6928 <hal_usart_peek+0xc>)
   b6920:	681b      	ldr	r3, [r3, #0]
   b6922:	699b      	ldr	r3, [r3, #24]
   b6924:	9301      	str	r3, [sp, #4]
   b6926:	bd08      	pop	{r3, pc}
   b6928:	0003023c 	.word	0x0003023c

000b692c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b692c:	b508      	push	{r3, lr}
   b692e:	4b02      	ldr	r3, [pc, #8]	; (b6938 <hal_usart_flush+0xc>)
   b6930:	681b      	ldr	r3, [r3, #0]
   b6932:	69db      	ldr	r3, [r3, #28]
   b6934:	9301      	str	r3, [sp, #4]
   b6936:	bd08      	pop	{r3, pc}
   b6938:	0003023c 	.word	0x0003023c

000b693c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b693c:	b508      	push	{r3, lr}
   b693e:	4b02      	ldr	r3, [pc, #8]	; (b6948 <hal_usart_is_enabled+0xc>)
   b6940:	681b      	ldr	r3, [r3, #0]
   b6942:	6a1b      	ldr	r3, [r3, #32]
   b6944:	9301      	str	r3, [sp, #4]
   b6946:	bd08      	pop	{r3, pc}
   b6948:	0003023c 	.word	0x0003023c

000b694c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b694c:	b508      	push	{r3, lr}
   b694e:	4b02      	ldr	r3, [pc, #8]	; (b6958 <hal_usart_available_data_for_write+0xc>)
   b6950:	681b      	ldr	r3, [r3, #0]
   b6952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6954:	9301      	str	r3, [sp, #4]
   b6956:	bd08      	pop	{r3, pc}
   b6958:	0003023c 	.word	0x0003023c

000b695c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b695c:	b508      	push	{r3, lr}
   b695e:	4b02      	ldr	r3, [pc, #8]	; (b6968 <hal_usart_init_ex+0xc>)
   b6960:	681b      	ldr	r3, [r3, #0]
   b6962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6964:	9301      	str	r3, [sp, #4]
   b6966:	bd08      	pop	{r3, pc}
   b6968:	0003023c 	.word	0x0003023c

000b696c <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b696c:	b508      	push	{r3, lr}
   b696e:	4b02      	ldr	r3, [pc, #8]	; (b6978 <hal_i2c_set_speed+0xc>)
   b6970:	681b      	ldr	r3, [r3, #0]
   b6972:	681b      	ldr	r3, [r3, #0]
   b6974:	9301      	str	r3, [sp, #4]
   b6976:	bd08      	pop	{r3, pc}
   b6978:	00030228 	.word	0x00030228

000b697c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b697c:	b508      	push	{r3, lr}
   b697e:	4b02      	ldr	r3, [pc, #8]	; (b6988 <hal_i2c_begin+0xc>)
   b6980:	681b      	ldr	r3, [r3, #0]
   b6982:	68db      	ldr	r3, [r3, #12]
   b6984:	9301      	str	r3, [sp, #4]
   b6986:	bd08      	pop	{r3, pc}
   b6988:	00030228 	.word	0x00030228

000b698c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b698c:	b508      	push	{r3, lr}
   b698e:	4b02      	ldr	r3, [pc, #8]	; (b6998 <hal_i2c_begin_transmission+0xc>)
   b6990:	681b      	ldr	r3, [r3, #0]
   b6992:	699b      	ldr	r3, [r3, #24]
   b6994:	9301      	str	r3, [sp, #4]
   b6996:	bd08      	pop	{r3, pc}
   b6998:	00030228 	.word	0x00030228

000b699c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b699c:	b508      	push	{r3, lr}
   b699e:	4b02      	ldr	r3, [pc, #8]	; (b69a8 <hal_i2c_end_transmission+0xc>)
   b69a0:	681b      	ldr	r3, [r3, #0]
   b69a2:	69db      	ldr	r3, [r3, #28]
   b69a4:	9301      	str	r3, [sp, #4]
   b69a6:	bd08      	pop	{r3, pc}
   b69a8:	00030228 	.word	0x00030228

000b69ac <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b69ac:	b508      	push	{r3, lr}
   b69ae:	4b02      	ldr	r3, [pc, #8]	; (b69b8 <hal_i2c_write+0xc>)
   b69b0:	681b      	ldr	r3, [r3, #0]
   b69b2:	6a1b      	ldr	r3, [r3, #32]
   b69b4:	9301      	str	r3, [sp, #4]
   b69b6:	bd08      	pop	{r3, pc}
   b69b8:	00030228 	.word	0x00030228

000b69bc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b69bc:	b508      	push	{r3, lr}
   b69be:	4b02      	ldr	r3, [pc, #8]	; (b69c8 <hal_i2c_available+0xc>)
   b69c0:	681b      	ldr	r3, [r3, #0]
   b69c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b69c4:	9301      	str	r3, [sp, #4]
   b69c6:	bd08      	pop	{r3, pc}
   b69c8:	00030228 	.word	0x00030228

000b69cc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b69cc:	b508      	push	{r3, lr}
   b69ce:	4b02      	ldr	r3, [pc, #8]	; (b69d8 <hal_i2c_read+0xc>)
   b69d0:	681b      	ldr	r3, [r3, #0]
   b69d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b69d4:	9301      	str	r3, [sp, #4]
   b69d6:	bd08      	pop	{r3, pc}
   b69d8:	00030228 	.word	0x00030228

000b69dc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b69dc:	b508      	push	{r3, lr}
   b69de:	4b02      	ldr	r3, [pc, #8]	; (b69e8 <hal_i2c_peek+0xc>)
   b69e0:	681b      	ldr	r3, [r3, #0]
   b69e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b69e4:	9301      	str	r3, [sp, #4]
   b69e6:	bd08      	pop	{r3, pc}
   b69e8:	00030228 	.word	0x00030228

000b69ec <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b69ec:	b508      	push	{r3, lr}
   b69ee:	4b02      	ldr	r3, [pc, #8]	; (b69f8 <hal_i2c_flush+0xc>)
   b69f0:	681b      	ldr	r3, [r3, #0]
   b69f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b69f4:	9301      	str	r3, [sp, #4]
   b69f6:	bd08      	pop	{r3, pc}
   b69f8:	00030228 	.word	0x00030228

000b69fc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b69fc:	b508      	push	{r3, lr}
   b69fe:	4b02      	ldr	r3, [pc, #8]	; (b6a08 <hal_i2c_is_enabled+0xc>)
   b6a00:	681b      	ldr	r3, [r3, #0]
   b6a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6a04:	9301      	str	r3, [sp, #4]
   b6a06:	bd08      	pop	{r3, pc}
   b6a08:	00030228 	.word	0x00030228

000b6a0c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6a0c:	b508      	push	{r3, lr}
   b6a0e:	4b02      	ldr	r3, [pc, #8]	; (b6a18 <hal_i2c_init+0xc>)
   b6a10:	681b      	ldr	r3, [r3, #0]
   b6a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a14:	9301      	str	r3, [sp, #4]
   b6a16:	bd08      	pop	{r3, pc}
   b6a18:	00030228 	.word	0x00030228

000b6a1c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6a1c:	b508      	push	{r3, lr}
   b6a1e:	4b02      	ldr	r3, [pc, #8]	; (b6a28 <sock_setsockopt+0xc>)
   b6a20:	681b      	ldr	r3, [r3, #0]
   b6a22:	699b      	ldr	r3, [r3, #24]
   b6a24:	9301      	str	r3, [sp, #4]
   b6a26:	bd08      	pop	{r3, pc}
   b6a28:	00030238 	.word	0x00030238

000b6a2c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6a2c:	b508      	push	{r3, lr}
   b6a2e:	4b02      	ldr	r3, [pc, #8]	; (b6a38 <sock_close+0xc>)
   b6a30:	681b      	ldr	r3, [r3, #0]
   b6a32:	69db      	ldr	r3, [r3, #28]
   b6a34:	9301      	str	r3, [sp, #4]
   b6a36:	bd08      	pop	{r3, pc}
   b6a38:	00030238 	.word	0x00030238

000b6a3c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6a3c:	b508      	push	{r3, lr}
   b6a3e:	4b02      	ldr	r3, [pc, #8]	; (b6a48 <sock_connect+0xc>)
   b6a40:	681b      	ldr	r3, [r3, #0]
   b6a42:	6a1b      	ldr	r3, [r3, #32]
   b6a44:	9301      	str	r3, [sp, #4]
   b6a46:	bd08      	pop	{r3, pc}
   b6a48:	00030238 	.word	0x00030238

000b6a4c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6a4c:	b508      	push	{r3, lr}
   b6a4e:	4b02      	ldr	r3, [pc, #8]	; (b6a58 <sock_recv+0xc>)
   b6a50:	681b      	ldr	r3, [r3, #0]
   b6a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a54:	9301      	str	r3, [sp, #4]
   b6a56:	bd08      	pop	{r3, pc}
   b6a58:	00030238 	.word	0x00030238

000b6a5c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6a5c:	b508      	push	{r3, lr}
   b6a5e:	4b02      	ldr	r3, [pc, #8]	; (b6a68 <sock_send+0xc>)
   b6a60:	681b      	ldr	r3, [r3, #0]
   b6a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6a64:	9301      	str	r3, [sp, #4]
   b6a66:	bd08      	pop	{r3, pc}
   b6a68:	00030238 	.word	0x00030238

000b6a6c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6a6c:	b508      	push	{r3, lr}
   b6a6e:	4b02      	ldr	r3, [pc, #8]	; (b6a78 <sock_socket+0xc>)
   b6a70:	681b      	ldr	r3, [r3, #0]
   b6a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6a74:	9301      	str	r3, [sp, #4]
   b6a76:	bd08      	pop	{r3, pc}
   b6a78:	00030238 	.word	0x00030238

000b6a7c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6a7c:	b508      	push	{r3, lr}
   b6a7e:	4b02      	ldr	r3, [pc, #8]	; (b6a88 <hal_spi_begin+0xc>)
   b6a80:	681b      	ldr	r3, [r3, #0]
   b6a82:	681b      	ldr	r3, [r3, #0]
   b6a84:	9301      	str	r3, [sp, #4]
   b6a86:	bd08      	pop	{r3, pc}
   b6a88:	00030230 	.word	0x00030230

000b6a8c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6a8c:	b508      	push	{r3, lr}
   b6a8e:	4b02      	ldr	r3, [pc, #8]	; (b6a98 <hal_spi_transfer+0xc>)
   b6a90:	681b      	ldr	r3, [r3, #0]
   b6a92:	695b      	ldr	r3, [r3, #20]
   b6a94:	9301      	str	r3, [sp, #4]
   b6a96:	bd08      	pop	{r3, pc}
   b6a98:	00030230 	.word	0x00030230

000b6a9c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6a9c:	b508      	push	{r3, lr}
   b6a9e:	4b02      	ldr	r3, [pc, #8]	; (b6aa8 <hal_spi_init+0xc>)
   b6aa0:	681b      	ldr	r3, [r3, #0]
   b6aa2:	69db      	ldr	r3, [r3, #28]
   b6aa4:	9301      	str	r3, [sp, #4]
   b6aa6:	bd08      	pop	{r3, pc}
   b6aa8:	00030230 	.word	0x00030230

000b6aac <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6aac:	b508      	push	{r3, lr}
   b6aae:	4b02      	ldr	r3, [pc, #8]	; (b6ab8 <hal_spi_is_enabled+0xc>)
   b6ab0:	681b      	ldr	r3, [r3, #0]
   b6ab2:	6a1b      	ldr	r3, [r3, #32]
   b6ab4:	9301      	str	r3, [sp, #4]
   b6ab6:	bd08      	pop	{r3, pc}
   b6ab8:	00030230 	.word	0x00030230

000b6abc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6abc:	b508      	push	{r3, lr}
   b6abe:	4b02      	ldr	r3, [pc, #8]	; (b6ac8 <hal_spi_info+0xc>)
   b6ac0:	681b      	ldr	r3, [r3, #0]
   b6ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6ac4:	9301      	str	r3, [sp, #4]
   b6ac6:	bd08      	pop	{r3, pc}
   b6ac8:	00030230 	.word	0x00030230

000b6acc <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6acc:	b508      	push	{r3, lr}
   b6ace:	4b02      	ldr	r3, [pc, #8]	; (b6ad8 <hal_spi_set_settings+0xc>)
   b6ad0:	681b      	ldr	r3, [r3, #0]
   b6ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6ad4:	9301      	str	r3, [sp, #4]
   b6ad6:	bd08      	pop	{r3, pc}
   b6ad8:	00030230 	.word	0x00030230

000b6adc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6adc:	b508      	push	{r3, lr}
   b6ade:	4b02      	ldr	r3, [pc, #8]	; (b6ae8 <hal_spi_acquire+0xc>)
   b6ae0:	681b      	ldr	r3, [r3, #0]
   b6ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6ae4:	9301      	str	r3, [sp, #4]
   b6ae6:	bd08      	pop	{r3, pc}
   b6ae8:	00030230 	.word	0x00030230

000b6aec <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6aec:	b508      	push	{r3, lr}
   b6aee:	4b02      	ldr	r3, [pc, #8]	; (b6af8 <hal_spi_release+0xc>)
   b6af0:	681b      	ldr	r3, [r3, #0]
   b6af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6af4:	9301      	str	r3, [sp, #4]
   b6af6:	bd08      	pop	{r3, pc}
   b6af8:	00030230 	.word	0x00030230

000b6afc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6afc:	b508      	push	{r3, lr}
   b6afe:	4b02      	ldr	r3, [pc, #8]	; (b6b08 <HAL_USB_USART_Init+0xc>)
   b6b00:	681b      	ldr	r3, [r3, #0]
   b6b02:	681b      	ldr	r3, [r3, #0]
   b6b04:	9301      	str	r3, [sp, #4]
   b6b06:	bd08      	pop	{r3, pc}
   b6b08:	0003024c 	.word	0x0003024c

000b6b0c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6b0c:	b508      	push	{r3, lr}
   b6b0e:	4b02      	ldr	r3, [pc, #8]	; (b6b18 <HAL_USB_USART_Begin+0xc>)
   b6b10:	681b      	ldr	r3, [r3, #0]
   b6b12:	685b      	ldr	r3, [r3, #4]
   b6b14:	9301      	str	r3, [sp, #4]
   b6b16:	bd08      	pop	{r3, pc}
   b6b18:	0003024c 	.word	0x0003024c

000b6b1c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6b1c:	b508      	push	{r3, lr}
   b6b1e:	4b02      	ldr	r3, [pc, #8]	; (b6b28 <HAL_USB_USART_Available_Data+0xc>)
   b6b20:	681b      	ldr	r3, [r3, #0]
   b6b22:	691b      	ldr	r3, [r3, #16]
   b6b24:	9301      	str	r3, [sp, #4]
   b6b26:	bd08      	pop	{r3, pc}
   b6b28:	0003024c 	.word	0x0003024c

000b6b2c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6b2c:	b508      	push	{r3, lr}
   b6b2e:	4b02      	ldr	r3, [pc, #8]	; (b6b38 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6b30:	681b      	ldr	r3, [r3, #0]
   b6b32:	695b      	ldr	r3, [r3, #20]
   b6b34:	9301      	str	r3, [sp, #4]
   b6b36:	bd08      	pop	{r3, pc}
   b6b38:	0003024c 	.word	0x0003024c

000b6b3c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6b3c:	b508      	push	{r3, lr}
   b6b3e:	4b02      	ldr	r3, [pc, #8]	; (b6b48 <HAL_USB_USART_Receive_Data+0xc>)
   b6b40:	681b      	ldr	r3, [r3, #0]
   b6b42:	699b      	ldr	r3, [r3, #24]
   b6b44:	9301      	str	r3, [sp, #4]
   b6b46:	bd08      	pop	{r3, pc}
   b6b48:	0003024c 	.word	0x0003024c

000b6b4c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6b4c:	b508      	push	{r3, lr}
   b6b4e:	4b02      	ldr	r3, [pc, #8]	; (b6b58 <HAL_USB_USART_Send_Data+0xc>)
   b6b50:	681b      	ldr	r3, [r3, #0]
   b6b52:	69db      	ldr	r3, [r3, #28]
   b6b54:	9301      	str	r3, [sp, #4]
   b6b56:	bd08      	pop	{r3, pc}
   b6b58:	0003024c 	.word	0x0003024c

000b6b5c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6b5c:	b508      	push	{r3, lr}
   b6b5e:	4b02      	ldr	r3, [pc, #8]	; (b6b68 <HAL_USB_USART_Flush_Data+0xc>)
   b6b60:	681b      	ldr	r3, [r3, #0]
   b6b62:	6a1b      	ldr	r3, [r3, #32]
   b6b64:	9301      	str	r3, [sp, #4]
   b6b66:	bd08      	pop	{r3, pc}
   b6b68:	0003024c 	.word	0x0003024c

000b6b6c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b6b6c:	b508      	push	{r3, lr}
   b6b6e:	4b02      	ldr	r3, [pc, #8]	; (b6b78 <HAL_USB_USART_Is_Connected+0xc>)
   b6b70:	681b      	ldr	r3, [r3, #0]
   b6b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6b74:	9301      	str	r3, [sp, #4]
   b6b76:	bd08      	pop	{r3, pc}
   b6b78:	0003024c 	.word	0x0003024c

000b6b7c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6b7c:	b508      	push	{r3, lr}
   b6b7e:	4b02      	ldr	r3, [pc, #8]	; (b6b88 <panic_+0xc>)
   b6b80:	681b      	ldr	r3, [r3, #0]
   b6b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b84:	9301      	str	r3, [sp, #4]
   b6b86:	bd08      	pop	{r3, pc}
   b6b88:	00030260 	.word	0x00030260

000b6b8c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6b8c:	b508      	push	{r3, lr}
   b6b8e:	4b02      	ldr	r3, [pc, #8]	; (b6b98 <log_message+0xc>)
   b6b90:	681b      	ldr	r3, [r3, #0]
   b6b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6b94:	9301      	str	r3, [sp, #4]
   b6b96:	bd08      	pop	{r3, pc}
   b6b98:	00030260 	.word	0x00030260

000b6b9c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6b9c:	b508      	push	{r3, lr}
   b6b9e:	4b02      	ldr	r3, [pc, #8]	; (b6ba8 <set_system_mode+0xc>)
   b6ba0:	681b      	ldr	r3, [r3, #0]
   b6ba2:	685b      	ldr	r3, [r3, #4]
   b6ba4:	9301      	str	r3, [sp, #4]
   b6ba6:	bd08      	pop	{r3, pc}
   b6ba8:	00030220 	.word	0x00030220

000b6bac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6bac:	b508      	push	{r3, lr}
   b6bae:	4b02      	ldr	r3, [pc, #8]	; (b6bb8 <system_delay_ms+0xc>)
   b6bb0:	681b      	ldr	r3, [r3, #0]
   b6bb2:	695b      	ldr	r3, [r3, #20]
   b6bb4:	9301      	str	r3, [sp, #4]
   b6bb6:	bd08      	pop	{r3, pc}
   b6bb8:	00030220 	.word	0x00030220

000b6bbc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6bbc:	b508      	push	{r3, lr}
   b6bbe:	4b02      	ldr	r3, [pc, #8]	; (b6bc8 <system_thread_set_state+0xc>)
   b6bc0:	681b      	ldr	r3, [r3, #0]
   b6bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6bc4:	9301      	str	r3, [sp, #4]
   b6bc6:	bd08      	pop	{r3, pc}
   b6bc8:	00030220 	.word	0x00030220

000b6bcc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6bcc:	b508      	push	{r3, lr}
   b6bce:	4b03      	ldr	r3, [pc, #12]	; (b6bdc <system_ctrl_set_app_request_handler+0x10>)
   b6bd0:	681b      	ldr	r3, [r3, #0]
   b6bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6bd6:	9301      	str	r3, [sp, #4]
   b6bd8:	bd08      	pop	{r3, pc}
   b6bda:	0000      	.short	0x0000
   b6bdc:	00030220 	.word	0x00030220

000b6be0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6be0:	b508      	push	{r3, lr}
   b6be2:	4b03      	ldr	r3, [pc, #12]	; (b6bf0 <system_ctrl_set_result+0x10>)
   b6be4:	681b      	ldr	r3, [r3, #0]
   b6be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6bea:	9301      	str	r3, [sp, #4]
   b6bec:	bd08      	pop	{r3, pc}
   b6bee:	0000      	.short	0x0000
   b6bf0:	00030220 	.word	0x00030220

000b6bf4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6bf4:	b508      	push	{r3, lr}
   b6bf6:	4b02      	ldr	r3, [pc, #8]	; (b6c00 <network_connect+0xc>)
   b6bf8:	681b      	ldr	r3, [r3, #0]
   b6bfa:	685b      	ldr	r3, [r3, #4]
   b6bfc:	9301      	str	r3, [sp, #4]
   b6bfe:	bd08      	pop	{r3, pc}
   b6c00:	00030240 	.word	0x00030240

000b6c04 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6c04:	b508      	push	{r3, lr}
   b6c06:	4b02      	ldr	r3, [pc, #8]	; (b6c10 <network_connecting+0xc>)
   b6c08:	681b      	ldr	r3, [r3, #0]
   b6c0a:	689b      	ldr	r3, [r3, #8]
   b6c0c:	9301      	str	r3, [sp, #4]
   b6c0e:	bd08      	pop	{r3, pc}
   b6c10:	00030240 	.word	0x00030240

000b6c14 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6c14:	b508      	push	{r3, lr}
   b6c16:	4b02      	ldr	r3, [pc, #8]	; (b6c20 <network_disconnect+0xc>)
   b6c18:	681b      	ldr	r3, [r3, #0]
   b6c1a:	68db      	ldr	r3, [r3, #12]
   b6c1c:	9301      	str	r3, [sp, #4]
   b6c1e:	bd08      	pop	{r3, pc}
   b6c20:	00030240 	.word	0x00030240

000b6c24 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6c24:	b508      	push	{r3, lr}
   b6c26:	4b02      	ldr	r3, [pc, #8]	; (b6c30 <network_ready+0xc>)
   b6c28:	681b      	ldr	r3, [r3, #0]
   b6c2a:	691b      	ldr	r3, [r3, #16]
   b6c2c:	9301      	str	r3, [sp, #4]
   b6c2e:	bd08      	pop	{r3, pc}
   b6c30:	00030240 	.word	0x00030240

000b6c34 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6c34:	b508      	push	{r3, lr}
   b6c36:	4b02      	ldr	r3, [pc, #8]	; (b6c40 <network_on+0xc>)
   b6c38:	681b      	ldr	r3, [r3, #0]
   b6c3a:	695b      	ldr	r3, [r3, #20]
   b6c3c:	9301      	str	r3, [sp, #4]
   b6c3e:	bd08      	pop	{r3, pc}
   b6c40:	00030240 	.word	0x00030240

000b6c44 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6c44:	b508      	push	{r3, lr}
   b6c46:	4b02      	ldr	r3, [pc, #8]	; (b6c50 <network_off+0xc>)
   b6c48:	681b      	ldr	r3, [r3, #0]
   b6c4a:	699b      	ldr	r3, [r3, #24]
   b6c4c:	9301      	str	r3, [sp, #4]
   b6c4e:	bd08      	pop	{r3, pc}
   b6c50:	00030240 	.word	0x00030240

000b6c54 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6c54:	b508      	push	{r3, lr}
   b6c56:	4b02      	ldr	r3, [pc, #8]	; (b6c60 <network_listen+0xc>)
   b6c58:	681b      	ldr	r3, [r3, #0]
   b6c5a:	69db      	ldr	r3, [r3, #28]
   b6c5c:	9301      	str	r3, [sp, #4]
   b6c5e:	bd08      	pop	{r3, pc}
   b6c60:	00030240 	.word	0x00030240

000b6c64 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6c64:	b508      	push	{r3, lr}
   b6c66:	4b02      	ldr	r3, [pc, #8]	; (b6c70 <network_listening+0xc>)
   b6c68:	681b      	ldr	r3, [r3, #0]
   b6c6a:	6a1b      	ldr	r3, [r3, #32]
   b6c6c:	9301      	str	r3, [sp, #4]
   b6c6e:	bd08      	pop	{r3, pc}
   b6c70:	00030240 	.word	0x00030240

000b6c74 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6c74:	b508      	push	{r3, lr}
   b6c76:	4b02      	ldr	r3, [pc, #8]	; (b6c80 <network_set_listen_timeout+0xc>)
   b6c78:	681b      	ldr	r3, [r3, #0]
   b6c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6c7c:	9301      	str	r3, [sp, #4]
   b6c7e:	bd08      	pop	{r3, pc}
   b6c80:	00030240 	.word	0x00030240

000b6c84 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6c84:	b508      	push	{r3, lr}
   b6c86:	4b02      	ldr	r3, [pc, #8]	; (b6c90 <network_get_listen_timeout+0xc>)
   b6c88:	681b      	ldr	r3, [r3, #0]
   b6c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6c8c:	9301      	str	r3, [sp, #4]
   b6c8e:	bd08      	pop	{r3, pc}
   b6c90:	00030240 	.word	0x00030240

000b6c94 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6c94:	b508      	push	{r3, lr}
   b6c96:	4b02      	ldr	r3, [pc, #8]	; (b6ca0 <network_is_on+0xc>)
   b6c98:	681b      	ldr	r3, [r3, #0]
   b6c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c9c:	9301      	str	r3, [sp, #4]
   b6c9e:	bd08      	pop	{r3, pc}
   b6ca0:	00030240 	.word	0x00030240

000b6ca4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6ca4:	b508      	push	{r3, lr}
   b6ca6:	4b02      	ldr	r3, [pc, #8]	; (b6cb0 <network_is_off+0xc>)
   b6ca8:	681b      	ldr	r3, [r3, #0]
   b6caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6cac:	9301      	str	r3, [sp, #4]
   b6cae:	bd08      	pop	{r3, pc}
   b6cb0:	00030240 	.word	0x00030240

000b6cb4 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b6cb4:	b508      	push	{r3, lr}
   b6cb6:	4b02      	ldr	r3, [pc, #8]	; (b6cc0 <spark_deviceID+0xc>)
   b6cb8:	681b      	ldr	r3, [r3, #0]
   b6cba:	69db      	ldr	r3, [r3, #28]
   b6cbc:	9301      	str	r3, [sp, #4]
   b6cbe:	bd08      	pop	{r3, pc}
   b6cc0:	00030244 	.word	0x00030244

000b6cc4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6cc4:	b508      	push	{r3, lr}
   b6cc6:	4b02      	ldr	r3, [pc, #8]	; (b6cd0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6cc8:	681b      	ldr	r3, [r3, #0]
   b6cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6ccc:	9301      	str	r3, [sp, #4]
   b6cce:	bd08      	pop	{r3, pc}
   b6cd0:	00030244 	.word	0x00030244

000b6cd4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6cd4:	b508      	push	{r3, lr}
   b6cd6:	4b02      	ldr	r3, [pc, #8]	; (b6ce0 <malloc+0xc>)
   b6cd8:	681b      	ldr	r3, [r3, #0]
   b6cda:	681b      	ldr	r3, [r3, #0]
   b6cdc:	9301      	str	r3, [sp, #4]
   b6cde:	bd08      	pop	{r3, pc}
   b6ce0:	0003021c 	.word	0x0003021c

000b6ce4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6ce4:	b508      	push	{r3, lr}
   b6ce6:	4b02      	ldr	r3, [pc, #8]	; (b6cf0 <free+0xc>)
   b6ce8:	681b      	ldr	r3, [r3, #0]
   b6cea:	685b      	ldr	r3, [r3, #4]
   b6cec:	9301      	str	r3, [sp, #4]
   b6cee:	bd08      	pop	{r3, pc}
   b6cf0:	0003021c 	.word	0x0003021c

000b6cf4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6cf4:	b508      	push	{r3, lr}
   b6cf6:	4b02      	ldr	r3, [pc, #8]	; (b6d00 <realloc+0xc>)
   b6cf8:	681b      	ldr	r3, [r3, #0]
   b6cfa:	689b      	ldr	r3, [r3, #8]
   b6cfc:	9301      	str	r3, [sp, #4]
   b6cfe:	bd08      	pop	{r3, pc}
   b6d00:	0003021c 	.word	0x0003021c

000b6d04 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6d04:	b508      	push	{r3, lr}
   b6d06:	4b02      	ldr	r3, [pc, #8]	; (b6d10 <vsnprintf+0xc>)
   b6d08:	681b      	ldr	r3, [r3, #0]
   b6d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6d0c:	9301      	str	r3, [sp, #4]
   b6d0e:	bd08      	pop	{r3, pc}
   b6d10:	0003021c 	.word	0x0003021c

000b6d14 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6d14:	b508      	push	{r3, lr}
   b6d16:	4b02      	ldr	r3, [pc, #8]	; (b6d20 <__errno+0xc>)
   b6d18:	681b      	ldr	r3, [r3, #0]
   b6d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6d1c:	9301      	str	r3, [sp, #4]
   b6d1e:	bd08      	pop	{r3, pc}
   b6d20:	0003021c 	.word	0x0003021c

000b6d24 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6d24:	b508      	push	{r3, lr}
   b6d26:	4b02      	ldr	r3, [pc, #8]	; (b6d30 <__assert_func+0xc>)
   b6d28:	681b      	ldr	r3, [r3, #0]
   b6d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6d2c:	9301      	str	r3, [sp, #4]
   b6d2e:	bd08      	pop	{r3, pc}
   b6d30:	0003021c 	.word	0x0003021c

000b6d34 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6d34:	b508      	push	{r3, lr}
   b6d36:	4b02      	ldr	r3, [pc, #8]	; (b6d40 <newlib_impure_ptr_callback+0xc>)
   b6d38:	681b      	ldr	r3, [r3, #0]
   b6d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6d3c:	9301      	str	r3, [sp, #4]
   b6d3e:	bd08      	pop	{r3, pc}
   b6d40:	0003021c 	.word	0x0003021c

000b6d44 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6d44:	2200      	movs	r2, #0
   b6d46:	6840      	ldr	r0, [r0, #4]
   b6d48:	4611      	mov	r1, r2
   b6d4a:	f7ff bf8b 	b.w	b6c64 <network_listening>

000b6d4e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6d4e:	2200      	movs	r2, #0
   b6d50:	6840      	ldr	r0, [r0, #4]
   b6d52:	4611      	mov	r1, r2
   b6d54:	f7ff bf96 	b.w	b6c84 <network_get_listen_timeout>

000b6d58 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6d58:	6840      	ldr	r0, [r0, #4]
   b6d5a:	2200      	movs	r2, #0
   b6d5c:	f7ff bf8a 	b.w	b6c74 <network_set_listen_timeout>

000b6d60 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6d60:	6840      	ldr	r0, [r0, #4]
   b6d62:	2200      	movs	r2, #0
   b6d64:	f081 0101 	eor.w	r1, r1, #1
   b6d68:	f7ff bf74 	b.w	b6c54 <network_listen>

000b6d6c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6d6c:	2300      	movs	r3, #0
   b6d6e:	6840      	ldr	r0, [r0, #4]
   b6d70:	461a      	mov	r2, r3
   b6d72:	4619      	mov	r1, r3
   b6d74:	f7ff bf66 	b.w	b6c44 <network_off>

000b6d78 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6d78:	2300      	movs	r3, #0
   b6d7a:	6840      	ldr	r0, [r0, #4]
   b6d7c:	461a      	mov	r2, r3
   b6d7e:	4619      	mov	r1, r3
   b6d80:	f7ff bf58 	b.w	b6c34 <network_on>

000b6d84 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6d84:	2200      	movs	r2, #0
   b6d86:	6840      	ldr	r0, [r0, #4]
   b6d88:	4611      	mov	r1, r2
   b6d8a:	f7ff bf4b 	b.w	b6c24 <network_ready>

000b6d8e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6d8e:	2200      	movs	r2, #0
   b6d90:	6840      	ldr	r0, [r0, #4]
   b6d92:	4611      	mov	r1, r2
   b6d94:	f7ff bf36 	b.w	b6c04 <network_connecting>

000b6d98 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6d98:	6840      	ldr	r0, [r0, #4]
   b6d9a:	2200      	movs	r2, #0
   b6d9c:	2102      	movs	r1, #2
   b6d9e:	f7ff bf39 	b.w	b6c14 <network_disconnect>

000b6da2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6da2:	2300      	movs	r3, #0
   b6da4:	6840      	ldr	r0, [r0, #4]
   b6da6:	461a      	mov	r2, r3
   b6da8:	f7ff bf24 	b.w	b6bf4 <network_connect>

000b6dac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6dac:	4b02      	ldr	r3, [pc, #8]	; (b6db8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6dae:	2203      	movs	r2, #3
   b6db0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6db2:	4a02      	ldr	r2, [pc, #8]	; (b6dbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6db4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6db6:	4770      	bx	lr
   b6db8:	2003e6c8 	.word	0x2003e6c8
   b6dbc:	000b90f0 	.word	0x000b90f0

000b6dc0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6dc0:	2100      	movs	r1, #0
   b6dc2:	f7ff be93 	b.w	b6aec <hal_spi_release>

000b6dc6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6dc6:	2100      	movs	r1, #0
   b6dc8:	f7ff be88 	b.w	b6adc <hal_spi_acquire>

000b6dcc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6dcc:	b510      	push	{r4, lr}
   b6dce:	4604      	mov	r4, r0
   b6dd0:	4608      	mov	r0, r1
{
    _spi = spi;
   b6dd2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6dd4:	f7ff fe62 	bl	b6a9c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6dd8:	2300      	movs	r3, #0
   b6dda:	6063      	str	r3, [r4, #4]
}
   b6ddc:	4620      	mov	r0, r4
   b6dde:	bd10      	pop	{r4, pc}

000b6de0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6de0:	b513      	push	{r0, r1, r4, lr}
   b6de2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6de4:	7800      	ldrb	r0, [r0, #0]
   b6de6:	f7ff ffee 	bl	b6dc6 <_ZN8SPIClass4lockEv.isra.0>
   b6dea:	b958      	cbnz	r0, b6e04 <_ZN8SPIClass5beginEv+0x24>
   b6dec:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6dee:	9001      	str	r0, [sp, #4]
   b6df0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6df4:	f7ff fe42 	bl	b6a7c <hal_spi_begin>
        unlock();
   b6df8:	9801      	ldr	r0, [sp, #4]
    }
}
   b6dfa:	b002      	add	sp, #8
   b6dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6e00:	f7ff bfde 	b.w	b6dc0 <_ZN8SPIClass6unlockEv.isra.0>
   b6e04:	b002      	add	sp, #8
   b6e06:	bd10      	pop	{r4, pc}

000b6e08 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6e08:	7800      	ldrb	r0, [r0, #0]
   b6e0a:	f7ff bfd9 	b.w	b6dc0 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6e10 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6e10:	0840      	lsrs	r0, r0, #1
{
   b6e12:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6e14:	6018      	str	r0, [r3, #0]
   b6e16:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6e18:	6818      	ldr	r0, [r3, #0]
   b6e1a:	4288      	cmp	r0, r1
   b6e1c:	b2e5      	uxtb	r5, r4
   b6e1e:	d906      	bls.n	b6e2e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6e20:	3401      	adds	r4, #1
   b6e22:	2c08      	cmp	r4, #8
   b6e24:	d002      	beq.n	b6e2c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6e26:	0840      	lsrs	r0, r0, #1
   b6e28:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6e2a:	e7f5      	b.n	b6e18 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6e2c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6e2e:	4b02      	ldr	r3, [pc, #8]	; (b6e38 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6e30:	5d5b      	ldrb	r3, [r3, r5]
   b6e32:	7013      	strb	r3, [r2, #0]
}
   b6e34:	bd30      	pop	{r4, r5, pc}
   b6e36:	bf00      	nop
   b6e38:	000b9124 	.word	0x000b9124

000b6e3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6e40:	4606      	mov	r6, r0
   b6e42:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6e44:	7800      	ldrb	r0, [r0, #0]
{
   b6e46:	460c      	mov	r4, r1
    CHECK(lock());
   b6e48:	f7ff ffbd 	bl	b6dc6 <_ZN8SPIClass4lockEv.isra.0>
   b6e4c:	2800      	cmp	r0, #0
   b6e4e:	db1b      	blt.n	b6e88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6e50:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6e52:	2214      	movs	r2, #20
   b6e54:	2100      	movs	r1, #0
   b6e56:	a809      	add	r0, sp, #36	; 0x24
   b6e58:	f001 fa38 	bl	b82cc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6e5c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6e5e:	2200      	movs	r2, #0
   b6e60:	a909      	add	r1, sp, #36	; 0x24
   b6e62:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6e64:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6e68:	f7ff fe28 	bl	b6abc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6e6c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6e70:	b113      	cbz	r3, b6e78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6e72:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6e76:	b155      	cbz	r5, b6e8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6e78:	2700      	movs	r7, #0
   b6e7a:	46b9      	mov	r9, r7
   b6e7c:	46b8      	mov	r8, r7
   b6e7e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6e80:	7923      	ldrb	r3, [r4, #4]
   b6e82:	b15d      	cbz	r5, b6e9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6e84:	b1c3      	cbz	r3, b6eb8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6e86:	2000      	movs	r0, #0
}
   b6e88:	b00f      	add	sp, #60	; 0x3c
   b6e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6e8e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6e92:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6e96:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6e9a:	e7f1      	b.n	b6e80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6e9c:	2b00      	cmp	r3, #0
   b6e9e:	d135      	bne.n	b6f0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6ea0:	68a3      	ldr	r3, [r4, #8]
   b6ea2:	4543      	cmp	r3, r8
   b6ea4:	d108      	bne.n	b6eb8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6ea6:	f88d 9020 	strb.w	r9, [sp, #32]
   b6eaa:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6eae:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6eb2:	89a3      	ldrh	r3, [r4, #12]
   b6eb4:	429a      	cmp	r2, r3
   b6eb6:	d0e6      	beq.n	b6e86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6eb8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6eba:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6ebc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6ec0:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6ec2:	ab04      	add	r3, sp, #16
   b6ec4:	f10d 020f 	add.w	r2, sp, #15
   b6ec8:	f7ff ffa2 	bl	b6e10 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6ecc:	7921      	ldrb	r1, [r4, #4]
   b6ece:	b985      	cbnz	r5, b6ef2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6ed0:	b989      	cbnz	r1, b6ef6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6ed2:	68a3      	ldr	r3, [r4, #8]
   b6ed4:	4543      	cmp	r3, r8
   b6ed6:	d30e      	bcc.n	b6ef6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6ed8:	f88d 9020 	strb.w	r9, [sp, #32]
   b6edc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6ee0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6ee4:	89a3      	ldrh	r3, [r4, #12]
   b6ee6:	429a      	cmp	r2, r3
   b6ee8:	d105      	bne.n	b6ef6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6eea:	9b04      	ldr	r3, [sp, #16]
   b6eec:	4543      	cmp	r3, r8
   b6eee:	d102      	bne.n	b6ef6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6ef0:	e7c9      	b.n	b6e86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6ef2:	2900      	cmp	r1, #0
   b6ef4:	d1f9      	bne.n	b6eea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6ef6:	2300      	movs	r3, #0
   b6ef8:	9301      	str	r3, [sp, #4]
   b6efa:	7b63      	ldrb	r3, [r4, #13]
   b6efc:	9300      	str	r3, [sp, #0]
   b6efe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6f02:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6f04:	7830      	ldrb	r0, [r6, #0]
   b6f06:	f7ff fde1 	bl	b6acc <hal_spi_set_settings>
   b6f0a:	e7bc      	b.n	b6e86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6f0c:	e9cd 5500 	strd	r5, r5, [sp]
   b6f10:	462b      	mov	r3, r5
   b6f12:	462a      	mov	r2, r5
   b6f14:	2101      	movs	r1, #1
   b6f16:	e7f5      	b.n	b6f04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6f18 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6f18:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6f1a:	7800      	ldrb	r0, [r0, #0]
   b6f1c:	f7ff fdb6 	bl	b6a8c <hal_spi_transfer>
}
   b6f20:	b2c0      	uxtb	r0, r0
   b6f22:	bd08      	pop	{r3, pc}

000b6f24 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6f24:	4b05      	ldr	r3, [pc, #20]	; (b6f3c <_GLOBAL__sub_I_System+0x18>)
   b6f26:	2202      	movs	r2, #2
   b6f28:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6f2a:	4b05      	ldr	r3, [pc, #20]	; (b6f40 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6f2c:	4a05      	ldr	r2, [pc, #20]	; (b6f44 <_GLOBAL__sub_I_System+0x20>)
   b6f2e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6f30:	2000      	movs	r0, #0
   b6f32:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6f36:	f7ff be31 	b.w	b6b9c <set_system_mode>
   b6f3a:	bf00      	nop
   b6f3c:	2003e6dc 	.word	0x2003e6dc
   b6f40:	2003e6d0 	.word	0x2003e6d0
   b6f44:	ffff0000 	.word	0xffff0000

000b6f48 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6f48:	b510      	push	{r4, lr}
   b6f4a:	4604      	mov	r4, r0
{
	free(buffer);
   b6f4c:	6800      	ldr	r0, [r0, #0]
   b6f4e:	f7ff fec9 	bl	b6ce4 <free>
}
   b6f52:	4620      	mov	r0, r4
   b6f54:	bd10      	pop	{r4, pc}

000b6f56 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6f56:	b510      	push	{r4, lr}
   b6f58:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6f5a:	6800      	ldr	r0, [r0, #0]
   b6f5c:	b108      	cbz	r0, b6f62 <_ZN6String10invalidateEv+0xc>
   b6f5e:	f7ff fec1 	bl	b6ce4 <free>
	buffer = NULL;
   b6f62:	2300      	movs	r3, #0
	capacity = len = 0;
   b6f64:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6f68:	6023      	str	r3, [r4, #0]
}
   b6f6a:	bd10      	pop	{r4, pc}

000b6f6c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6f6c:	b538      	push	{r3, r4, r5, lr}
   b6f6e:	4604      	mov	r4, r0
   b6f70:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6f72:	6800      	ldr	r0, [r0, #0]
   b6f74:	3101      	adds	r1, #1
   b6f76:	f7ff febd 	bl	b6cf4 <realloc>
	if (newbuffer) {
   b6f7a:	b110      	cbz	r0, b6f82 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6f7c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6f80:	2001      	movs	r0, #1
	}
	return 0;
}
   b6f82:	bd38      	pop	{r3, r4, r5, pc}

000b6f84 <_ZN6String7reserveEj>:
{
   b6f84:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6f86:	6803      	ldr	r3, [r0, #0]
{
   b6f88:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6f8a:	b123      	cbz	r3, b6f96 <_ZN6String7reserveEj+0x12>
   b6f8c:	6843      	ldr	r3, [r0, #4]
   b6f8e:	428b      	cmp	r3, r1
   b6f90:	d301      	bcc.n	b6f96 <_ZN6String7reserveEj+0x12>
   b6f92:	2001      	movs	r0, #1
}
   b6f94:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6f96:	4620      	mov	r0, r4
   b6f98:	f7ff ffe8 	bl	b6f6c <_ZN6String12changeBufferEj>
   b6f9c:	2800      	cmp	r0, #0
   b6f9e:	d0f9      	beq.n	b6f94 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6fa0:	68a3      	ldr	r3, [r4, #8]
   b6fa2:	2b00      	cmp	r3, #0
   b6fa4:	d1f5      	bne.n	b6f92 <_ZN6String7reserveEj+0xe>
   b6fa6:	6822      	ldr	r2, [r4, #0]
   b6fa8:	7013      	strb	r3, [r2, #0]
   b6faa:	e7f2      	b.n	b6f92 <_ZN6String7reserveEj+0xe>

000b6fac <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6fae:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6fb0:	4611      	mov	r1, r2
   b6fb2:	9201      	str	r2, [sp, #4]
{
   b6fb4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6fb6:	f7ff ffe5 	bl	b6f84 <_ZN6String7reserveEj>
   b6fba:	9a01      	ldr	r2, [sp, #4]
   b6fbc:	b928      	cbnz	r0, b6fca <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6fbe:	4620      	mov	r0, r4
   b6fc0:	f7ff ffc9 	bl	b6f56 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6fc4:	4620      	mov	r0, r4
   b6fc6:	b003      	add	sp, #12
   b6fc8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6fca:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6fcc:	4629      	mov	r1, r5
   b6fce:	6820      	ldr	r0, [r4, #0]
   b6fd0:	f001 f96e 	bl	b82b0 <memcpy>
	buffer[len] = 0;
   b6fd4:	6822      	ldr	r2, [r4, #0]
   b6fd6:	68a3      	ldr	r3, [r4, #8]
   b6fd8:	2100      	movs	r1, #0
   b6fda:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6fdc:	e7f2      	b.n	b6fc4 <_ZN6String4copyEPKcj+0x18>

000b6fde <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6fde:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6fe0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6fe2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6fe6:	4604      	mov	r4, r0
	len = 0;
   b6fe8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6fea:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6fec:	b141      	cbz	r1, b7000 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6fee:	4608      	mov	r0, r1
   b6ff0:	9101      	str	r1, [sp, #4]
   b6ff2:	f7fd f9ef 	bl	b43d4 <strlen>
   b6ff6:	9901      	ldr	r1, [sp, #4]
   b6ff8:	4602      	mov	r2, r0
   b6ffa:	4620      	mov	r0, r4
   b6ffc:	f7ff ffd6 	bl	b6fac <_ZN6String4copyEPKcj>
}
   b7000:	4620      	mov	r0, r4
   b7002:	b002      	add	sp, #8
   b7004:	bd10      	pop	{r4, pc}

000b7006 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7006:	b513      	push	{r0, r1, r4, lr}
   b7008:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b700a:	b159      	cbz	r1, b7024 <_ZN6StringaSEPKc+0x1e>
   b700c:	4608      	mov	r0, r1
   b700e:	9101      	str	r1, [sp, #4]
   b7010:	f7fd f9e0 	bl	b43d4 <strlen>
   b7014:	9901      	ldr	r1, [sp, #4]
   b7016:	4602      	mov	r2, r0
   b7018:	4620      	mov	r0, r4
   b701a:	f7ff ffc7 	bl	b6fac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b701e:	4620      	mov	r0, r4
   b7020:	b002      	add	sp, #8
   b7022:	bd10      	pop	{r4, pc}
	else invalidate();
   b7024:	f7ff ff97 	bl	b6f56 <_ZN6String10invalidateEv>
   b7028:	e7f9      	b.n	b701e <_ZN6StringaSEPKc+0x18>

000b702a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b702a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b702c:	6843      	ldr	r3, [r0, #4]
   b702e:	3b01      	subs	r3, #1
    {
   b7030:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7032:	6043      	str	r3, [r0, #4]
   b7034:	b963      	cbnz	r3, b7050 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b7036:	6803      	ldr	r3, [r0, #0]
   b7038:	689b      	ldr	r3, [r3, #8]
   b703a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b703c:	68a3      	ldr	r3, [r4, #8]
   b703e:	3b01      	subs	r3, #1
   b7040:	60a3      	str	r3, [r4, #8]
   b7042:	b92b      	cbnz	r3, b7050 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7044:	6823      	ldr	r3, [r4, #0]
   b7046:	4620      	mov	r0, r4
   b7048:	68db      	ldr	r3, [r3, #12]
        }
    }
   b704a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b704e:	4718      	bx	r3
    }
   b7050:	bd10      	pop	{r4, pc}
	...

000b7054 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7054:	4802      	ldr	r0, [pc, #8]	; (b7060 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7056:	2300      	movs	r3, #0
   b7058:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b705a:	f7ff bc27 	b.w	b68ac <os_mutex_recursive_create>
   b705e:	bf00      	nop
   b7060:	2003e6e0 	.word	0x2003e6e0

000b7064 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7066:	4606      	mov	r6, r0
   b7068:	460d      	mov	r5, r1
  size_t n = 0;
   b706a:	188f      	adds	r7, r1, r2
   b706c:	2400      	movs	r4, #0
  while (size--) {
   b706e:	42bd      	cmp	r5, r7
   b7070:	d00c      	beq.n	b708c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7072:	6833      	ldr	r3, [r6, #0]
   b7074:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7078:	689b      	ldr	r3, [r3, #8]
   b707a:	4630      	mov	r0, r6
   b707c:	4798      	blx	r3
     if (chunk>=0)
   b707e:	1e03      	subs	r3, r0, #0
   b7080:	db01      	blt.n	b7086 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7082:	441c      	add	r4, r3
  while (size--) {
   b7084:	e7f3      	b.n	b706e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7086:	2c00      	cmp	r4, #0
   b7088:	bf08      	it	eq
   b708a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b708c:	4620      	mov	r0, r4
   b708e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7090 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b7090:	b513      	push	{r0, r1, r4, lr}
   b7092:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b7094:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7096:	b159      	cbz	r1, b70b0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7098:	9101      	str	r1, [sp, #4]
   b709a:	f7fd f99b 	bl	b43d4 <strlen>
   b709e:	6823      	ldr	r3, [r4, #0]
   b70a0:	9901      	ldr	r1, [sp, #4]
   b70a2:	68db      	ldr	r3, [r3, #12]
   b70a4:	4602      	mov	r2, r0
   b70a6:	4620      	mov	r0, r4
    }
   b70a8:	b002      	add	sp, #8
   b70aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b70ae:	4718      	bx	r3
    }
   b70b0:	b002      	add	sp, #8
   b70b2:	bd10      	pop	{r4, pc}

000b70b4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b70b4:	b508      	push	{r3, lr}
  return write(str);
   b70b6:	f7ff ffeb 	bl	b7090 <_ZN5Print5writeEPKc>
}
   b70ba:	bd08      	pop	{r3, pc}

000b70bc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b70bc:	6803      	ldr	r3, [r0, #0]
   b70be:	689b      	ldr	r3, [r3, #8]
   b70c0:	4718      	bx	r3

000b70c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b70c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b70c4:	210d      	movs	r1, #13
{
   b70c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b70c8:	f7ff fff8 	bl	b70bc <_ZN5Print5printEc>
  n += print('\n');
   b70cc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b70ce:	4604      	mov	r4, r0
  n += print('\n');
   b70d0:	4628      	mov	r0, r5
   b70d2:	f7ff fff3 	bl	b70bc <_ZN5Print5printEc>
  return n;
}
   b70d6:	4420      	add	r0, r4
   b70d8:	bd38      	pop	{r3, r4, r5, pc}

000b70da <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b70da:	b530      	push	{r4, r5, lr}
   b70dc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b70de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b70e0:	2a01      	cmp	r2, #1
  *str = '\0';
   b70e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b70e6:	bf98      	it	ls
   b70e8:	220a      	movls	r2, #10
   b70ea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b70ec:	460d      	mov	r5, r1
   b70ee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b70f2:	fb01 5312 	mls	r3, r1, r2, r5
   b70f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b70fa:	2b09      	cmp	r3, #9
   b70fc:	bf94      	ite	ls
   b70fe:	3330      	addls	r3, #48	; 0x30
   b7100:	3337      	addhi	r3, #55	; 0x37
   b7102:	b2db      	uxtb	r3, r3
  } while(n);
   b7104:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7106:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b710a:	d9ef      	bls.n	b70ec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b710c:	4621      	mov	r1, r4
   b710e:	f7ff ffbf 	bl	b7090 <_ZN5Print5writeEPKc>
}
   b7112:	b00b      	add	sp, #44	; 0x2c
   b7114:	bd30      	pop	{r4, r5, pc}

000b7116 <_ZN5Print11printNumberEyh>:
 
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   b7116:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b711a:	b093      	sub	sp, #76	; 0x4c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.

  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b711c:	2100      	movs	r1, #0
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   b711e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
  *str = '\0';
   b7122:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7126:	f1b9 0f01 	cmp.w	r9, #1
 size_t Print::printNumber(unsigned long long n, uint8_t base) {
   b712a:	4605      	mov	r5, r0
  if (base < 2) base = 10;
   b712c:	bf98      	it	ls
   b712e:	f04f 090a 	movls.w	r9, #10
   b7132:	ae11      	add	r6, sp, #68	; 0x44

  do {
    decltype(n) m = n;
    n /= base;
   b7134:	4617      	mov	r7, r2
   b7136:	4698      	mov	r8, r3
   b7138:	464a      	mov	r2, r9
   b713a:	2300      	movs	r3, #0
   b713c:	4638      	mov	r0, r7
   b713e:	4641      	mov	r1, r8
   b7140:	f7fc ffbc 	bl	b40bc <__aeabi_uldivmod>
   b7144:	460b      	mov	r3, r1
    char c = m - base * n;
   b7146:	fb09 7110 	mls	r1, r9, r0, r7
   b714a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b714e:	2909      	cmp	r1, #9
   b7150:	bf94      	ite	ls
   b7152:	3130      	addls	r1, #48	; 0x30
   b7154:	3137      	addhi	r1, #55	; 0x37
   b7156:	b2c9      	uxtb	r1, r1
  } while(n);
   b7158:	454f      	cmp	r7, r9
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b715a:	f806 1d01 	strb.w	r1, [r6, #-1]!
  } while(n);
   b715e:	f178 0100 	sbcs.w	r1, r8, #0
    n /= base;
   b7162:	4602      	mov	r2, r0
  } while(n);
   b7164:	d2e6      	bcs.n	b7134 <_ZN5Print11printNumberEyh+0x1e>

  return write(str);
   b7166:	4631      	mov	r1, r6
   b7168:	4628      	mov	r0, r5
   b716a:	f7ff ff91 	bl	b7090 <_ZN5Print5writeEPKc>
}
   b716e:	b013      	add	sp, #76	; 0x4c
   b7170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7174 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7178:	b086      	sub	sp, #24
   b717a:	af00      	add	r7, sp, #0
   b717c:	4605      	mov	r5, r0
   b717e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7180:	1d38      	adds	r0, r7, #4
   b7182:	2114      	movs	r1, #20
{
   b7184:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7186:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7188:	f7ff fdbc 	bl	b6d04 <vsnprintf>

    if (n<bufsize)
   b718c:	2813      	cmp	r0, #19
   b718e:	d80e      	bhi.n	b71ae <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7190:	1d39      	adds	r1, r7, #4
   b7192:	4628      	mov	r0, r5
   b7194:	f7ff ff7c 	bl	b7090 <_ZN5Print5writeEPKc>
   b7198:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b719a:	b11e      	cbz	r6, b71a4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b719c:	4628      	mov	r0, r5
   b719e:	f7ff ff90 	bl	b70c2 <_ZN5Print7printlnEv>
   b71a2:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b71a4:	4620      	mov	r0, r4
   b71a6:	3718      	adds	r7, #24
   b71a8:	46bd      	mov	sp, r7
   b71aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b71ae:	f100 0308 	add.w	r3, r0, #8
   b71b2:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b71b6:	46e8      	mov	r8, sp
        char bigger[n+1];
   b71b8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b71bc:	4622      	mov	r2, r4
   b71be:	1c41      	adds	r1, r0, #1
   b71c0:	683b      	ldr	r3, [r7, #0]
   b71c2:	4668      	mov	r0, sp
   b71c4:	f7ff fd9e 	bl	b6d04 <vsnprintf>
  return write(str);
   b71c8:	4669      	mov	r1, sp
   b71ca:	4628      	mov	r0, r5
   b71cc:	f7ff ff60 	bl	b7090 <_ZN5Print5writeEPKc>
   b71d0:	4604      	mov	r4, r0
   b71d2:	46c5      	mov	sp, r8
   b71d4:	e7e1      	b.n	b719a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000b71d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b71d8:	4b01      	ldr	r3, [pc, #4]	; (b71e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b71da:	4a02      	ldr	r2, [pc, #8]	; (b71e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b71dc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b71de:	4770      	bx	lr
   b71e0:	2003e6e4 	.word	0x2003e6e4
   b71e4:	000b9134 	.word	0x000b9134

000b71e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b71e8:	4b02      	ldr	r3, [pc, #8]	; (b71f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b71ea:	681a      	ldr	r2, [r3, #0]
   b71ec:	4b02      	ldr	r3, [pc, #8]	; (b71f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b71ee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b71f0:	4770      	bx	lr
   b71f2:	bf00      	nop
   b71f4:	2003e4e0 	.word	0x2003e4e0
   b71f8:	2003e6e8 	.word	0x2003e6e8

000b71fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b71fc:	2100      	movs	r1, #0
   b71fe:	f7ff bcd5 	b.w	b6bac <system_delay_ms>
	...

000b7204 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b7204:	b510      	push	{r4, lr}
   b7206:	4b04      	ldr	r3, [pc, #16]	; (b7218 <_ZN9TCPClientD1Ev+0x14>)
   b7208:	6003      	str	r3, [r0, #0]
   b720a:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b720c:	6980      	ldr	r0, [r0, #24]
   b720e:	b108      	cbz	r0, b7214 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b7210:	f7ff ff0b 	bl	b702a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b7214:	4620      	mov	r0, r4
   b7216:	bd10      	pop	{r4, pc}
   b7218:	000b922c 	.word	0x000b922c

000b721c <_ZN9TCPClientD0Ev>:
   b721c:	b510      	push	{r4, lr}
   b721e:	4604      	mov	r4, r0
   b7220:	f7ff fff0 	bl	b7204 <_ZN9TCPClientD1Ev>
   b7224:	4620      	mov	r0, r4
   b7226:	211c      	movs	r1, #28
   b7228:	f7fd f91d 	bl	b4466 <_ZdlPvj>
   b722c:	4620      	mov	r0, r4
   b722e:	bd10      	pop	{r4, pc}

000b7230 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b7230:	4b01      	ldr	r3, [pc, #4]	; (b7238 <_GLOBAL__sub_I_RGB+0x8>)
   b7232:	2200      	movs	r2, #0
   b7234:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7236:	4770      	bx	lr
   b7238:	2003e6ec 	.word	0x2003e6ec

000b723c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b723c:	4b01      	ldr	r3, [pc, #4]	; (b7244 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b723e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7240:	4770      	bx	lr
   b7242:	bf00      	nop
   b7244:	2003e4e4 	.word	0x2003e4e4

000b7248 <serialEventRun>:
{
   b7248:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b724a:	4b0b      	ldr	r3, [pc, #44]	; (b7278 <serialEventRun+0x30>)
   b724c:	b143      	cbz	r3, b7260 <serialEventRun+0x18>
   b724e:	f000 f981 	bl	b7554 <_Z16_fetch_usbserialv>
   b7252:	6803      	ldr	r3, [r0, #0]
   b7254:	691b      	ldr	r3, [r3, #16]
   b7256:	4798      	blx	r3
   b7258:	2800      	cmp	r0, #0
   b725a:	dd01      	ble.n	b7260 <serialEventRun+0x18>
        serialEvent();
   b725c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7260:	4b06      	ldr	r3, [pc, #24]	; (b727c <serialEventRun+0x34>)
   b7262:	b143      	cbz	r3, b7276 <serialEventRun+0x2e>
   b7264:	f000 fea2 	bl	b7fac <_Z22__fetch_global_Serial1v>
   b7268:	6803      	ldr	r3, [r0, #0]
   b726a:	691b      	ldr	r3, [r3, #16]
   b726c:	4798      	blx	r3
   b726e:	2800      	cmp	r0, #0
   b7270:	dd01      	ble.n	b7276 <serialEventRun+0x2e>
        serialEvent1();
   b7272:	f3af 8000 	nop.w
}
   b7276:	bd08      	pop	{r3, pc}
	...

000b7280 <_post_loop>:
{
   b7280:	b508      	push	{r3, lr}
	serialEventRun();
   b7282:	f7ff ffe1 	bl	b7248 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7286:	f7ff fae9 	bl	b685c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b728a:	4b01      	ldr	r3, [pc, #4]	; (b7290 <_post_loop+0x10>)
   b728c:	6018      	str	r0, [r3, #0]
}
   b728e:	bd08      	pop	{r3, pc}
   b7290:	2003e744 	.word	0x2003e744

000b7294 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7294:	4805      	ldr	r0, [pc, #20]	; (b72ac <_Z33system_initialize_user_backup_ramv+0x18>)
   b7296:	4a06      	ldr	r2, [pc, #24]	; (b72b0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7298:	4906      	ldr	r1, [pc, #24]	; (b72b4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b729a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b729c:	1a12      	subs	r2, r2, r0
   b729e:	f001 f807 	bl	b82b0 <memcpy>
    __backup_sram_signature = signature;
   b72a2:	4b05      	ldr	r3, [pc, #20]	; (b72b8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b72a4:	4a05      	ldr	r2, [pc, #20]	; (b72bc <_Z33system_initialize_user_backup_ramv+0x28>)
   b72a6:	601a      	str	r2, [r3, #0]
}
   b72a8:	bd08      	pop	{r3, pc}
   b72aa:	bf00      	nop
   b72ac:	2003f400 	.word	0x2003f400
   b72b0:	2003f404 	.word	0x2003f404
   b72b4:	000b9644 	.word	0x000b9644
   b72b8:	2003f400 	.word	0x2003f400
   b72bc:	9a271c1e 	.word	0x9a271c1e

000b72c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b72c0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b72c2:	2300      	movs	r3, #0
   b72c4:	9300      	str	r3, [sp, #0]
   b72c6:	461a      	mov	r2, r3
   b72c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b72cc:	f7ff fc88 	bl	b6be0 <system_ctrl_set_result>
}
   b72d0:	b003      	add	sp, #12
   b72d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b72d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b72d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b72da:	8843      	ldrh	r3, [r0, #2]
   b72dc:	2b0a      	cmp	r3, #10
   b72de:	d008      	beq.n	b72f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b72e0:	2b50      	cmp	r3, #80	; 0x50
   b72e2:	d10b      	bne.n	b72fc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b72e4:	4b09      	ldr	r3, [pc, #36]	; (b730c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b72e6:	681b      	ldr	r3, [r3, #0]
   b72e8:	b14b      	cbz	r3, b72fe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b72ea:	b003      	add	sp, #12
   b72ec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b72f0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b72f2:	f7ff ffe5 	bl	b72c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b72f6:	b003      	add	sp, #12
   b72f8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b72fc:	2300      	movs	r3, #0
   b72fe:	9300      	str	r3, [sp, #0]
   b7300:	461a      	mov	r2, r3
   b7302:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7306:	f7ff fc6b 	bl	b6be0 <system_ctrl_set_result>
}
   b730a:	e7f4      	b.n	b72f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b730c:	2003e700 	.word	0x2003e700

000b7310 <module_user_init_hook>:
{
   b7310:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7312:	4812      	ldr	r0, [pc, #72]	; (b735c <module_user_init_hook+0x4c>)
   b7314:	2100      	movs	r1, #0
   b7316:	f7ff fd0d 	bl	b6d34 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b731a:	4b11      	ldr	r3, [pc, #68]	; (b7360 <module_user_init_hook+0x50>)
   b731c:	681a      	ldr	r2, [r3, #0]
   b731e:	4b11      	ldr	r3, [pc, #68]	; (b7364 <module_user_init_hook+0x54>)
   b7320:	429a      	cmp	r2, r3
   b7322:	4b11      	ldr	r3, [pc, #68]	; (b7368 <module_user_init_hook+0x58>)
   b7324:	bf0c      	ite	eq
   b7326:	2201      	moveq	r2, #1
   b7328:	2200      	movne	r2, #0
   b732a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b732c:	d001      	beq.n	b7332 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b732e:	f7ff ffb1 	bl	b7294 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7332:	f7ff fa7b 	bl	b682c <HAL_RNG_GetRandomNumber>
   b7336:	4604      	mov	r4, r0
    srand(seed);
   b7338:	f000 ffd0 	bl	b82dc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b733c:	4b0b      	ldr	r3, [pc, #44]	; (b736c <module_user_init_hook+0x5c>)
   b733e:	b113      	cbz	r3, b7346 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7340:	4620      	mov	r0, r4
   b7342:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7346:	2100      	movs	r1, #0
   b7348:	4808      	ldr	r0, [pc, #32]	; (b736c <module_user_init_hook+0x5c>)
   b734a:	f7ff fcbb 	bl	b6cc4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b734e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7352:	4807      	ldr	r0, [pc, #28]	; (b7370 <module_user_init_hook+0x60>)
   b7354:	2100      	movs	r1, #0
   b7356:	f7ff bc39 	b.w	b6bcc <system_ctrl_set_app_request_handler>
   b735a:	bf00      	nop
   b735c:	000b723d 	.word	0x000b723d
   b7360:	2003f400 	.word	0x2003f400
   b7364:	9a271c1e 	.word	0x9a271c1e
   b7368:	2003e6fc 	.word	0x2003e6fc
   b736c:	00000000 	.word	0x00000000
   b7370:	000b72d9 	.word	0x000b72d9

000b7374 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7374:	4770      	bx	lr

000b7376 <_ZN9IPAddressD0Ev>:
   b7376:	b510      	push	{r4, lr}
   b7378:	2118      	movs	r1, #24
   b737a:	4604      	mov	r4, r0
   b737c:	f7fd f873 	bl	b4466 <_ZdlPvj>
   b7380:	4620      	mov	r0, r4
   b7382:	bd10      	pop	{r4, pc}

000b7384 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7384:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7386:	7d03      	ldrb	r3, [r0, #20]
   b7388:	2b06      	cmp	r3, #6
{
   b738a:	b08d      	sub	sp, #52	; 0x34
   b738c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b738e:	f100 0704 	add.w	r7, r0, #4
   b7392:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7396:	d012      	beq.n	b73be <_ZNK9IPAddress7printToER5Print+0x3a>
   b7398:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b739c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b73a0:	220a      	movs	r2, #10
   b73a2:	4630      	mov	r0, r6
   b73a4:	f7ff fe99 	bl	b70da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b73a8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b73aa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b73ac:	d019      	beq.n	b73e2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b73ae:	2c00      	cmp	r4, #0
   b73b0:	d0f4      	beq.n	b739c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b73b2:	212e      	movs	r1, #46	; 0x2e
   b73b4:	4630      	mov	r0, r6
   b73b6:	f7ff fe81 	bl	b70bc <_ZN5Print5printEc>
   b73ba:	4404      	add	r4, r0
   b73bc:	e7ee      	b.n	b739c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b73be:	232f      	movs	r3, #47	; 0x2f
   b73c0:	466a      	mov	r2, sp
   b73c2:	4639      	mov	r1, r7
   b73c4:	200a      	movs	r0, #10
		buf[0] = 0;
   b73c6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b73ca:	f7ff fa77 	bl	b68bc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b73ce:	4668      	mov	r0, sp
   b73d0:	f7fd f800 	bl	b43d4 <strlen>
   b73d4:	6833      	ldr	r3, [r6, #0]
   b73d6:	4602      	mov	r2, r0
   b73d8:	68db      	ldr	r3, [r3, #12]
   b73da:	4669      	mov	r1, sp
   b73dc:	4630      	mov	r0, r6
   b73de:	4798      	blx	r3
   b73e0:	4604      	mov	r4, r0
    }
    return n;
}
   b73e2:	4620      	mov	r0, r4
   b73e4:	b00d      	add	sp, #52	; 0x34
   b73e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b73e8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b73e8:	b510      	push	{r4, lr}
   b73ea:	4b05      	ldr	r3, [pc, #20]	; (b7400 <_ZN9IPAddressC1Ev+0x18>)
   b73ec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b73ee:	2211      	movs	r2, #17
   b73f0:	f840 3b04 	str.w	r3, [r0], #4
   b73f4:	2100      	movs	r1, #0
   b73f6:	f000 ff69 	bl	b82cc <memset>
}
   b73fa:	4620      	mov	r0, r4
   b73fc:	bd10      	pop	{r4, pc}
   b73fe:	bf00      	nop
   b7400:	000b915c 	.word	0x000b915c

000b7404 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7404:	4603      	mov	r3, r0
   b7406:	4a07      	ldr	r2, [pc, #28]	; (b7424 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7408:	b510      	push	{r4, lr}
   b740a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b740e:	f101 0210 	add.w	r2, r1, #16
   b7412:	f851 4b04 	ldr.w	r4, [r1], #4
   b7416:	f843 4b04 	str.w	r4, [r3], #4
   b741a:	4291      	cmp	r1, r2
   b741c:	d1f9      	bne.n	b7412 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b741e:	780a      	ldrb	r2, [r1, #0]
   b7420:	701a      	strb	r2, [r3, #0]
}
   b7422:	bd10      	pop	{r4, pc}
   b7424:	000b915c 	.word	0x000b915c

000b7428 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7428:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b742a:	2b04      	cmp	r3, #4
   b742c:	d104      	bne.n	b7438 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b742e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7430:	3800      	subs	r0, #0
   b7432:	bf18      	it	ne
   b7434:	2001      	movne	r0, #1
   b7436:	4770      	bx	lr
    } else if (version() == 6) {
   b7438:	2b06      	cmp	r3, #6
   b743a:	d107      	bne.n	b744c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b743c:	6843      	ldr	r3, [r0, #4]
   b743e:	b93b      	cbnz	r3, b7450 <_ZNK9IPAddresscvbEv+0x28>
   b7440:	6883      	ldr	r3, [r0, #8]
   b7442:	b92b      	cbnz	r3, b7450 <_ZNK9IPAddresscvbEv+0x28>
   b7444:	68c3      	ldr	r3, [r0, #12]
   b7446:	b91b      	cbnz	r3, b7450 <_ZNK9IPAddresscvbEv+0x28>
   b7448:	6900      	ldr	r0, [r0, #16]
   b744a:	e7f1      	b.n	b7430 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b744c:	2000      	movs	r0, #0
   b744e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7450:	2001      	movs	r0, #1
}
   b7452:	4770      	bx	lr

000b7454 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7454:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7456:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b745a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b745e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7462:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7466:	2304      	movs	r3, #4
   b7468:	6041      	str	r1, [r0, #4]
   b746a:	7503      	strb	r3, [r0, #20]
}
   b746c:	bd10      	pop	{r4, pc}
	...

000b7470 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7470:	b507      	push	{r0, r1, r2, lr}
   b7472:	4b06      	ldr	r3, [pc, #24]	; (b748c <_ZN9IPAddressC1EPKh+0x1c>)
   b7474:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7476:	78cb      	ldrb	r3, [r1, #3]
   b7478:	9300      	str	r3, [sp, #0]
   b747a:	788b      	ldrb	r3, [r1, #2]
   b747c:	784a      	ldrb	r2, [r1, #1]
   b747e:	7809      	ldrb	r1, [r1, #0]
   b7480:	f7ff ffe8 	bl	b7454 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7484:	b003      	add	sp, #12
   b7486:	f85d fb04 	ldr.w	pc, [sp], #4
   b748a:	bf00      	nop
   b748c:	000b915c 	.word	0x000b915c

000b7490 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7490:	7441      	strb	r1, [r0, #17]
}
   b7492:	4770      	bx	lr

000b7494 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7494:	4770      	bx	lr

000b7496 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7496:	4770      	bx	lr

000b7498 <_ZN9USBSerial4readEv>:
{
   b7498:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b749a:	2100      	movs	r1, #0
   b749c:	7c00      	ldrb	r0, [r0, #16]
   b749e:	f7ff fb4d 	bl	b6b3c <HAL_USB_USART_Receive_Data>
}
   b74a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b74a6:	bd08      	pop	{r3, pc}

000b74a8 <_ZN9USBSerial4peekEv>:
{
   b74a8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b74aa:	2101      	movs	r1, #1
   b74ac:	7c00      	ldrb	r0, [r0, #16]
   b74ae:	f7ff fb45 	bl	b6b3c <HAL_USB_USART_Receive_Data>
}
   b74b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b74b6:	bd08      	pop	{r3, pc}

000b74b8 <_ZN9USBSerial17availableForWriteEv>:
{
   b74b8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b74ba:	7c00      	ldrb	r0, [r0, #16]
   b74bc:	f7ff fb36 	bl	b6b2c <HAL_USB_USART_Available_Data_For_Write>
}
   b74c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b74c4:	bd08      	pop	{r3, pc}

000b74c6 <_ZN9USBSerial9availableEv>:
{
   b74c6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b74c8:	7c00      	ldrb	r0, [r0, #16]
   b74ca:	f7ff fb27 	bl	b6b1c <HAL_USB_USART_Available_Data>
}
   b74ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b74d2:	bd08      	pop	{r3, pc}

000b74d4 <_ZN9USBSerial5writeEh>:
{
   b74d4:	b513      	push	{r0, r1, r4, lr}
   b74d6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b74d8:	7c00      	ldrb	r0, [r0, #16]
{
   b74da:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b74dc:	f7ff fb26 	bl	b6b2c <HAL_USB_USART_Available_Data_For_Write>
   b74e0:	2800      	cmp	r0, #0
   b74e2:	9901      	ldr	r1, [sp, #4]
   b74e4:	dc01      	bgt.n	b74ea <_ZN9USBSerial5writeEh+0x16>
   b74e6:	7c60      	ldrb	r0, [r4, #17]
   b74e8:	b120      	cbz	r0, b74f4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b74ea:	7c20      	ldrb	r0, [r4, #16]
   b74ec:	f7ff fb2e 	bl	b6b4c <HAL_USB_USART_Send_Data>
   b74f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b74f4:	b002      	add	sp, #8
   b74f6:	bd10      	pop	{r4, pc}

000b74f8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b74f8:	7c00      	ldrb	r0, [r0, #16]
   b74fa:	f7ff bb2f 	b.w	b6b5c <HAL_USB_USART_Flush_Data>

000b74fe <_ZN9USBSerialD0Ev>:
   b74fe:	b510      	push	{r4, lr}
   b7500:	2114      	movs	r1, #20
   b7502:	4604      	mov	r4, r0
   b7504:	f7fc ffaf 	bl	b4466 <_ZdlPvj>
   b7508:	4620      	mov	r0, r4
   b750a:	bd10      	pop	{r4, pc}

000b750c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b750c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b750e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7512:	4604      	mov	r4, r0
   b7514:	4608      	mov	r0, r1
   b7516:	2100      	movs	r1, #0
   b7518:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b751c:	4b04      	ldr	r3, [pc, #16]	; (b7530 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b751e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7520:	2301      	movs	r3, #1
  _serial = serial;
   b7522:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7524:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7526:	4611      	mov	r1, r2
   b7528:	f7ff fae8 	bl	b6afc <HAL_USB_USART_Init>
}
   b752c:	4620      	mov	r0, r4
   b752e:	bd10      	pop	{r4, pc}
   b7530:	000b9170 	.word	0x000b9170

000b7534 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7534:	7c00      	ldrb	r0, [r0, #16]
   b7536:	2200      	movs	r2, #0
   b7538:	f7ff bae8 	b.w	b6b0c <HAL_USB_USART_Begin>

000b753c <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b753c:	7c00      	ldrb	r0, [r0, #16]
   b753e:	f7ff bb15 	b.w	b6b6c <HAL_USB_USART_Is_Connected>

000b7542 <_Z19acquireSerialBufferv>:
{
   b7542:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7544:	2214      	movs	r2, #20
{
   b7546:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7548:	2100      	movs	r1, #0
   b754a:	f000 febf 	bl	b82cc <memset>
}
   b754e:	4620      	mov	r0, r4
   b7550:	bd10      	pop	{r4, pc}
	...

000b7554 <_Z16_fetch_usbserialv>:
{
   b7554:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7556:	4c0f      	ldr	r4, [pc, #60]	; (b7594 <_Z16_fetch_usbserialv+0x40>)
{
   b7558:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b755a:	a803      	add	r0, sp, #12
   b755c:	f7ff fff1 	bl	b7542 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7560:	7821      	ldrb	r1, [r4, #0]
   b7562:	f3bf 8f5b 	dmb	ish
   b7566:	f011 0101 	ands.w	r1, r1, #1
   b756a:	d10f      	bne.n	b758c <_Z16_fetch_usbserialv+0x38>
   b756c:	4620      	mov	r0, r4
   b756e:	9101      	str	r1, [sp, #4]
   b7570:	f7fc ff88 	bl	b4484 <__cxa_guard_acquire>
   b7574:	9901      	ldr	r1, [sp, #4]
   b7576:	b148      	cbz	r0, b758c <_Z16_fetch_usbserialv+0x38>
   b7578:	aa03      	add	r2, sp, #12
   b757a:	4807      	ldr	r0, [pc, #28]	; (b7598 <_Z16_fetch_usbserialv+0x44>)
   b757c:	f7ff ffc6 	bl	b750c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7580:	4620      	mov	r0, r4
   b7582:	f7fc ff84 	bl	b448e <__cxa_guard_release>
   b7586:	4805      	ldr	r0, [pc, #20]	; (b759c <_Z16_fetch_usbserialv+0x48>)
   b7588:	f000 fe88 	bl	b829c <atexit>
	return _usbserial;
}
   b758c:	4802      	ldr	r0, [pc, #8]	; (b7598 <_Z16_fetch_usbserialv+0x44>)
   b758e:	b008      	add	sp, #32
   b7590:	bd10      	pop	{r4, pc}
   b7592:	bf00      	nop
   b7594:	2003e704 	.word	0x2003e704
   b7598:	2003e708 	.word	0x2003e708
   b759c:	000b7495 	.word	0x000b7495

000b75a0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b75a0:	4770      	bx	lr

000b75a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b75a2:	7441      	strb	r1, [r0, #17]
}
   b75a4:	4770      	bx	lr

000b75a6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b75a6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b75a8:	7c00      	ldrb	r0, [r0, #16]
   b75aa:	f7ff f9cf 	bl	b694c <hal_usart_available_data_for_write>
}
   b75ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b75b2:	bd08      	pop	{r3, pc}

000b75b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b75b4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b75b6:	7c00      	ldrb	r0, [r0, #16]
   b75b8:	f7ff f9a0 	bl	b68fc <hal_usart_available>
}
   b75bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b75c0:	bd08      	pop	{r3, pc}

000b75c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b75c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b75c4:	7c00      	ldrb	r0, [r0, #16]
   b75c6:	f7ff f9a9 	bl	b691c <hal_usart_peek>
}
   b75ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b75ce:	bd08      	pop	{r3, pc}

000b75d0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b75d0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b75d2:	7c00      	ldrb	r0, [r0, #16]
   b75d4:	f7ff f99a 	bl	b690c <hal_usart_read>
}
   b75d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b75dc:	bd08      	pop	{r3, pc}

000b75de <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b75de:	7c00      	ldrb	r0, [r0, #16]
   b75e0:	f7ff b9a4 	b.w	b692c <hal_usart_flush>

000b75e4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b75e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b75e6:	7c45      	ldrb	r5, [r0, #17]
{
   b75e8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b75ea:	b12d      	cbz	r5, b75f8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b75ec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b75ee:	b003      	add	sp, #12
   b75f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b75f4:	f7ff b97a 	b.w	b68ec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b75f8:	7c00      	ldrb	r0, [r0, #16]
   b75fa:	9101      	str	r1, [sp, #4]
   b75fc:	f7ff f9a6 	bl	b694c <hal_usart_available_data_for_write>
   b7600:	2800      	cmp	r0, #0
   b7602:	9901      	ldr	r1, [sp, #4]
   b7604:	dcf2      	bgt.n	b75ec <_ZN11USARTSerial5writeEh+0x8>
}
   b7606:	4628      	mov	r0, r5
   b7608:	b003      	add	sp, #12
   b760a:	bd30      	pop	{r4, r5, pc}

000b760c <_ZN11USARTSerialD0Ev>:
   b760c:	b510      	push	{r4, lr}
   b760e:	2114      	movs	r1, #20
   b7610:	4604      	mov	r4, r0
   b7612:	f7fc ff28 	bl	b4466 <_ZdlPvj>
   b7616:	4620      	mov	r0, r4
   b7618:	bd10      	pop	{r4, pc}
	...

000b761c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b761c:	b510      	push	{r4, lr}
   b761e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7622:	4604      	mov	r4, r0
   b7624:	4608      	mov	r0, r1
   b7626:	4611      	mov	r1, r2
   b7628:	2200      	movs	r2, #0
   b762a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b762e:	4b04      	ldr	r3, [pc, #16]	; (b7640 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7630:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7632:	2301      	movs	r3, #1
  _serial = serial;
   b7634:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7636:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7638:	f7ff f990 	bl	b695c <hal_usart_init_ex>
}
   b763c:	4620      	mov	r0, r4
   b763e:	bd10      	pop	{r4, pc}
   b7640:	000b91a0 	.word	0x000b91a0

000b7644 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7644:	4770      	bx	lr

000b7646 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7648:	4606      	mov	r6, r0
   b764a:	4615      	mov	r5, r2
   b764c:	460c      	mov	r4, r1
   b764e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7650:	42bc      	cmp	r4, r7
   b7652:	d006      	beq.n	b7662 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7654:	6833      	ldr	r3, [r6, #0]
   b7656:	f814 1b01 	ldrb.w	r1, [r4], #1
   b765a:	689b      	ldr	r3, [r3, #8]
   b765c:	4630      	mov	r0, r6
   b765e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7660:	e7f6      	b.n	b7650 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7662:	4628      	mov	r0, r5
   b7664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7666 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7666:	7c00      	ldrb	r0, [r0, #16]
   b7668:	2200      	movs	r2, #0
   b766a:	f7ff b99f 	b.w	b69ac <hal_i2c_write>

000b766e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b766e:	7c00      	ldrb	r0, [r0, #16]
   b7670:	2100      	movs	r1, #0
   b7672:	f7ff b9a3 	b.w	b69bc <hal_i2c_available>

000b7676 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7676:	7c00      	ldrb	r0, [r0, #16]
   b7678:	2100      	movs	r1, #0
   b767a:	f7ff b9a7 	b.w	b69cc <hal_i2c_read>

000b767e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b767e:	7c00      	ldrb	r0, [r0, #16]
   b7680:	2100      	movs	r1, #0
   b7682:	f7ff b9ab 	b.w	b69dc <hal_i2c_peek>

000b7686 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7686:	7c00      	ldrb	r0, [r0, #16]
   b7688:	2100      	movs	r1, #0
   b768a:	f7ff b9af 	b.w	b69ec <hal_i2c_flush>

000b768e <_ZN7TwoWireD0Ev>:
   b768e:	b510      	push	{r4, lr}
   b7690:	2114      	movs	r1, #20
   b7692:	4604      	mov	r4, r0
   b7694:	f7fc fee7 	bl	b4466 <_ZdlPvj>
   b7698:	4620      	mov	r0, r4
   b769a:	bd10      	pop	{r4, pc}

000b769c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b769c:	b538      	push	{r3, r4, r5, lr}
   b769e:	4604      	mov	r4, r0
   b76a0:	4615      	mov	r5, r2
   b76a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b76a6:	2200      	movs	r2, #0
   b76a8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b76ac:	4b09      	ldr	r3, [pc, #36]	; (b76d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b76ae:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b76b0:	4608      	mov	r0, r1
   b76b2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b76b4:	4629      	mov	r1, r5
   b76b6:	f7ff f9a9 	bl	b6a0c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b76ba:	30bf      	adds	r0, #191	; 0xbf
   b76bc:	d108      	bne.n	b76d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b76be:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b76c0:	07db      	lsls	r3, r3, #31
   b76c2:	d505      	bpl.n	b76d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b76c4:	6868      	ldr	r0, [r5, #4]
   b76c6:	f7ff fb0d 	bl	b6ce4 <free>
    free(conf.tx_buffer);
   b76ca:	68e8      	ldr	r0, [r5, #12]
   b76cc:	f7ff fb0a 	bl	b6ce4 <free>
}
   b76d0:	4620      	mov	r0, r4
   b76d2:	bd38      	pop	{r3, r4, r5, pc}
   b76d4:	000b91d0 	.word	0x000b91d0

000b76d8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b76d8:	7c00      	ldrb	r0, [r0, #16]
   b76da:	2200      	movs	r2, #0
   b76dc:	f7ff b946 	b.w	b696c <hal_i2c_set_speed>

000b76e0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b76e0:	2300      	movs	r3, #0
   b76e2:	7c00      	ldrb	r0, [r0, #16]
   b76e4:	461a      	mov	r2, r3
   b76e6:	4619      	mov	r1, r3
   b76e8:	f7ff b948 	b.w	b697c <hal_i2c_begin>

000b76ec <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b76ec:	7c00      	ldrb	r0, [r0, #16]
   b76ee:	2200      	movs	r2, #0
   b76f0:	f7ff b94c 	b.w	b698c <hal_i2c_begin_transmission>

000b76f4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b76f4:	b2c9      	uxtb	r1, r1
   b76f6:	f7ff bff9 	b.w	b76ec <_ZN7TwoWire17beginTransmissionEh>

000b76fa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b76fa:	7c00      	ldrb	r0, [r0, #16]
   b76fc:	2200      	movs	r2, #0
   b76fe:	f7ff b94d 	b.w	b699c <hal_i2c_end_transmission>

000b7702 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7702:	2101      	movs	r1, #1
   b7704:	f7ff bff9 	b.w	b76fa <_ZN7TwoWire15endTransmissionEh>

000b7708 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7708:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b770a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b770c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7710:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7712:	2201      	movs	r2, #1
   b7714:	f04f 33ff 	mov.w	r3, #4294967295
   b7718:	f10d 0107 	add.w	r1, sp, #7
   b771c:	47a0      	blx	r4
}
   b771e:	b002      	add	sp, #8
   b7720:	bd10      	pop	{r4, pc}

000b7722 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7722:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7724:	6803      	ldr	r3, [r0, #0]
   b7726:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7728:	f04f 33ff 	mov.w	r3, #4294967295
   b772c:	46a4      	mov	ip, r4
}
   b772e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7732:	4760      	bx	ip

000b7734 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7734:	b513      	push	{r0, r1, r4, lr}
   b7736:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7738:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b773a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b773e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7740:	f10d 0107 	add.w	r1, sp, #7
   b7744:	2201      	movs	r2, #1
   b7746:	47a0      	blx	r4
}
   b7748:	b002      	add	sp, #8
   b774a:	bd10      	pop	{r4, pc}

000b774c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b774c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b774e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7750:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7754:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7758:	429a      	cmp	r2, r3
int TCPClient::read() {
   b775a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b775c:	d008      	beq.n	b7770 <_ZN9TCPClient4readEv+0x24>
   b775e:	6963      	ldr	r3, [r4, #20]
   b7760:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7764:	1c51      	adds	r1, r2, #1
   b7766:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b776a:	4413      	add	r3, r2
   b776c:	7918      	ldrb	r0, [r3, #4]
}
   b776e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7770:	6803      	ldr	r3, [r0, #0]
   b7772:	691b      	ldr	r3, [r3, #16]
   b7774:	4798      	blx	r3
   b7776:	2800      	cmp	r0, #0
   b7778:	d1f1      	bne.n	b775e <_ZN9TCPClient4readEv+0x12>
   b777a:	f04f 30ff 	mov.w	r0, #4294967295
   b777e:	e7f6      	b.n	b776e <_ZN9TCPClient4readEv+0x22>

000b7780 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7780:	4770      	bx	lr

000b7782 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7782:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7784:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7786:	43c0      	mvns	r0, r0
   b7788:	0fc0      	lsrs	r0, r0, #31
   b778a:	4770      	bx	lr

000b778c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b778c:	4770      	bx	lr
	...

000b7790 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7790:	4b06      	ldr	r3, [pc, #24]	; (b77ac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7792:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7794:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7796:	f100 040c 	add.w	r4, r0, #12
	    ||
   b779a:	d005      	beq.n	b77a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b779c:	4608      	mov	r0, r1
   b779e:	f000 fc6b 	bl	b8078 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b77a2:	2800      	cmp	r0, #0
   b77a4:	bf08      	it	eq
   b77a6:	2400      	moveq	r4, #0
      }
   b77a8:	4620      	mov	r0, r4
   b77aa:	bd10      	pop	{r4, pc}
   b77ac:	000b912c 	.word	0x000b912c

000b77b0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b77b0:	b510      	push	{r4, lr}
   b77b2:	21ac      	movs	r1, #172	; 0xac
   b77b4:	4604      	mov	r4, r0
   b77b6:	f7fc fe56 	bl	b4466 <_ZdlPvj>
   b77ba:	4620      	mov	r0, r4
   b77bc:	bd10      	pop	{r4, pc}

000b77be <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b77be:	21ac      	movs	r1, #172	; 0xac
   b77c0:	f7fc be51 	b.w	b4466 <_ZdlPvj>

000b77c4 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b77c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b77c8:	f04f 0800 	mov.w	r8, #0
   b77cc:	b086      	sub	sp, #24
   b77ce:	461c      	mov	r4, r3
   b77d0:	f8c0 8004 	str.w	r8, [r0, #4]
   b77d4:	4605      	mov	r5, r0
   b77d6:	460e      	mov	r6, r1
   b77d8:	4617      	mov	r7, r2
    struct timeval tv = {};
   b77da:	4641      	mov	r1, r8
   b77dc:	2210      	movs	r2, #16
   b77de:	a802      	add	r0, sp, #8
   b77e0:	f000 fd74 	bl	b82cc <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b77e4:	1c63      	adds	r3, r4, #1
   b77e6:	d009      	beq.n	b77fc <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b77e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b77ec:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b77f0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b77f4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b77f8:	435c      	muls	r4, r3
   b77fa:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b77fc:	6968      	ldr	r0, [r5, #20]
   b77fe:	2310      	movs	r3, #16
   b7800:	9300      	str	r3, [sp, #0]
   b7802:	6800      	ldr	r0, [r0, #0]
   b7804:	ab02      	add	r3, sp, #8
   b7806:	f241 0205 	movw	r2, #4101	; 0x1005
   b780a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b780e:	f7ff f905 	bl	b6a1c <sock_setsockopt>
    if (ret < 0) {
   b7812:	2800      	cmp	r0, #0
   b7814:	da07      	bge.n	b7826 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7816:	f7ff fa7d 	bl	b6d14 <__errno>
   b781a:	6803      	ldr	r3, [r0, #0]
   b781c:	606b      	str	r3, [r5, #4]
        return 0;
   b781e:	2000      	movs	r0, #0
}
   b7820:	b006      	add	sp, #24
   b7822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7826:	6968      	ldr	r0, [r5, #20]
   b7828:	2300      	movs	r3, #0
   b782a:	6800      	ldr	r0, [r0, #0]
   b782c:	463a      	mov	r2, r7
   b782e:	4631      	mov	r1, r6
   b7830:	f7ff f914 	bl	b6a5c <sock_send>
    if (ret < 0) {
   b7834:	1e03      	subs	r3, r0, #0
   b7836:	dbee      	blt.n	b7816 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7838:	4618      	mov	r0, r3
   b783a:	e7f1      	b.n	b7820 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b783c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b783c:	b530      	push	{r4, r5, lr}
   b783e:	b087      	sub	sp, #28
   b7840:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7842:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7844:	4668      	mov	r0, sp
   b7846:	f7ff fe13 	bl	b7470 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b784a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b784c:	3404      	adds	r4, #4
   b784e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7850:	682b      	ldr	r3, [r5, #0]
   b7852:	7023      	strb	r3, [r4, #0]
    }
   b7854:	b007      	add	sp, #28
   b7856:	bd30      	pop	{r4, r5, pc}

000b7858 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7858:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b785a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b785c:	4b05      	ldr	r3, [pc, #20]	; (b7874 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b785e:	4604      	mov	r4, r0
   b7860:	358c      	adds	r5, #140	; 0x8c
   b7862:	f844 3b04 	str.w	r3, [r4], #4
   b7866:	4606      	mov	r6, r0
   b7868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b786a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b786c:	682b      	ldr	r3, [r5, #0]
   b786e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7870:	4630      	mov	r0, r6
   b7872:	bd70      	pop	{r4, r5, r6, pc}
   b7874:	000b915c 	.word	0x000b915c

000b7878 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b787c:	4698      	mov	r8, r3
    stop();
   b787e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7880:	b093      	sub	sp, #76	; 0x4c
   b7882:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7884:	2400      	movs	r4, #0
    stop();
   b7886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7888:	4606      	mov	r6, r0
   b788a:	4617      	mov	r7, r2
    stop();
   b788c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b788e:	4628      	mov	r0, r5
   b7890:	466b      	mov	r3, sp
   b7892:	4622      	mov	r2, r4
   b7894:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7896:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7898:	f7fe ff90 	bl	b67bc <netdb_getaddrinfo>
   b789c:	4605      	mov	r5, r0
   b789e:	2800      	cmp	r0, #0
   b78a0:	d163      	bne.n	b796a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b78a2:	9b00      	ldr	r3, [sp, #0]
   b78a4:	2b00      	cmp	r3, #0
   b78a6:	d04b      	beq.n	b7940 <_ZN9TCPClient7connectEPKctm+0xc8>
   b78a8:	695b      	ldr	r3, [r3, #20]
   b78aa:	2b00      	cmp	r3, #0
   b78ac:	d048      	beq.n	b7940 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b78ae:	a806      	add	r0, sp, #24
   b78b0:	f7ff fd9a 	bl	b73e8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b78b4:	9b00      	ldr	r3, [sp, #0]
   b78b6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b78b8:	7863      	ldrb	r3, [r4, #1]
   b78ba:	2b02      	cmp	r3, #2
   b78bc:	d104      	bne.n	b78c8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b78be:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b78c0:	a806      	add	r0, sp, #24
   b78c2:	f7ff ffbb 	bl	b783c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b78c6:	e026      	b.n	b7916 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b78c8:	2b0a      	cmp	r3, #10
   b78ca:	d124      	bne.n	b7916 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b78cc:	2211      	movs	r2, #17
   b78ce:	4629      	mov	r1, r5
   b78d0:	a801      	add	r0, sp, #4
   b78d2:	f000 fcfb 	bl	b82cc <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b78d6:	68a3      	ldr	r3, [r4, #8]
   b78d8:	2b00      	cmp	r3, #0
   b78da:	d038      	beq.n	b794e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b78dc:	f104 0308 	add.w	r3, r4, #8
   b78e0:	f10d 0c04 	add.w	ip, sp, #4
   b78e4:	3418      	adds	r4, #24
   b78e6:	6818      	ldr	r0, [r3, #0]
   b78e8:	6859      	ldr	r1, [r3, #4]
   b78ea:	4662      	mov	r2, ip
   b78ec:	c203      	stmia	r2!, {r0, r1}
   b78ee:	3308      	adds	r3, #8
   b78f0:	42a3      	cmp	r3, r4
   b78f2:	4694      	mov	ip, r2
   b78f4:	d1f7      	bne.n	b78e6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b78f6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b78f8:	a901      	add	r1, sp, #4
   b78fa:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b78fc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7900:	f7ff fd80 	bl	b7404 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7904:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7908:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b790c:	ac07      	add	r4, sp, #28
   b790e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7910:	f8dc 3000 	ldr.w	r3, [ip]
   b7914:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7916:	a806      	add	r0, sp, #24
   b7918:	f7ff fd86 	bl	b7428 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b791c:	b180      	cbz	r0, b7940 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b791e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7920:	ad07      	add	r5, sp, #28
   b7922:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7926:	4b12      	ldr	r3, [pc, #72]	; (b7970 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7928:	930c      	str	r3, [sp, #48]	; 0x30
   b792a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b792c:	ac0d      	add	r4, sp, #52	; 0x34
   b792e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7930:	682b      	ldr	r3, [r5, #0]
   b7932:	7023      	strb	r3, [r4, #0]
   b7934:	463a      	mov	r2, r7
   b7936:	4643      	mov	r3, r8
   b7938:	a90c      	add	r1, sp, #48	; 0x30
   b793a:	4630      	mov	r0, r6
   b793c:	47c8      	blx	r9
   b793e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7940:	9800      	ldr	r0, [sp, #0]
   b7942:	f7fe ff33 	bl	b67ac <netdb_freeaddrinfo>
}
   b7946:	4628      	mov	r0, r5
   b7948:	b013      	add	sp, #76	; 0x4c
   b794a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b794e:	68e3      	ldr	r3, [r4, #12]
   b7950:	2b00      	cmp	r3, #0
   b7952:	d1c3      	bne.n	b78dc <_ZN9TCPClient7connectEPKctm+0x64>
   b7954:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7958:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b795c:	f7fe ffb6 	bl	b68cc <inet_htonl>
   b7960:	4581      	cmp	r9, r0
   b7962:	d1bb      	bne.n	b78dc <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7964:	f104 0114 	add.w	r1, r4, #20
   b7968:	e7aa      	b.n	b78c0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b796a:	4625      	mov	r5, r4
   b796c:	e7e8      	b.n	b7940 <_ZN9TCPClient7connectEPKctm+0xc8>
   b796e:	bf00      	nop
   b7970:	000b915c 	.word	0x000b915c

000b7974 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7974:	b538      	push	{r3, r4, r5, lr}
   b7976:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7978:	681a      	ldr	r2, [r3, #0]
   b797a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b797c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b797e:	da10      	bge.n	b79a2 <_ZN9TCPClient9connectedEv+0x2e>
   b7980:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7984:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7988:	429a      	cmp	r2, r3
   b798a:	d10a      	bne.n	b79a2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b798c:	6803      	ldr	r3, [r0, #0]
   b798e:	691b      	ldr	r3, [r3, #16]
   b7990:	4798      	blx	r3
        if (!rv) {
   b7992:	4604      	mov	r4, r0
   b7994:	b928      	cbnz	r0, b79a2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7996:	682b      	ldr	r3, [r5, #0]
   b7998:	4628      	mov	r0, r5
   b799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b799c:	4798      	blx	r3
        rv = available();
   b799e:	4620      	mov	r0, r4
}
   b79a0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b79a2:	2001      	movs	r0, #1
   b79a4:	e7fc      	b.n	b79a0 <_ZN9TCPClient9connectedEv+0x2c>

000b79a6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b79a6:	b510      	push	{r4, lr}
   b79a8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b79aa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b79ae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b79b2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b79b4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b79b6:	d005      	beq.n	b79c4 <_ZN9TCPClient4peekEv+0x1e>
   b79b8:	6963      	ldr	r3, [r4, #20]
   b79ba:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b79be:	4413      	add	r3, r2
   b79c0:	7918      	ldrb	r0, [r3, #4]
}
   b79c2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b79c4:	6803      	ldr	r3, [r0, #0]
   b79c6:	691b      	ldr	r3, [r3, #16]
   b79c8:	4798      	blx	r3
   b79ca:	2800      	cmp	r0, #0
   b79cc:	d1f4      	bne.n	b79b8 <_ZN9TCPClient4peekEv+0x12>
   b79ce:	f04f 30ff 	mov.w	r0, #4294967295
   b79d2:	e7f6      	b.n	b79c2 <_ZN9TCPClient4peekEv+0x1c>

000b79d4 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b79d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79d6:	6943      	ldr	r3, [r0, #20]
   b79d8:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b79da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b79de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b79e2:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b79e4:	4605      	mov	r5, r0
   b79e6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b79e8:	d016      	beq.n	b7a18 <_ZN9TCPClient4readEPhj+0x44>
   b79ea:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b79ec:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b79f0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b79f4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b79f6:	42bc      	cmp	r4, r7
   b79f8:	bf28      	it	cs
   b79fa:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b79fc:	3304      	adds	r3, #4
   b79fe:	4622      	mov	r2, r4
   b7a00:	4419      	add	r1, r3
   b7a02:	4630      	mov	r0, r6
   b7a04:	f000 fc54 	bl	b82b0 <memcpy>
   b7a08:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7a0a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7a0e:	4423      	add	r3, r4
   b7a10:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7a14:	4620      	mov	r0, r4
   b7a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7a18:	6803      	ldr	r3, [r0, #0]
   b7a1a:	691b      	ldr	r3, [r3, #16]
   b7a1c:	4798      	blx	r3
   b7a1e:	2800      	cmp	r0, #0
   b7a20:	d1e3      	bne.n	b79ea <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7a22:	f04f 34ff 	mov.w	r4, #4294967295
   b7a26:	e7f5      	b.n	b7a14 <_ZN9TCPClient4readEPhj+0x40>

000b7a28 <_ZN9TCPClient12flush_bufferEv>:
   b7a28:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7a2a:	2300      	movs	r3, #0
   b7a2c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7a30:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7a32:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7a36:	4770      	bx	lr

000b7a38 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a3c:	461f      	mov	r7, r3
    stop();
   b7a3e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7a40:	460c      	mov	r4, r1
    stop();
   b7a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7a44:	b08a      	sub	sp, #40	; 0x28
   b7a46:	4605      	mov	r5, r0
   b7a48:	4616      	mov	r6, r2
    stop();
   b7a4a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7a4c:	7d23      	ldrb	r3, [r4, #20]
   b7a4e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7a52:	2b04      	cmp	r3, #4
   b7a54:	bf0c      	ite	eq
   b7a56:	2002      	moveq	r0, #2
   b7a58:	200a      	movne	r0, #10
   b7a5a:	2206      	movs	r2, #6
   b7a5c:	2101      	movs	r1, #1
   b7a5e:	f7ff f805 	bl	b6a6c <sock_socket>
   b7a62:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7a66:	696b      	ldr	r3, [r5, #20]
   b7a68:	681b      	ldr	r3, [r3, #0]
   b7a6a:	2b00      	cmp	r3, #0
   b7a6c:	da08      	bge.n	b7a80 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7a6e:	682b      	ldr	r3, [r5, #0]
   b7a70:	4628      	mov	r0, r5
   b7a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7a74:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7a76:	4798      	blx	r3
}
   b7a78:	4620      	mov	r0, r4
   b7a7a:	b00a      	add	sp, #40	; 0x28
   b7a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7a80:	4628      	mov	r0, r5
   b7a82:	f7ff ffd1 	bl	b7a28 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7a86:	b1b7      	cbz	r7, b7ab6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7a88:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7a8a:	a903      	add	r1, sp, #12
   b7a8c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7a8e:	9303      	str	r3, [sp, #12]
   b7a90:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7a94:	f7fe fec2 	bl	b681c <if_index_to_name>
   b7a98:	2800      	cmp	r0, #0
   b7a9a:	d1e8      	bne.n	b7a6e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7a9c:	6968      	ldr	r0, [r5, #20]
   b7a9e:	2306      	movs	r3, #6
   b7aa0:	9300      	str	r3, [sp, #0]
   b7aa2:	6800      	ldr	r0, [r0, #0]
   b7aa4:	ab03      	add	r3, sp, #12
   b7aa6:	f241 020b 	movw	r2, #4107	; 0x100b
   b7aaa:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7aae:	f7fe ffb5 	bl	b6a1c <sock_setsockopt>
   b7ab2:	2800      	cmp	r0, #0
   b7ab4:	d1db      	bne.n	b7a6e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7ab6:	221c      	movs	r2, #28
   b7ab8:	2100      	movs	r1, #0
   b7aba:	a803      	add	r0, sp, #12
   b7abc:	f000 fc06 	bl	b82cc <memset>
    if (ip.version() == 4) {
   b7ac0:	7d23      	ldrb	r3, [r4, #20]
   b7ac2:	2b04      	cmp	r3, #4
   b7ac4:	d11d      	bne.n	b7b02 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7ac6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7aca:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7acc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7ad0:	f7fe ff04 	bl	b68dc <inet_htons>
   b7ad4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7ad8:	6860      	ldr	r0, [r4, #4]
   b7ada:	f7fe fef7 	bl	b68cc <inet_htonl>
   b7ade:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7ae0:	696b      	ldr	r3, [r5, #20]
   b7ae2:	221c      	movs	r2, #28
   b7ae4:	6818      	ldr	r0, [r3, #0]
   b7ae6:	a903      	add	r1, sp, #12
   b7ae8:	f7fe ffa8 	bl	b6a3c <sock_connect>
   b7aec:	2800      	cmp	r0, #0
   b7aee:	d1be      	bne.n	b7a6e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7af0:	3404      	adds	r4, #4
   b7af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7af4:	696d      	ldr	r5, [r5, #20]
   b7af6:	358c      	adds	r5, #140	; 0x8c
   b7af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7afa:	6823      	ldr	r3, [r4, #0]
   b7afc:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7afe:	2401      	movs	r4, #1
   b7b00:	e7ba      	b.n	b7a78 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7b02:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7b06:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7b08:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7b0c:	f7fe fee6 	bl	b68dc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7b10:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7b12:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7b16:	1d23      	adds	r3, r4, #4
   b7b18:	f104 0714 	add.w	r7, r4, #20
   b7b1c:	6818      	ldr	r0, [r3, #0]
   b7b1e:	6859      	ldr	r1, [r3, #4]
   b7b20:	4632      	mov	r2, r6
   b7b22:	c203      	stmia	r2!, {r0, r1}
   b7b24:	3308      	adds	r3, #8
   b7b26:	42bb      	cmp	r3, r7
   b7b28:	4616      	mov	r6, r2
   b7b2a:	d1f7      	bne.n	b7b1c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7b2c:	e7d8      	b.n	b7ae0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7b30 <_ZN9TCPClient9availableEv>:
{
   b7b30:	b530      	push	{r4, r5, lr}
   b7b32:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7b34:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7b38:	b08b      	sub	sp, #44	; 0x2c
   b7b3a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7b3c:	b12b      	cbz	r3, b7b4a <_ZN9TCPClient9availableEv+0x1a>
   b7b3e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7b42:	429a      	cmp	r2, r3
   b7b44:	d101      	bne.n	b7b4a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7b46:	f7ff ff6f 	bl	b7a28 <_ZN9TCPClient12flush_bufferEv>
   b7b4a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7b4c:	6808      	ldr	r0, [r1, #0]
   b7b4e:	2800      	cmp	r0, #0
   b7b50:	db18      	blt.n	b7b84 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7b52:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7b56:	2d7f      	cmp	r5, #127	; 0x7f
   b7b58:	d814      	bhi.n	b7b84 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7b5a:	3104      	adds	r1, #4
   b7b5c:	2308      	movs	r3, #8
   b7b5e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7b62:	4429      	add	r1, r5
   b7b64:	f7fe ff72 	bl	b6a4c <sock_recv>
            if (ret > 0) {
   b7b68:	2800      	cmp	r0, #0
   b7b6a:	dd13      	ble.n	b7b94 <_ZN9TCPClient9availableEv+0x64>
   b7b6c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7b6e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b72:	b90a      	cbnz	r2, b7b78 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7b74:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7b78:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7b7a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b7e:	4410      	add	r0, r2
   b7b80:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7b84:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7b86:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7b8a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7b8e:	1ac0      	subs	r0, r0, r3
   b7b90:	b00b      	add	sp, #44	; 0x2c
   b7b92:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7b94:	f7ff f8be 	bl	b6d14 <__errno>
   b7b98:	6803      	ldr	r3, [r0, #0]
   b7b9a:	2b0b      	cmp	r3, #11
   b7b9c:	d0f2      	beq.n	b7b84 <_ZN9TCPClient9availableEv+0x54>
   b7b9e:	f7ff f8b9 	bl	b6d14 <__errno>
   b7ba2:	6803      	ldr	r3, [r0, #0]
   b7ba4:	2b0b      	cmp	r3, #11
   b7ba6:	d0ed      	beq.n	b7b84 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7ba8:	2320      	movs	r3, #32
   b7baa:	2500      	movs	r5, #0
   b7bac:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7bb0:	f7ff f8b0 	bl	b6d14 <__errno>
   b7bb4:	6803      	ldr	r3, [r0, #0]
   b7bb6:	9301      	str	r3, [sp, #4]
   b7bb8:	4b08      	ldr	r3, [pc, #32]	; (b7bdc <_ZN9TCPClient9availableEv+0xac>)
   b7bba:	4909      	ldr	r1, [pc, #36]	; (b7be0 <_ZN9TCPClient9availableEv+0xb0>)
   b7bbc:	9300      	str	r3, [sp, #0]
   b7bbe:	aa02      	add	r2, sp, #8
   b7bc0:	462b      	mov	r3, r5
   b7bc2:	2032      	movs	r0, #50	; 0x32
   b7bc4:	f7fe ffe2 	bl	b6b8c <log_message>
                    sock_close(d_->sock);
   b7bc8:	6963      	ldr	r3, [r4, #20]
   b7bca:	6818      	ldr	r0, [r3, #0]
   b7bcc:	f7fe ff2e 	bl	b6a2c <sock_close>
   b7bd0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7bd2:	f04f 32ff 	mov.w	r2, #4294967295
   b7bd6:	601a      	str	r2, [r3, #0]
   b7bd8:	e7d4      	b.n	b7b84 <_ZN9TCPClient9availableEv+0x54>
   b7bda:	bf00      	nop
   b7bdc:	000b91f7 	.word	0x000b91f7
   b7be0:	000b91f0 	.word	0x000b91f0

000b7be4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7be4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7be6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7be8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7bea:	6818      	ldr	r0, [r3, #0]
   b7bec:	2800      	cmp	r0, #0
   b7bee:	db01      	blt.n	b7bf4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7bf0:	f7fe ff1c 	bl	b6a2c <sock_close>
   b7bf4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7bf6:	f04f 32ff 	mov.w	r2, #4294967295
   b7bfa:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7bfc:	6960      	ldr	r0, [r4, #20]
   b7bfe:	2211      	movs	r2, #17
   b7c00:	2100      	movs	r1, #0
   b7c02:	308c      	adds	r0, #140	; 0x8c
   b7c04:	f000 fb62 	bl	b82cc <memset>
    flush_buffer();
   b7c08:	4620      	mov	r0, r4
}
   b7c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7c0e:	f7ff bf0b 	b.w	b7a28 <_ZN9TCPClient12flush_bufferEv>

000b7c12 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7c12:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7c14:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7c16:	4604      	mov	r4, r0
          total(0) {
   b7c18:	6001      	str	r1, [r0, #0]
   b7c1a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7c1e:	3088      	adds	r0, #136	; 0x88
   b7c20:	f7ff fbe2 	bl	b73e8 <_ZN9IPAddressC1Ev>
}
   b7c24:	4620      	mov	r0, r4
   b7c26:	bd10      	pop	{r4, pc}

000b7c28 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7c28:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7c2a:	2300      	movs	r3, #0
   b7c2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7c30:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7c34:	4a0e      	ldr	r2, [pc, #56]	; (b7c70 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7c36:	6103      	str	r3, [r0, #16]
   b7c38:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7c3a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7c3c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7c3e:	20ac      	movs	r0, #172	; 0xac
   b7c40:	9101      	str	r1, [sp, #4]
   b7c42:	f7fc fc0a 	bl	b445a <_Znwj>
	  auto __pi = ::new (__mem)
   b7c46:	1e05      	subs	r5, r0, #0
   b7c48:	f105 060c 	add.w	r6, r5, #12
   b7c4c:	d008      	beq.n	b7c60 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7c4e:	2301      	movs	r3, #1
   b7c50:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7c54:	4b07      	ldr	r3, [pc, #28]	; (b7c74 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7c56:	9901      	ldr	r1, [sp, #4]
   b7c58:	602b      	str	r3, [r5, #0]
   b7c5a:	4630      	mov	r0, r6
   b7c5c:	f7ff ffd9 	bl	b7c12 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7c60:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7c62:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7c66:	f7ff fedf 	bl	b7a28 <_ZN9TCPClient12flush_bufferEv>
}
   b7c6a:	b002      	add	sp, #8
   b7c6c:	bd70      	pop	{r4, r5, r6, pc}
   b7c6e:	bf00      	nop
   b7c70:	000b922c 	.word	0x000b922c
   b7c74:	000b9210 	.word	0x000b9210

000b7c78 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7c78:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7c7a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b7c7e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7c80:	f7ff ffd2 	bl	b7c28 <_ZN9TCPClientC1Ei>
}
   b7c84:	4620      	mov	r0, r4
   b7c86:	bd10      	pop	{r4, pc}

000b7c88 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7c88:	b510      	push	{r4, lr}
   b7c8a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7c8c:	6800      	ldr	r0, [r0, #0]
   b7c8e:	2800      	cmp	r0, #0
   b7c90:	db01      	blt.n	b7c96 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7c92:	f7fe fecb 	bl	b6a2c <sock_close>
    }
}
   b7c96:	4620      	mov	r0, r4
   b7c98:	bd10      	pop	{r4, pc}

000b7c9a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7c9a:	300c      	adds	r0, #12
   b7c9c:	f7ff bff4 	b.w	b7c88 <_ZN9TCPClient4DataD1Ev>

000b7ca0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7ca0:	2200      	movs	r2, #0
   b7ca2:	6840      	ldr	r0, [r0, #4]
   b7ca4:	4611      	mov	r1, r2
   b7ca6:	f7fe bfbd 	b.w	b6c24 <network_ready>

000b7caa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7caa:	2200      	movs	r2, #0
   b7cac:	6840      	ldr	r0, [r0, #4]
   b7cae:	4611      	mov	r1, r2
   b7cb0:	f7fe bfd8 	b.w	b6c64 <network_listening>

000b7cb4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7cb4:	2200      	movs	r2, #0
   b7cb6:	6840      	ldr	r0, [r0, #4]
   b7cb8:	4611      	mov	r1, r2
   b7cba:	f7fe bfe3 	b.w	b6c84 <network_get_listen_timeout>

000b7cbe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7cbe:	6840      	ldr	r0, [r0, #4]
   b7cc0:	2200      	movs	r2, #0
   b7cc2:	f7fe bfd7 	b.w	b6c74 <network_set_listen_timeout>

000b7cc6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7cc6:	6840      	ldr	r0, [r0, #4]
   b7cc8:	2200      	movs	r2, #0
   b7cca:	f081 0101 	eor.w	r1, r1, #1
   b7cce:	f7fe bfc1 	b.w	b6c54 <network_listen>

000b7cd2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7cd2:	2300      	movs	r3, #0
   b7cd4:	6840      	ldr	r0, [r0, #4]
   b7cd6:	461a      	mov	r2, r3
   b7cd8:	4619      	mov	r1, r3
   b7cda:	f7fe bfb3 	b.w	b6c44 <network_off>

000b7cde <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7cde:	2300      	movs	r3, #0
   b7ce0:	6840      	ldr	r0, [r0, #4]
   b7ce2:	461a      	mov	r2, r3
   b7ce4:	4619      	mov	r1, r3
   b7ce6:	f7fe bfa5 	b.w	b6c34 <network_on>

000b7cea <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7cea:	2200      	movs	r2, #0
   b7cec:	6840      	ldr	r0, [r0, #4]
   b7cee:	4611      	mov	r1, r2
   b7cf0:	f7fe bf88 	b.w	b6c04 <network_connecting>

000b7cf4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7cf4:	6840      	ldr	r0, [r0, #4]
   b7cf6:	2200      	movs	r2, #0
   b7cf8:	2102      	movs	r1, #2
   b7cfa:	f7fe bf8b 	b.w	b6c14 <network_disconnect>

000b7cfe <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7cfe:	2300      	movs	r3, #0
   b7d00:	6840      	ldr	r0, [r0, #4]
   b7d02:	461a      	mov	r2, r3
   b7d04:	f7fe bf76 	b.w	b6bf4 <network_connect>

000b7d08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7d08:	4b02      	ldr	r3, [pc, #8]	; (b7d14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7d0a:	2204      	movs	r2, #4
   b7d0c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7d0e:	4a02      	ldr	r2, [pc, #8]	; (b7d18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7d10:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7d12:	4770      	bx	lr
   b7d14:	2003e71c 	.word	0x2003e71c
   b7d18:	000b9278 	.word	0x000b9278

000b7d1c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7d1c:	2300      	movs	r3, #0
   b7d1e:	6840      	ldr	r0, [r0, #4]
   b7d20:	461a      	mov	r2, r3
   b7d22:	f7fe bf67 	b.w	b6bf4 <network_connect>

000b7d26 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7d26:	6840      	ldr	r0, [r0, #4]
   b7d28:	2200      	movs	r2, #0
   b7d2a:	2102      	movs	r1, #2
   b7d2c:	f7fe bf72 	b.w	b6c14 <network_disconnect>

000b7d30 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7d30:	2200      	movs	r2, #0
   b7d32:	6840      	ldr	r0, [r0, #4]
   b7d34:	4611      	mov	r1, r2
   b7d36:	f7fe bf65 	b.w	b6c04 <network_connecting>

000b7d3a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7d3a:	2200      	movs	r2, #0
   b7d3c:	6840      	ldr	r0, [r0, #4]
   b7d3e:	4611      	mov	r1, r2
   b7d40:	f7fe bf70 	b.w	b6c24 <network_ready>

000b7d44 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7d44:	2300      	movs	r3, #0
   b7d46:	6840      	ldr	r0, [r0, #4]
   b7d48:	461a      	mov	r2, r3
   b7d4a:	4619      	mov	r1, r3
   b7d4c:	f7fe bf72 	b.w	b6c34 <network_on>

000b7d50 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7d50:	2300      	movs	r3, #0
   b7d52:	6840      	ldr	r0, [r0, #4]
   b7d54:	461a      	mov	r2, r3
   b7d56:	4619      	mov	r1, r3
   b7d58:	f7fe bf74 	b.w	b6c44 <network_off>

000b7d5c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7d5c:	6840      	ldr	r0, [r0, #4]
   b7d5e:	2100      	movs	r1, #0
   b7d60:	f7fe bf98 	b.w	b6c94 <network_is_on>

000b7d64 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7d64:	6840      	ldr	r0, [r0, #4]
   b7d66:	2100      	movs	r1, #0
   b7d68:	f7fe bf9c 	b.w	b6ca4 <network_is_off>

000b7d6c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7d6c:	6840      	ldr	r0, [r0, #4]
   b7d6e:	2200      	movs	r2, #0
   b7d70:	f081 0101 	eor.w	r1, r1, #1
   b7d74:	f7fe bf6e 	b.w	b6c54 <network_listen>

000b7d78 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7d78:	6840      	ldr	r0, [r0, #4]
   b7d7a:	2200      	movs	r2, #0
   b7d7c:	f7fe bf7a 	b.w	b6c74 <network_set_listen_timeout>

000b7d80 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7d80:	2200      	movs	r2, #0
   b7d82:	6840      	ldr	r0, [r0, #4]
   b7d84:	4611      	mov	r1, r2
   b7d86:	f7fe bf7d 	b.w	b6c84 <network_get_listen_timeout>

000b7d8a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7d8a:	2200      	movs	r2, #0
   b7d8c:	6840      	ldr	r0, [r0, #4]
   b7d8e:	4611      	mov	r1, r2
   b7d90:	f7fe bf68 	b.w	b6c64 <network_listening>

000b7d94 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7d98:	b095      	sub	sp, #84	; 0x54
   b7d9a:	4614      	mov	r4, r2
   b7d9c:	460d      	mov	r5, r1
   b7d9e:	4607      	mov	r7, r0
    IPAddress addr;
   b7da0:	f7ff fb22 	bl	b73e8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7da4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7da6:	221c      	movs	r2, #28
   b7da8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7daa:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7dac:	f000 fa8e 	bl	b82cc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7db0:	2340      	movs	r3, #64	; 0x40
   b7db2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7db4:	4620      	mov	r0, r4
   b7db6:	466b      	mov	r3, sp
   b7db8:	aa0c      	add	r2, sp, #48	; 0x30
   b7dba:	2100      	movs	r1, #0
   b7dbc:	f7fe fcfe 	bl	b67bc <netdb_getaddrinfo>
    if (!r) {
   b7dc0:	4604      	mov	r4, r0
   b7dc2:	2800      	cmp	r0, #0
   b7dc4:	d14b      	bne.n	b7e5e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7dc6:	4602      	mov	r2, r0
   b7dc8:	2101      	movs	r1, #1
   b7dca:	6868      	ldr	r0, [r5, #4]
   b7dcc:	f7fe ff2a 	bl	b6c24 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7dd0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7dd2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7dd4:	4622      	mov	r2, r4
   b7dd6:	6868      	ldr	r0, [r5, #4]
   b7dd8:	f7fe ff24 	bl	b6c24 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7ddc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7dde:	4681      	mov	r9, r0
        bool ok = false;
   b7de0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7de2:	2e00      	cmp	r6, #0
   b7de4:	d03b      	beq.n	b7e5e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7de6:	2900      	cmp	r1, #0
   b7de8:	d139      	bne.n	b7e5e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7dea:	6873      	ldr	r3, [r6, #4]
   b7dec:	2b02      	cmp	r3, #2
   b7dee:	d003      	beq.n	b7df8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7df0:	2b0a      	cmp	r3, #10
   b7df2:	d011      	beq.n	b7e18 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7df4:	69f6      	ldr	r6, [r6, #28]
   b7df6:	e7f4      	b.n	b7de2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7df8:	f1b8 0f00 	cmp.w	r8, #0
   b7dfc:	d0fa      	beq.n	b7df4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7dfe:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7e00:	a806      	add	r0, sp, #24
   b7e02:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7e04:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7e06:	f7ff fb33 	bl	b7470 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e0c:	1d3c      	adds	r4, r7, #4
   b7e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7e10:	682b      	ldr	r3, [r5, #0]
   b7e12:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7e14:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7e16:	e7ed      	b.n	b7df4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7e18:	f1b9 0f00 	cmp.w	r9, #0
   b7e1c:	d0ea      	beq.n	b7df4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7e1e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7e20:	2210      	movs	r2, #16
   b7e22:	a801      	add	r0, sp, #4
   b7e24:	f000 fa52 	bl	b82cc <memset>
                    a.v = 6;
   b7e28:	2306      	movs	r3, #6
   b7e2a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7e2e:	ad01      	add	r5, sp, #4
   b7e30:	f104 0308 	add.w	r3, r4, #8
   b7e34:	3418      	adds	r4, #24
   b7e36:	6818      	ldr	r0, [r3, #0]
   b7e38:	6859      	ldr	r1, [r3, #4]
   b7e3a:	462a      	mov	r2, r5
   b7e3c:	c203      	stmia	r2!, {r0, r1}
   b7e3e:	3308      	adds	r3, #8
   b7e40:	42a3      	cmp	r3, r4
   b7e42:	4615      	mov	r5, r2
   b7e44:	d1f7      	bne.n	b7e36 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7e46:	a901      	add	r1, sp, #4
   b7e48:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7e4a:	ad07      	add	r5, sp, #28
   b7e4c:	f7ff fada 	bl	b7404 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e52:	1d3c      	adds	r4, r7, #4
   b7e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7e56:	682b      	ldr	r3, [r5, #0]
   b7e58:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7e5a:	4649      	mov	r1, r9
   b7e5c:	e7ca      	b.n	b7df4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7e5e:	9800      	ldr	r0, [sp, #0]
   b7e60:	f7fe fca4 	bl	b67ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7e64:	4638      	mov	r0, r7
   b7e66:	b015      	add	sp, #84	; 0x54
   b7e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7e6c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7e6c:	4b02      	ldr	r3, [pc, #8]	; (b7e78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7e6e:	4a03      	ldr	r2, [pc, #12]	; (b7e7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7e70:	601a      	str	r2, [r3, #0]
   b7e72:	2200      	movs	r2, #0
   b7e74:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b7e76:	4770      	bx	lr
   b7e78:	2003e724 	.word	0x2003e724
   b7e7c:	000b92b4 	.word	0x000b92b4

000b7e80 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7e80:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7e82:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7e84:	d902      	bls.n	b7e8c <pinAvailable+0xc>
    return false;
   b7e86:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7e88:	b002      	add	sp, #8
   b7e8a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7e8c:	f1a0 030b 	sub.w	r3, r0, #11
   b7e90:	2b02      	cmp	r3, #2
   b7e92:	d81a      	bhi.n	b7eca <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7e94:	4c17      	ldr	r4, [pc, #92]	; (b7ef4 <pinAvailable+0x74>)
   b7e96:	7821      	ldrb	r1, [r4, #0]
   b7e98:	f3bf 8f5b 	dmb	ish
   b7e9c:	f011 0101 	ands.w	r1, r1, #1
   b7ea0:	d10b      	bne.n	b7eba <pinAvailable+0x3a>
   b7ea2:	4620      	mov	r0, r4
   b7ea4:	9101      	str	r1, [sp, #4]
   b7ea6:	f7fc faed 	bl	b4484 <__cxa_guard_acquire>
   b7eaa:	9901      	ldr	r1, [sp, #4]
   b7eac:	b128      	cbz	r0, b7eba <pinAvailable+0x3a>
   b7eae:	4812      	ldr	r0, [pc, #72]	; (b7ef8 <pinAvailable+0x78>)
   b7eb0:	f7fe ff8c 	bl	b6dcc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7eb4:	4620      	mov	r0, r4
   b7eb6:	f7fc faea 	bl	b448e <__cxa_guard_release>
   b7eba:	4b0f      	ldr	r3, [pc, #60]	; (b7ef8 <pinAvailable+0x78>)
   b7ebc:	7818      	ldrb	r0, [r3, #0]
   b7ebe:	f7fe fdf5 	bl	b6aac <hal_spi_is_enabled>
   b7ec2:	2800      	cmp	r0, #0
   b7ec4:	d1df      	bne.n	b7e86 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7ec6:	2001      	movs	r0, #1
   b7ec8:	e7de      	b.n	b7e88 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7eca:	2801      	cmp	r0, #1
   b7ecc:	d809      	bhi.n	b7ee2 <pinAvailable+0x62>
   b7ece:	f000 f8ad 	bl	b802c <_Z19__fetch_global_Wirev>
   b7ed2:	2100      	movs	r1, #0
   b7ed4:	7c00      	ldrb	r0, [r0, #16]
   b7ed6:	f7fe fd91 	bl	b69fc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7eda:	f080 0001 	eor.w	r0, r0, #1
   b7ede:	b2c0      	uxtb	r0, r0
   b7ee0:	e7d2      	b.n	b7e88 <pinAvailable+0x8>
   b7ee2:	3809      	subs	r0, #9
   b7ee4:	2801      	cmp	r0, #1
   b7ee6:	d8ee      	bhi.n	b7ec6 <pinAvailable+0x46>
   b7ee8:	f000 f860 	bl	b7fac <_Z22__fetch_global_Serial1v>
   b7eec:	7c00      	ldrb	r0, [r0, #16]
   b7eee:	f7fe fd25 	bl	b693c <hal_usart_is_enabled>
   b7ef2:	e7f2      	b.n	b7eda <pinAvailable+0x5a>
   b7ef4:	2003e6bc 	.word	0x2003e6bc
   b7ef8:	2003e6c0 	.word	0x2003e6c0

000b7efc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7efc:	2823      	cmp	r0, #35	; 0x23
{
   b7efe:	b538      	push	{r3, r4, r5, lr}
   b7f00:	4604      	mov	r4, r0
   b7f02:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7f04:	d80a      	bhi.n	b7f1c <pinMode+0x20>
   b7f06:	29ff      	cmp	r1, #255	; 0xff
   b7f08:	d008      	beq.n	b7f1c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7f0a:	f7ff ffb9 	bl	b7e80 <pinAvailable>
   b7f0e:	b128      	cbz	r0, b7f1c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7f10:	4629      	mov	r1, r5
   b7f12:	4620      	mov	r0, r4
}
   b7f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7f18:	f7fe bc60 	b.w	b67dc <hal_gpio_mode>
}
   b7f1c:	bd38      	pop	{r3, r4, r5, pc}

000b7f1e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b7f1e:	b538      	push	{r3, r4, r5, lr}
   b7f20:	4604      	mov	r4, r0
   b7f22:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b7f24:	f7fe fc62 	bl	b67ec <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7f28:	28ff      	cmp	r0, #255	; 0xff
   b7f2a:	d010      	beq.n	b7f4e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7f2c:	2806      	cmp	r0, #6
   b7f2e:	d804      	bhi.n	b7f3a <digitalWrite+0x1c>
   b7f30:	234d      	movs	r3, #77	; 0x4d
   b7f32:	fa23 f000 	lsr.w	r0, r3, r0
   b7f36:	07c3      	lsls	r3, r0, #31
   b7f38:	d409      	bmi.n	b7f4e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7f3a:	4620      	mov	r0, r4
   b7f3c:	f7ff ffa0 	bl	b7e80 <pinAvailable>
   b7f40:	b128      	cbz	r0, b7f4e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b7f42:	4629      	mov	r1, r5
   b7f44:	4620      	mov	r0, r4
}
   b7f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b7f4a:	f7fe bc57 	b.w	b67fc <hal_gpio_write>
}
   b7f4e:	bd38      	pop	{r3, r4, r5, pc}

000b7f50 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b7f50:	b510      	push	{r4, lr}
   b7f52:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b7f54:	f7fe fc4a 	bl	b67ec <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7f58:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7f5a:	b2db      	uxtb	r3, r3
   b7f5c:	2b01      	cmp	r3, #1
   b7f5e:	d908      	bls.n	b7f72 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7f60:	4620      	mov	r0, r4
   b7f62:	f7ff ff8d 	bl	b7e80 <pinAvailable>
   b7f66:	b120      	cbz	r0, b7f72 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b7f68:	4620      	mov	r0, r4
}
   b7f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b7f6e:	f7fe bc4d 	b.w	b680c <hal_gpio_read>
}
   b7f72:	2000      	movs	r0, #0
   b7f74:	bd10      	pop	{r4, pc}

000b7f76 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f76:	4770      	bx	lr

000b7f78 <_Z20acquireSerial1Bufferv>:
{
   b7f78:	b538      	push	{r3, r4, r5, lr}
   b7f7a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7f7c:	2514      	movs	r5, #20
   b7f7e:	462a      	mov	r2, r5
   b7f80:	2100      	movs	r1, #0
   b7f82:	f000 f9a3 	bl	b82cc <memset>
   b7f86:	8025      	strh	r5, [r4, #0]
   b7f88:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f8a:	4907      	ldr	r1, [pc, #28]	; (b7fa8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7f8c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f8e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7f90:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f92:	f000 f86f 	bl	b8074 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f96:	4904      	ldr	r1, [pc, #16]	; (b7fa8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7f98:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f9a:	4628      	mov	r0, r5
   b7f9c:	f000 f86a 	bl	b8074 <_ZnajRKSt9nothrow_t>
    };
   b7fa0:	60e0      	str	r0, [r4, #12]
}
   b7fa2:	4620      	mov	r0, r4
   b7fa4:	bd38      	pop	{r3, r4, r5, pc}
   b7fa6:	bf00      	nop
   b7fa8:	000b92e8 	.word	0x000b92e8

000b7fac <_Z22__fetch_global_Serial1v>:
{
   b7fac:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7fae:	4d0e      	ldr	r5, [pc, #56]	; (b7fe8 <_Z22__fetch_global_Serial1v+0x3c>)
   b7fb0:	7829      	ldrb	r1, [r5, #0]
   b7fb2:	f3bf 8f5b 	dmb	ish
   b7fb6:	f011 0401 	ands.w	r4, r1, #1
{
   b7fba:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7fbc:	d111      	bne.n	b7fe2 <_Z22__fetch_global_Serial1v+0x36>
   b7fbe:	4628      	mov	r0, r5
   b7fc0:	f7fc fa60 	bl	b4484 <__cxa_guard_acquire>
   b7fc4:	b168      	cbz	r0, b7fe2 <_Z22__fetch_global_Serial1v+0x36>
   b7fc6:	a801      	add	r0, sp, #4
   b7fc8:	f7ff ffd6 	bl	b7f78 <_Z20acquireSerial1Bufferv>
   b7fcc:	aa01      	add	r2, sp, #4
   b7fce:	4621      	mov	r1, r4
   b7fd0:	4806      	ldr	r0, [pc, #24]	; (b7fec <_Z22__fetch_global_Serial1v+0x40>)
   b7fd2:	f7ff fb23 	bl	b761c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7fd6:	4628      	mov	r0, r5
   b7fd8:	f7fc fa59 	bl	b448e <__cxa_guard_release>
   b7fdc:	4804      	ldr	r0, [pc, #16]	; (b7ff0 <_Z22__fetch_global_Serial1v+0x44>)
   b7fde:	f000 f95d 	bl	b829c <atexit>
    return serial1;
}
   b7fe2:	4802      	ldr	r0, [pc, #8]	; (b7fec <_Z22__fetch_global_Serial1v+0x40>)
   b7fe4:	b007      	add	sp, #28
   b7fe6:	bd30      	pop	{r4, r5, pc}
   b7fe8:	2003e72c 	.word	0x2003e72c
   b7fec:	2003e730 	.word	0x2003e730
   b7ff0:	000b7f77 	.word	0x000b7f77

000b7ff4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7ff4:	4770      	bx	lr
	...

000b7ff8 <_Z17acquireWireBufferv>:
{
   b7ff8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7ffa:	4b0a      	ldr	r3, [pc, #40]	; (b8024 <_Z17acquireWireBufferv+0x2c>)
   b7ffc:	6003      	str	r3, [r0, #0]
   b7ffe:	2301      	movs	r3, #1
{
   b8000:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8002:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8004:	4908      	ldr	r1, [pc, #32]	; (b8028 <_Z17acquireWireBufferv+0x30>)
   b8006:	2020      	movs	r0, #32
   b8008:	f000 f834 	bl	b8074 <_ZnajRKSt9nothrow_t>
	};
   b800c:	2520      	movs	r5, #32
   b800e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8010:	4905      	ldr	r1, [pc, #20]	; (b8028 <_Z17acquireWireBufferv+0x30>)
	};
   b8012:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8014:	4628      	mov	r0, r5
   b8016:	f000 f82d 	bl	b8074 <_ZnajRKSt9nothrow_t>
	};
   b801a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b801e:	4620      	mov	r0, r4
   b8020:	bd38      	pop	{r3, r4, r5, pc}
   b8022:	bf00      	nop
   b8024:	00010018 	.word	0x00010018
   b8028:	000b92e8 	.word	0x000b92e8

000b802c <_Z19__fetch_global_Wirev>:
{
   b802c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b802e:	4d0e      	ldr	r5, [pc, #56]	; (b8068 <_Z19__fetch_global_Wirev+0x3c>)
   b8030:	7829      	ldrb	r1, [r5, #0]
   b8032:	f3bf 8f5b 	dmb	ish
   b8036:	f011 0401 	ands.w	r4, r1, #1
{
   b803a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b803c:	d111      	bne.n	b8062 <_Z19__fetch_global_Wirev+0x36>
   b803e:	4628      	mov	r0, r5
   b8040:	f7fc fa20 	bl	b4484 <__cxa_guard_acquire>
   b8044:	b168      	cbz	r0, b8062 <_Z19__fetch_global_Wirev+0x36>
   b8046:	4668      	mov	r0, sp
   b8048:	f7ff ffd6 	bl	b7ff8 <_Z17acquireWireBufferv>
   b804c:	466a      	mov	r2, sp
   b804e:	4621      	mov	r1, r4
   b8050:	4806      	ldr	r0, [pc, #24]	; (b806c <_Z19__fetch_global_Wirev+0x40>)
   b8052:	f7ff fb23 	bl	b769c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8056:	4628      	mov	r0, r5
   b8058:	f7fc fa19 	bl	b448e <__cxa_guard_release>
   b805c:	4804      	ldr	r0, [pc, #16]	; (b8070 <_Z19__fetch_global_Wirev+0x44>)
   b805e:	f000 f91d 	bl	b829c <atexit>
	return wire;
}
   b8062:	4802      	ldr	r0, [pc, #8]	; (b806c <_Z19__fetch_global_Wirev+0x40>)
   b8064:	b007      	add	sp, #28
   b8066:	bd30      	pop	{r4, r5, pc}
   b8068:	2003e748 	.word	0x2003e748
   b806c:	2003e74c 	.word	0x2003e74c
   b8070:	000b7ff5 	.word	0x000b7ff5

000b8074 <_ZnajRKSt9nothrow_t>:
   b8074:	f7fc b9f3 	b.w	b445e <_Znaj>

000b8078 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8078:	4901      	ldr	r1, [pc, #4]	; (b8080 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b807a:	f000 b8f9 	b.w	b8270 <_ZNKSt9type_infoeqERKS_>
   b807e:	bf00      	nop
   b8080:	000b9304 	.word	0x000b9304

000b8084 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8086:	2400      	movs	r4, #0
   b8088:	2310      	movs	r3, #16
   b808a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b808e:	6803      	ldr	r3, [r0, #0]
   b8090:	4615      	mov	r5, r2
   b8092:	699e      	ldr	r6, [r3, #24]
   b8094:	6812      	ldr	r2, [r2, #0]
   b8096:	466b      	mov	r3, sp
   b8098:	e9cd 4400 	strd	r4, r4, [sp]
   b809c:	47b0      	blx	r6
   b809e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b80a2:	f003 0306 	and.w	r3, r3, #6
   b80a6:	2b06      	cmp	r3, #6
   b80a8:	bf03      	ittte	eq
   b80aa:	9b00      	ldreq	r3, [sp, #0]
   b80ac:	602b      	streq	r3, [r5, #0]
   b80ae:	2001      	moveq	r0, #1
   b80b0:	4620      	movne	r0, r4
   b80b2:	b004      	add	sp, #16
   b80b4:	bd70      	pop	{r4, r5, r6, pc}

000b80b6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b80b6:	9800      	ldr	r0, [sp, #0]
   b80b8:	4290      	cmp	r0, r2
   b80ba:	bf14      	ite	ne
   b80bc:	2001      	movne	r0, #1
   b80be:	2006      	moveq	r0, #6
   b80c0:	4770      	bx	lr
	...

000b80c4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b80c4:	b510      	push	{r4, lr}
   b80c6:	4b03      	ldr	r3, [pc, #12]	; (b80d4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b80c8:	6003      	str	r3, [r0, #0]
   b80ca:	4604      	mov	r4, r0
   b80cc:	f000 f8cd 	bl	b826a <_ZNSt9type_infoD1Ev>
   b80d0:	4620      	mov	r0, r4
   b80d2:	bd10      	pop	{r4, pc}
   b80d4:	000b9344 	.word	0x000b9344

000b80d8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b80d8:	b510      	push	{r4, lr}
   b80da:	4604      	mov	r4, r0
   b80dc:	f7ff fff2 	bl	b80c4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b80e0:	4620      	mov	r0, r4
   b80e2:	2108      	movs	r1, #8
   b80e4:	f7fc f9bf 	bl	b4466 <_ZdlPvj>
   b80e8:	4620      	mov	r0, r4
   b80ea:	bd10      	pop	{r4, pc}

000b80ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b80ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b80f0:	461f      	mov	r7, r3
   b80f2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b80f6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b80fa:	4598      	cmp	r8, r3
   b80fc:	4606      	mov	r6, r0
   b80fe:	4615      	mov	r5, r2
   b8100:	d107      	bne.n	b8112 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8102:	9907      	ldr	r1, [sp, #28]
   b8104:	f000 f8b4 	bl	b8270 <_ZNKSt9type_infoeqERKS_>
   b8108:	b118      	cbz	r0, b8112 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b810a:	7165      	strb	r5, [r4, #5]
   b810c:	2000      	movs	r0, #0
   b810e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8112:	4639      	mov	r1, r7
   b8114:	4630      	mov	r0, r6
   b8116:	f000 f8ab 	bl	b8270 <_ZNKSt9type_infoeqERKS_>
   b811a:	2800      	cmp	r0, #0
   b811c:	d0f6      	beq.n	b810c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b811e:	2301      	movs	r3, #1
   b8120:	f8c4 8000 	str.w	r8, [r4]
   b8124:	7125      	strb	r5, [r4, #4]
   b8126:	71a3      	strb	r3, [r4, #6]
   b8128:	e7f0      	b.n	b810c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b812a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b812a:	b538      	push	{r3, r4, r5, lr}
   b812c:	4615      	mov	r5, r2
   b812e:	461c      	mov	r4, r3
   b8130:	f000 f89e 	bl	b8270 <_ZNKSt9type_infoeqERKS_>
   b8134:	b120      	cbz	r0, b8140 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8136:	2308      	movs	r3, #8
   b8138:	60e3      	str	r3, [r4, #12]
   b813a:	2306      	movs	r3, #6
   b813c:	6025      	str	r5, [r4, #0]
   b813e:	7123      	strb	r3, [r4, #4]
   b8140:	bd38      	pop	{r3, r4, r5, pc}

000b8142 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8142:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8144:	4605      	mov	r5, r0
   b8146:	460c      	mov	r4, r1
   b8148:	9201      	str	r2, [sp, #4]
   b814a:	461e      	mov	r6, r3
   b814c:	f000 f890 	bl	b8270 <_ZNKSt9type_infoeqERKS_>
   b8150:	b950      	cbnz	r0, b8168 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8152:	2e03      	cmp	r6, #3
   b8154:	d808      	bhi.n	b8168 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8156:	6823      	ldr	r3, [r4, #0]
   b8158:	9a01      	ldr	r2, [sp, #4]
   b815a:	695b      	ldr	r3, [r3, #20]
   b815c:	4629      	mov	r1, r5
   b815e:	4620      	mov	r0, r4
   b8160:	b002      	add	sp, #8
   b8162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8166:	4718      	bx	r3
   b8168:	b002      	add	sp, #8
   b816a:	bd70      	pop	{r4, r5, r6, pc}

000b816c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b816c:	b510      	push	{r4, lr}
   b816e:	4b03      	ldr	r3, [pc, #12]	; (b817c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8170:	6003      	str	r3, [r0, #0]
   b8172:	4604      	mov	r4, r0
   b8174:	f7ff ffa6 	bl	b80c4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8178:	4620      	mov	r0, r4
   b817a:	bd10      	pop	{r4, pc}
   b817c:	000b93a4 	.word	0x000b93a4

000b8180 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8180:	b510      	push	{r4, lr}
   b8182:	4604      	mov	r4, r0
   b8184:	f7ff fff2 	bl	b816c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8188:	4620      	mov	r0, r4
   b818a:	210c      	movs	r1, #12
   b818c:	f7fc f96b 	bl	b4466 <_ZdlPvj>
   b8190:	4620      	mov	r0, r4
   b8192:	bd10      	pop	{r4, pc}

000b8194 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8196:	9f08      	ldr	r7, [sp, #32]
   b8198:	4297      	cmp	r7, r2
   b819a:	4605      	mov	r5, r0
   b819c:	460e      	mov	r6, r1
   b819e:	4614      	mov	r4, r2
   b81a0:	d00a      	beq.n	b81b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b81a2:	68a8      	ldr	r0, [r5, #8]
   b81a4:	6802      	ldr	r2, [r0, #0]
   b81a6:	9708      	str	r7, [sp, #32]
   b81a8:	6a15      	ldr	r5, [r2, #32]
   b81aa:	4631      	mov	r1, r6
   b81ac:	4622      	mov	r2, r4
   b81ae:	46ac      	mov	ip, r5
   b81b0:	b003      	add	sp, #12
   b81b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b81b6:	4760      	bx	ip
   b81b8:	4619      	mov	r1, r3
   b81ba:	9301      	str	r3, [sp, #4]
   b81bc:	f000 f858 	bl	b8270 <_ZNKSt9type_infoeqERKS_>
   b81c0:	9b01      	ldr	r3, [sp, #4]
   b81c2:	2800      	cmp	r0, #0
   b81c4:	d0ed      	beq.n	b81a2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b81c6:	2006      	movs	r0, #6
   b81c8:	b003      	add	sp, #12
   b81ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b81cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b81cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b81d0:	460d      	mov	r5, r1
   b81d2:	4619      	mov	r1, r3
   b81d4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b81d8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b81dc:	4681      	mov	r9, r0
   b81de:	4617      	mov	r7, r2
   b81e0:	4698      	mov	r8, r3
   b81e2:	f000 f845 	bl	b8270 <_ZNKSt9type_infoeqERKS_>
   b81e6:	b190      	cbz	r0, b820e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b81e8:	2d00      	cmp	r5, #0
   b81ea:	6034      	str	r4, [r6, #0]
   b81ec:	7137      	strb	r7, [r6, #4]
   b81ee:	db09      	blt.n	b8204 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b81f0:	1961      	adds	r1, r4, r5
   b81f2:	458a      	cmp	sl, r1
   b81f4:	bf0c      	ite	eq
   b81f6:	2106      	moveq	r1, #6
   b81f8:	2101      	movne	r1, #1
   b81fa:	71b1      	strb	r1, [r6, #6]
   b81fc:	2000      	movs	r0, #0
   b81fe:	b001      	add	sp, #4
   b8200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8204:	3502      	adds	r5, #2
   b8206:	d1f9      	bne.n	b81fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8208:	2301      	movs	r3, #1
   b820a:	71b3      	strb	r3, [r6, #6]
   b820c:	e7f6      	b.n	b81fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b820e:	4554      	cmp	r4, sl
   b8210:	d106      	bne.n	b8220 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8212:	4659      	mov	r1, fp
   b8214:	4648      	mov	r0, r9
   b8216:	f000 f82b 	bl	b8270 <_ZNKSt9type_infoeqERKS_>
   b821a:	b108      	cbz	r0, b8220 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b821c:	7177      	strb	r7, [r6, #5]
   b821e:	e7ed      	b.n	b81fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8220:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8224:	6803      	ldr	r3, [r0, #0]
   b8226:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b822a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b822e:	69dc      	ldr	r4, [r3, #28]
   b8230:	463a      	mov	r2, r7
   b8232:	4643      	mov	r3, r8
   b8234:	4629      	mov	r1, r5
   b8236:	46a4      	mov	ip, r4
   b8238:	b001      	add	sp, #4
   b823a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b823e:	4760      	bx	ip

000b8240 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8244:	4607      	mov	r7, r0
   b8246:	460c      	mov	r4, r1
   b8248:	4615      	mov	r5, r2
   b824a:	461e      	mov	r6, r3
   b824c:	f7ff ff6d 	bl	b812a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8250:	b948      	cbnz	r0, b8266 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8252:	68b8      	ldr	r0, [r7, #8]
   b8254:	6803      	ldr	r3, [r0, #0]
   b8256:	699f      	ldr	r7, [r3, #24]
   b8258:	462a      	mov	r2, r5
   b825a:	4633      	mov	r3, r6
   b825c:	4621      	mov	r1, r4
   b825e:	46bc      	mov	ip, r7
   b8260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8264:	4760      	bx	ip
   b8266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b826a <_ZNSt9type_infoD1Ev>:
   b826a:	4770      	bx	lr

000b826c <_ZNKSt9type_info14__is_pointer_pEv>:
   b826c:	2000      	movs	r0, #0
   b826e:	4770      	bx	lr

000b8270 <_ZNKSt9type_infoeqERKS_>:
   b8270:	4281      	cmp	r1, r0
   b8272:	b508      	push	{r3, lr}
   b8274:	d00e      	beq.n	b8294 <_ZNKSt9type_infoeqERKS_+0x24>
   b8276:	6840      	ldr	r0, [r0, #4]
   b8278:	7803      	ldrb	r3, [r0, #0]
   b827a:	2b2a      	cmp	r3, #42	; 0x2a
   b827c:	d00c      	beq.n	b8298 <_ZNKSt9type_infoeqERKS_+0x28>
   b827e:	6849      	ldr	r1, [r1, #4]
   b8280:	780b      	ldrb	r3, [r1, #0]
   b8282:	2b2a      	cmp	r3, #42	; 0x2a
   b8284:	bf08      	it	eq
   b8286:	3101      	addeq	r1, #1
   b8288:	f7fc f89a 	bl	b43c0 <strcmp>
   b828c:	fab0 f080 	clz	r0, r0
   b8290:	0940      	lsrs	r0, r0, #5
   b8292:	bd08      	pop	{r3, pc}
   b8294:	2001      	movs	r0, #1
   b8296:	e7fc      	b.n	b8292 <_ZNKSt9type_infoeqERKS_+0x22>
   b8298:	2000      	movs	r0, #0
   b829a:	e7fa      	b.n	b8292 <_ZNKSt9type_infoeqERKS_+0x22>

000b829c <atexit>:
   b829c:	2300      	movs	r3, #0
   b829e:	4601      	mov	r1, r0
   b82a0:	461a      	mov	r2, r3
   b82a2:	4618      	mov	r0, r3
   b82a4:	f000 b8e8 	b.w	b8478 <__register_exitproc>

000b82a8 <atoll>:
   b82a8:	220a      	movs	r2, #10
   b82aa:	2100      	movs	r1, #0
   b82ac:	f000 b8da 	b.w	b8464 <strtoll>

000b82b0 <memcpy>:
   b82b0:	440a      	add	r2, r1
   b82b2:	4291      	cmp	r1, r2
   b82b4:	f100 33ff 	add.w	r3, r0, #4294967295
   b82b8:	d100      	bne.n	b82bc <memcpy+0xc>
   b82ba:	4770      	bx	lr
   b82bc:	b510      	push	{r4, lr}
   b82be:	f811 4b01 	ldrb.w	r4, [r1], #1
   b82c2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b82c6:	4291      	cmp	r1, r2
   b82c8:	d1f9      	bne.n	b82be <memcpy+0xe>
   b82ca:	bd10      	pop	{r4, pc}

000b82cc <memset>:
   b82cc:	4402      	add	r2, r0
   b82ce:	4603      	mov	r3, r0
   b82d0:	4293      	cmp	r3, r2
   b82d2:	d100      	bne.n	b82d6 <memset+0xa>
   b82d4:	4770      	bx	lr
   b82d6:	f803 1b01 	strb.w	r1, [r3], #1
   b82da:	e7f9      	b.n	b82d0 <memset+0x4>

000b82dc <srand>:
   b82dc:	b538      	push	{r3, r4, r5, lr}
   b82de:	4b10      	ldr	r3, [pc, #64]	; (b8320 <srand+0x44>)
   b82e0:	681d      	ldr	r5, [r3, #0]
   b82e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b82e4:	4604      	mov	r4, r0
   b82e6:	b9b3      	cbnz	r3, b8316 <srand+0x3a>
   b82e8:	2018      	movs	r0, #24
   b82ea:	f7fe fcf3 	bl	b6cd4 <malloc>
   b82ee:	4602      	mov	r2, r0
   b82f0:	63a8      	str	r0, [r5, #56]	; 0x38
   b82f2:	b920      	cbnz	r0, b82fe <srand+0x22>
   b82f4:	4b0b      	ldr	r3, [pc, #44]	; (b8324 <srand+0x48>)
   b82f6:	480c      	ldr	r0, [pc, #48]	; (b8328 <srand+0x4c>)
   b82f8:	2142      	movs	r1, #66	; 0x42
   b82fa:	f7fe fd13 	bl	b6d24 <__assert_func>
   b82fe:	490b      	ldr	r1, [pc, #44]	; (b832c <srand+0x50>)
   b8300:	4b0b      	ldr	r3, [pc, #44]	; (b8330 <srand+0x54>)
   b8302:	e9c0 1300 	strd	r1, r3, [r0]
   b8306:	4b0b      	ldr	r3, [pc, #44]	; (b8334 <srand+0x58>)
   b8308:	6083      	str	r3, [r0, #8]
   b830a:	230b      	movs	r3, #11
   b830c:	8183      	strh	r3, [r0, #12]
   b830e:	2100      	movs	r1, #0
   b8310:	2001      	movs	r0, #1
   b8312:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8316:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8318:	2200      	movs	r2, #0
   b831a:	611c      	str	r4, [r3, #16]
   b831c:	615a      	str	r2, [r3, #20]
   b831e:	bd38      	pop	{r3, r4, r5, pc}
   b8320:	2003e4e4 	.word	0x2003e4e4
   b8324:	000b93dd 	.word	0x000b93dd
   b8328:	000b93f4 	.word	0x000b93f4
   b832c:	abcd330e 	.word	0xabcd330e
   b8330:	e66d1234 	.word	0xe66d1234
   b8334:	0005deec 	.word	0x0005deec

000b8338 <_strtoll_l.constprop.0>:
   b8338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b833c:	b085      	sub	sp, #20
   b833e:	4688      	mov	r8, r1
   b8340:	9201      	str	r2, [sp, #4]
   b8342:	4a47      	ldr	r2, [pc, #284]	; (b8460 <_strtoll_l.constprop.0+0x128>)
   b8344:	9003      	str	r0, [sp, #12]
   b8346:	461e      	mov	r6, r3
   b8348:	460d      	mov	r5, r1
   b834a:	462b      	mov	r3, r5
   b834c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8350:	5ca7      	ldrb	r7, [r4, r2]
   b8352:	f017 0708 	ands.w	r7, r7, #8
   b8356:	d1f8      	bne.n	b834a <_strtoll_l.constprop.0+0x12>
   b8358:	2c2d      	cmp	r4, #45	; 0x2d
   b835a:	d147      	bne.n	b83ec <_strtoll_l.constprop.0+0xb4>
   b835c:	782c      	ldrb	r4, [r5, #0]
   b835e:	2701      	movs	r7, #1
   b8360:	1c9d      	adds	r5, r3, #2
   b8362:	2e00      	cmp	r6, #0
   b8364:	d077      	beq.n	b8456 <_strtoll_l.constprop.0+0x11e>
   b8366:	2e10      	cmp	r6, #16
   b8368:	d109      	bne.n	b837e <_strtoll_l.constprop.0+0x46>
   b836a:	2c30      	cmp	r4, #48	; 0x30
   b836c:	d107      	bne.n	b837e <_strtoll_l.constprop.0+0x46>
   b836e:	782b      	ldrb	r3, [r5, #0]
   b8370:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b8374:	2b58      	cmp	r3, #88	; 0x58
   b8376:	d169      	bne.n	b844c <_strtoll_l.constprop.0+0x114>
   b8378:	786c      	ldrb	r4, [r5, #1]
   b837a:	2610      	movs	r6, #16
   b837c:	3502      	adds	r5, #2
   b837e:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   b8382:	f107 3bff 	add.w	fp, r7, #4294967295
   b8386:	f10a 3aff 	add.w	sl, sl, #4294967295
   b838a:	ea4f 79e6 	mov.w	r9, r6, asr #31
   b838e:	4632      	mov	r2, r6
   b8390:	464b      	mov	r3, r9
   b8392:	4658      	mov	r0, fp
   b8394:	4651      	mov	r1, sl
   b8396:	f7fb fe91 	bl	b40bc <__aeabi_uldivmod>
   b839a:	2300      	movs	r3, #0
   b839c:	9202      	str	r2, [sp, #8]
   b839e:	468c      	mov	ip, r1
   b83a0:	4602      	mov	r2, r0
   b83a2:	4619      	mov	r1, r3
   b83a4:	4618      	mov	r0, r3
   b83a6:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b83aa:	f1be 0f09 	cmp.w	lr, #9
   b83ae:	d822      	bhi.n	b83f6 <_strtoll_l.constprop.0+0xbe>
   b83b0:	4674      	mov	r4, lr
   b83b2:	42a6      	cmp	r6, r4
   b83b4:	dd30      	ble.n	b8418 <_strtoll_l.constprop.0+0xe0>
   b83b6:	f1b3 3fff 	cmp.w	r3, #4294967295
   b83ba:	d014      	beq.n	b83e6 <_strtoll_l.constprop.0+0xae>
   b83bc:	4282      	cmp	r2, r0
   b83be:	eb7c 0301 	sbcs.w	r3, ip, r1
   b83c2:	d326      	bcc.n	b8412 <_strtoll_l.constprop.0+0xda>
   b83c4:	458c      	cmp	ip, r1
   b83c6:	bf08      	it	eq
   b83c8:	4282      	cmpeq	r2, r0
   b83ca:	d102      	bne.n	b83d2 <_strtoll_l.constprop.0+0x9a>
   b83cc:	9b02      	ldr	r3, [sp, #8]
   b83ce:	42a3      	cmp	r3, r4
   b83d0:	db1f      	blt.n	b8412 <_strtoll_l.constprop.0+0xda>
   b83d2:	4371      	muls	r1, r6
   b83d4:	fb00 1109 	mla	r1, r0, r9, r1
   b83d8:	fba6 0300 	umull	r0, r3, r6, r0
   b83dc:	4419      	add	r1, r3
   b83de:	1820      	adds	r0, r4, r0
   b83e0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   b83e4:	2301      	movs	r3, #1
   b83e6:	f815 4b01 	ldrb.w	r4, [r5], #1
   b83ea:	e7dc      	b.n	b83a6 <_strtoll_l.constprop.0+0x6e>
   b83ec:	2c2b      	cmp	r4, #43	; 0x2b
   b83ee:	bf04      	itt	eq
   b83f0:	782c      	ldrbeq	r4, [r5, #0]
   b83f2:	1c9d      	addeq	r5, r3, #2
   b83f4:	e7b5      	b.n	b8362 <_strtoll_l.constprop.0+0x2a>
   b83f6:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b83fa:	f1be 0f19 	cmp.w	lr, #25
   b83fe:	d801      	bhi.n	b8404 <_strtoll_l.constprop.0+0xcc>
   b8400:	3c37      	subs	r4, #55	; 0x37
   b8402:	e7d6      	b.n	b83b2 <_strtoll_l.constprop.0+0x7a>
   b8404:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8408:	f1be 0f19 	cmp.w	lr, #25
   b840c:	d804      	bhi.n	b8418 <_strtoll_l.constprop.0+0xe0>
   b840e:	3c57      	subs	r4, #87	; 0x57
   b8410:	e7cf      	b.n	b83b2 <_strtoll_l.constprop.0+0x7a>
   b8412:	f04f 33ff 	mov.w	r3, #4294967295
   b8416:	e7e6      	b.n	b83e6 <_strtoll_l.constprop.0+0xae>
   b8418:	1c5a      	adds	r2, r3, #1
   b841a:	d109      	bne.n	b8430 <_strtoll_l.constprop.0+0xf8>
   b841c:	9a03      	ldr	r2, [sp, #12]
   b841e:	2322      	movs	r3, #34	; 0x22
   b8420:	6013      	str	r3, [r2, #0]
   b8422:	9b01      	ldr	r3, [sp, #4]
   b8424:	4658      	mov	r0, fp
   b8426:	4651      	mov	r1, sl
   b8428:	b953      	cbnz	r3, b8440 <_strtoll_l.constprop.0+0x108>
   b842a:	b005      	add	sp, #20
   b842c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8430:	b117      	cbz	r7, b8438 <_strtoll_l.constprop.0+0x100>
   b8432:	4240      	negs	r0, r0
   b8434:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8438:	9a01      	ldr	r2, [sp, #4]
   b843a:	2a00      	cmp	r2, #0
   b843c:	d0f5      	beq.n	b842a <_strtoll_l.constprop.0+0xf2>
   b843e:	b10b      	cbz	r3, b8444 <_strtoll_l.constprop.0+0x10c>
   b8440:	f105 38ff 	add.w	r8, r5, #4294967295
   b8444:	9b01      	ldr	r3, [sp, #4]
   b8446:	f8c3 8000 	str.w	r8, [r3]
   b844a:	e7ee      	b.n	b842a <_strtoll_l.constprop.0+0xf2>
   b844c:	2430      	movs	r4, #48	; 0x30
   b844e:	2e00      	cmp	r6, #0
   b8450:	d195      	bne.n	b837e <_strtoll_l.constprop.0+0x46>
   b8452:	2608      	movs	r6, #8
   b8454:	e793      	b.n	b837e <_strtoll_l.constprop.0+0x46>
   b8456:	2c30      	cmp	r4, #48	; 0x30
   b8458:	d089      	beq.n	b836e <_strtoll_l.constprop.0+0x36>
   b845a:	260a      	movs	r6, #10
   b845c:	e78f      	b.n	b837e <_strtoll_l.constprop.0+0x46>
   b845e:	bf00      	nop
   b8460:	000b9472 	.word	0x000b9472

000b8464 <strtoll>:
   b8464:	4613      	mov	r3, r2
   b8466:	460a      	mov	r2, r1
   b8468:	4601      	mov	r1, r0
   b846a:	4802      	ldr	r0, [pc, #8]	; (b8474 <strtoll+0x10>)
   b846c:	6800      	ldr	r0, [r0, #0]
   b846e:	f7ff bf63 	b.w	b8338 <_strtoll_l.constprop.0>
   b8472:	bf00      	nop
   b8474:	2003e4e4 	.word	0x2003e4e4

000b8478 <__register_exitproc>:
   b8478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b847c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8538 <__register_exitproc+0xc0>
   b8480:	4606      	mov	r6, r0
   b8482:	f8d8 0000 	ldr.w	r0, [r8]
   b8486:	461f      	mov	r7, r3
   b8488:	460d      	mov	r5, r1
   b848a:	4691      	mov	r9, r2
   b848c:	f000 f856 	bl	b853c <__retarget_lock_acquire_recursive>
   b8490:	4b25      	ldr	r3, [pc, #148]	; (b8528 <__register_exitproc+0xb0>)
   b8492:	681c      	ldr	r4, [r3, #0]
   b8494:	b934      	cbnz	r4, b84a4 <__register_exitproc+0x2c>
   b8496:	4c25      	ldr	r4, [pc, #148]	; (b852c <__register_exitproc+0xb4>)
   b8498:	601c      	str	r4, [r3, #0]
   b849a:	4b25      	ldr	r3, [pc, #148]	; (b8530 <__register_exitproc+0xb8>)
   b849c:	b113      	cbz	r3, b84a4 <__register_exitproc+0x2c>
   b849e:	681b      	ldr	r3, [r3, #0]
   b84a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b84a4:	6863      	ldr	r3, [r4, #4]
   b84a6:	2b1f      	cmp	r3, #31
   b84a8:	dd07      	ble.n	b84ba <__register_exitproc+0x42>
   b84aa:	f8d8 0000 	ldr.w	r0, [r8]
   b84ae:	f000 f847 	bl	b8540 <__retarget_lock_release_recursive>
   b84b2:	f04f 30ff 	mov.w	r0, #4294967295
   b84b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b84ba:	b34e      	cbz	r6, b8510 <__register_exitproc+0x98>
   b84bc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b84c0:	b988      	cbnz	r0, b84e6 <__register_exitproc+0x6e>
   b84c2:	4b1c      	ldr	r3, [pc, #112]	; (b8534 <__register_exitproc+0xbc>)
   b84c4:	b923      	cbnz	r3, b84d0 <__register_exitproc+0x58>
   b84c6:	f8d8 0000 	ldr.w	r0, [r8]
   b84ca:	f000 f838 	bl	b853e <__retarget_lock_release>
   b84ce:	e7f0      	b.n	b84b2 <__register_exitproc+0x3a>
   b84d0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b84d4:	f7fe fbfe 	bl	b6cd4 <malloc>
   b84d8:	2800      	cmp	r0, #0
   b84da:	d0f4      	beq.n	b84c6 <__register_exitproc+0x4e>
   b84dc:	2300      	movs	r3, #0
   b84de:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b84e2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b84e6:	6863      	ldr	r3, [r4, #4]
   b84e8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b84ec:	2201      	movs	r2, #1
   b84ee:	409a      	lsls	r2, r3
   b84f0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b84f4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b84f8:	4313      	orrs	r3, r2
   b84fa:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b84fe:	2e02      	cmp	r6, #2
   b8500:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8504:	bf02      	ittt	eq
   b8506:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b850a:	4313      	orreq	r3, r2
   b850c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8510:	6863      	ldr	r3, [r4, #4]
   b8512:	f8d8 0000 	ldr.w	r0, [r8]
   b8516:	1c5a      	adds	r2, r3, #1
   b8518:	3302      	adds	r3, #2
   b851a:	6062      	str	r2, [r4, #4]
   b851c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8520:	f000 f80e 	bl	b8540 <__retarget_lock_release_recursive>
   b8524:	2000      	movs	r0, #0
   b8526:	e7c6      	b.n	b84b6 <__register_exitproc+0x3e>
   b8528:	2003e7ec 	.word	0x2003e7ec
   b852c:	2003e760 	.word	0x2003e760
   b8530:	00000000 	.word	0x00000000
   b8534:	000b6cd5 	.word	0x000b6cd5
   b8538:	2003e548 	.word	0x2003e548

000b853c <__retarget_lock_acquire_recursive>:
   b853c:	4770      	bx	lr

000b853e <__retarget_lock_release>:
   b853e:	4770      	bx	lr

000b8540 <__retarget_lock_release_recursive>:
   b8540:	4770      	bx	lr

000b8542 <link_code_end>:
	...

000b8544 <link_const_data_start>:
   b8544:	514d0400 	.word	0x514d0400
   b8548:	00045454 	.word	0x00045454
   b854c:	49514d06 	.word	0x49514d06
   b8550:	03706473 	.word	0x03706473

000b8554 <dynalib_user>:
   b8554:	000b43e5 000b4421 000b4449 000b444d     .C..!D..ID..MD..
   b8564:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   b8574:	72697620 6c617574 54514d00 00203a54      virtual.MQTT: .
   b8584:	74736567 4c657275 00706d61 2e62616c     gestureLamp.lab.
   b8594:	77656874 632e6c63 00006d6f              thewcl.com..

000b85a0 <CSWTCH.88>:
   b85a0:	0000012c 00000018 000001f4 0000012c     ,...........,...
   b85b0:	00000050 61666564 20746c75 42534d00     P...default .MSB
   b85c0:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   b85d0:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   b85e0:	69747465 2073676e 75257325 20732520     ettings %s%u %s 
   b85f0:	45444f4d 003e7525                       MODE%u>.

000b85f8 <_ZL4font>:
   b85f8:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   b8608:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   b8618:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   b8628:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   b8638:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   b8648:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   b8658:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   b8668:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   b8678:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   b8688:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   b8698:	00000000 5f000000 07000000 14000700     ......._........
   b86a8:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   b86b8:	00502056 00030708 41221c00 22410000     V P......."A..A"
   b86c8:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   b86d8:	08080800 00000808 20006060 02040810     ........``. ....
   b86e8:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   b86f8:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   b8708:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   b8718:	00001e29 00000014 00003440 22140800     ).......@4....."
   b8728:	14141441 41001414 02081422 06095901     A......A"....Y..
   b8738:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   b8748:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   b8758:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   b8768:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   b8778:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   b8788:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   b8798:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   b87a8:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   b87b8:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   b87c8:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   b87d8:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   b87e8:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   b87f8:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   b8808:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   b8818:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   b8828:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   b8838:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   b8848:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   b8858:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   b8868:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   b8878:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   b8888:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   b8898:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   b88a8:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   b88b8:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   b88c8:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   b88d8:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   b88e8:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   b88f8:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   b8908:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   b8918:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   b8928:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   b8938:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   b8948:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   b8958:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   b8968:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   b8978:	00ff0000 ff101010 14141400 101000ff     ................
   b8988:	10ff00ff f010f010 fc141414 f7141400     ................
   b8998:	0000ff00 14ff00ff fc04f414 10171414     ................
   b89a8:	1f10101f 14141f10 10001f14 00f01010     ................
   b89b8:	1f000000 10101010 1010101f 0010f010     ................
   b89c8:	10ff0000 10101010 10101010 000010ff     ................
   b89d8:	0014ff00 ff00ff00 101f0000 fc000017     ................
   b89e8:	1414f404 14171017 f404f414 00ff0000     ................
   b89f8:	141414f7 14141414 14f700f7 14171414     ................
   b8a08:	101f1010 1414141f 101014f4 00f010f0     ................
   b8a18:	1f101f00 1f000000 00000014 000014fc     ................
   b8a28:	10f010f0 ff10ff10 ff141414 10101014     ................
   b8a38:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   b8a48:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   b8a58:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   b8a68:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   b8a78:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   b8a88:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   b8a98:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   b8aa8:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   b8ab8:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   b8ac8:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   b8ad8:	00000018 30001010 0101ff40 01011f00     .......0@.......
   b8ae8:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

000b8af8 <_ZTV12Adafruit_GFX>:
	...
   b8b08:	000b5495 000b7065 000b446d 000b4e9b     .T..ep..mD...N..
   b8b18:	000b4e9d 000b4ecf 000b4eab 000b4ebd     .N...N...N...N..
   b8b28:	000b4ddd 000b4e9b 000b50c7 000b50c5     .M...N...P...P..
   b8b38:	000b4ee7 000b4f25 000b4f5f 000b4fa5     .N..%O.._O...O..
   b8b48:	000b4fc1 000b5045                       .O..EP..

000b8b50 <_ZTV16OledWingAdafruit>:
	...
   b8b58:	000b5599 000b55b9 000b5495 000b7065     .U...U...T..ep..
   b8b68:	000b5ee5 000b4e9b 000b4e9d 000b4ecf     .^...N...N...N..
   b8b78:	000b4eab 000b4ebd 000b4ddd 000b4e9b     .N...N...M...N..
   b8b88:	000b50c7 000b6083 000b662b 000b65dd     .P...`..+f...e..
   b8b98:	000b4f5f 000b4fa5 000b4fc1 000b5045     _O...O...O..EP..

000b8ba8 <_ZTVN8particle11SPISettingsE>:
	...
   b8bb0:	000b4d89 000b4d5d 000b4d5f              .M..]M.._M..

000b8bbc <_ZL12splash1_data>:
   b8bbc:	00000000 00800100 00000000 00000000     ................
   b8bcc:	00008003 00000000 07000000 000000c0     ................
   b8bdc:	00000000 c0070000 00000000 00000000     ................
   b8bec:	00c00f00 00000000 00000000 0000e01f     ................
   b8bfc:	00000000 1f000000 000000e0 00000000     ................
   b8c0c:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   b8c24:	0000f07f 00000000 7ff81f00 000000f0     ................
   b8c34:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   b8c44:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   b8c54:	00000000 f9ff0f00 0000c0ff 00000000     ................
   b8c64:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   b8c74:	00000000 fc030000 80ffff73 00000000     ........s.......
   b8c84:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   b8c94:	000000ff 00000000 fc1ffe7f 00000000     ................
   b8ca4:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   b8cb4:	0000e0ff 00000000 ff191f00 000000c0     ................
   b8cc4:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   b8cd4:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   b8ce4:	00000000 fcffff00 00000000 00000000     ................
   b8cf4:	00feffff 00000000 ff000000 0000feff     ................
   b8d04:	00000000 efff0100 000000fe 00000000     ................
   b8d14:	fecfff01 00000000 03000000 00fe07ff     ................
   b8d24:	00000000 fc030000 0000fe07 00000000     ................
   b8d34:	03f00300 000000fe 00000000 fe008001     ................
	...
   b8d4c:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   b8d64:	0000000c 07000000 00fc0080 00c00300     ................
   b8d74:	80070000 0000fc01 0000c003 01800700     ................
   b8d84:	030000fc 000000c0 e0018007 1e000000     ................
   b8d94:	07000000 00e00180 001e0000 9ff7e37f     ................
   b8da4:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   b8db4:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   b8dc4:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   b8dd4:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   b8de4:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   b8df4:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   b8e04:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   b8e14:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   b8e24:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   b8e34:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   b8e44:	ffffff00 ffffffff c0ffffff ffffffff     ................
   b8e54:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   b8e64:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   b8e74:	5b6bfdff c0fd6adb                       ..k[.j..

000b8e7c <_ZL12splash2_data>:
   b8e7c:	00600000 00000000 00000000 00000000     ..`.............
   b8e8c:	0000e000 00000000 00000000 01000000     ................
   b8e9c:	000000e0 00000000 00000000 f0010000     ................
	...
   b8eb8:	00f00300 00000000 00000000 00000000     ................
   b8ec8:	0000f007 00000000 00000000 07000000     ................
   b8ed8:	000000f8 00000000 00000000 f80f0000     ................
   b8ee8:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   b8ef8:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   b8f08:	00c00300 010000fe ffff00e0 000000f8     ................
   b8f18:	f000c003 0f000000 7ffe7f00 030000c0     ................
   b8f28:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   b8f38:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   b8f48:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   b8f58:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   b8f68:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   b8f78:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   b8f88:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   b8f98:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   b8fa8:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   b8fb8:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   b8fc8:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   b8fd8:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   b8fe8:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   b8ff8:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   b9010:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   b9020:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   b9030:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   b9040:	ff7f000f a5feffff 198d9dad 060000e0     ................
   b9050:	ffff7f00 adb5feff e07eb5ed              ..........~.

000b905c <_ZTV16Adafruit_SSD1306>:
	...
   b9064:	000b5eb9 000b5ed1 000b5495 000b7065     .^...^...T..ep..
   b9074:	000b5ee5 000b4e9b 000b4e9d 000b4ecf     .^...N...N...N..
   b9084:	000b4eab 000b4ebd 000b4ddd 000b4e9b     .N...N...M...N..
   b9094:	000b50c7 000b6083 000b662b 000b65dd     .P...`..+f...e..
   b90a4:	000b4f5f 000b4fa5 000b4fc1 000b5045     _O...O...O..EP..

000b90b4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b90b4:	e0c08000 fefcf8f0                       ........

000b90bc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b90bc:	07030100 7f3f1f0f                       ......?.

000b90c4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b90c4:	a880d5ae                                ....

000b90c8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b90c8:	8d4000d3                                ..@.

000b90cc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b90cc:	c8a10020                                 ...

000b90d0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b90d0:	a6a440db                                 .@....

000b90d6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b90d6:	8f8102da                                ....

000b90da <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b90da:	                                         ...

000b90dd <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b90dd:	                                         ...

000b90e0 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b90e0:	21ff0022 00000000                       "..!....

000b90e8 <_ZTVN5spark13EthernetClassE>:
	...
   b90f0:	000b6da3 000b6d99 000b6d8f 000b6d85     .m...m...m...m..
   b9100:	000b6d79 000b6d6d 000b7d5d 000b7d65     ym..mm..]}..e}..
   b9110:	000b6d61 000b6d59 000b6d4f 000b6d45     am..Ym..Om..Em..
   b9120:	000b7d95                                .}..

000b9124 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9124:	18100800 38302820                       .... (08

000b912c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b9134:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   b9144:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000b9154 <_ZTV9IPAddress>:
	...
   b915c:	000b7385 000b7375 000b7377              .s..us..ws..

000b9168 <_ZTV9USBSerial>:
	...
   b9170:	000b7497 000b74ff 000b74d5 000b7065     .t...t...t..ep..
   b9180:	000b74c7 000b7499 000b74a9 000b74f9     .t...t...t...t..
   b9190:	000b74b9 000b7491                       .t...t..

000b9198 <_ZTV11USARTSerial>:
	...
   b91a0:	000b75a1 000b760d 000b75e5 000b7065     .u...v...u..ep..
   b91b0:	000b75b5 000b75d1 000b75c3 000b75df     .u...u...u...u..
   b91c0:	000b75a3 000b75a7                       .u...u..

000b91c8 <_ZTV7TwoWire>:
	...
   b91d0:	000b7645 000b768f 000b7667 000b7647     Ev...v..gv..Gv..
   b91e0:	000b766f 000b7677 000b767f 000b7687     ov..wv...v...v..
   b91f0:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   b9200:	203d2072 00006425                       r = %d..

000b9208 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9210:	000b778d 000b77b1 000b7c9b 000b77bf     .w...w...|...w..
   b9220:	000b7791                                .w..

000b9224 <_ZTV9TCPClient>:
	...
   b922c:	000b7205 000b721d 000b7709 000b7723     .r...r...w..#w..
   b923c:	000b7b31 000b774d 000b79a7 000b7781     1{..Mw...y...w..
   b924c:	000b7a39 000b7879 000b79d5 000b7be5     9z..yx...y...{..
   b925c:	000b7975 000b7783 000b7735 000b77c5     uy...w..5w...w..
   b926c:	000b7859                                Yx..

000b9270 <_ZTVN5spark9WiFiClassE>:
	...
   b9278:	000b7cff 000b7cf5 000b7ceb 000b7ca1     .|...|...|...|..
   b9288:	000b7cdf 000b7cd3 000b7d5d 000b7d65     .|...|..]}..e}..
   b9298:	000b7cc7 000b7cbf 000b7cb5 000b7cab     .|...|...|...|..
   b92a8:	000b7d95                                .}..

000b92ac <_ZTVN5spark12NetworkClassE>:
	...
   b92b4:	000b7d1d 000b7d27 000b7d31 000b7d3b     .}..'}..1}..;}..
   b92c4:	000b7d45 000b7d51 000b7d5d 000b7d65     E}..Q}..]}..e}..
   b92d4:	000b7d6d 000b7d79 000b7d81 000b7d8b     m}..y}...}...}..
   b92e4:	000b7d95                                .}..

000b92e8 <_ZSt7nothrow>:
	...

000b92e9 <_ZTSSt19_Sp_make_shared_tag>:
   b92e9:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b92f9:	5f646572 00676174                        red_tag....

000b9304 <_ZTISt19_Sp_make_shared_tag>:
   b9304:	000b9344 000b92e9                       D.......

000b930c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b930c:	000b93a4 000b9318 000b93c8              ............

000b9318 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9318:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b9328:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b9338:	00000045                                E...

000b933c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b933c:	00000000 000b930c 000b80c5 000b80d9     ................
   b934c:	000b826d 000b826d 000b8143 000b8085     m...m...C.......
   b935c:	000b812b 000b80ed 000b80b7              +...........

000b9368 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9368:	000b93a4 000b9374 000b930c              ....t.......

000b9374 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9374:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b9384:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b9394:	456f666e 00000000                       nfoE....

000b939c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b939c:	00000000 000b9368 000b816d 000b8181     ....h...m.......
   b93ac:	000b826d 000b826d 000b8143 000b8085     m...m...C.......
   b93bc:	000b8241 000b81cd 000b8195              A...........

000b93c8 <_ZTISt9type_info>:
   b93c8:	000b9344 000b93d0                       D.......

000b93d0 <_ZTSSt9type_info>:
   b93d0:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b93e0:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b93f0:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   b9400:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   b9410:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   b9420:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   b9430:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   b9440:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   b9450:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   b9460:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

000b9471 <_ctype_>:
   b9471:	20202000 20202020 28282020 20282828     .         ((((( 
   b9481:	20202020 20202020 20202020 20202020                     
   b9491:	10108820 10101010 10101010 10101010      ...............
   b94a1:	04040410 04040404 10040404 10101010     ................
   b94b1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   b94c1:	01010101 01010101 01010101 10101010     ................
   b94d1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   b94e1:	02020202 02020202 02020202 10101010     ................
   b94f1:	00000020 00000000 00000000 00000000      ...............
	...

000b9572 <link_const_data_end>:
	...

000b9574 <link_constructors_location>:
   b9574:	000b4789 	.word	0x000b4789
   b9578:	000b4d4d 	.word	0x000b4d4d
   b957c:	000b6dad 	.word	0x000b6dad
   b9580:	000b6f25 	.word	0x000b6f25
   b9584:	000b7055 	.word	0x000b7055
   b9588:	000b71d9 	.word	0x000b71d9
   b958c:	000b71e9 	.word	0x000b71e9
   b9590:	000b7231 	.word	0x000b7231
   b9594:	000b7d09 	.word	0x000b7d09
   b9598:	000b7e6d 	.word	0x000b7e6d
